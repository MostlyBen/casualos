{
    "hash": "types/debuggers/debugger",
    "pageTitle": "Debugger",
    "pageDescription": "Defines an interface that represents a debugger.",
    "pageSidebarLabel": "Debugger",
    "contents": [
        {
            "id": 1988,
            "order": 9999,
            "name": "Debugger",
            "reflection": {
                "id": 1988,
                "name": "NormalDebugger",
                "kind": 256,
                "kindString": "Interface",
                "flags": [],
                "comment": {
                    "shortText": "Defines an interface that represents a debugger.",
                    "tags": [
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "types/debuggers/debugger"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Debugger"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Debugger"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Defines an interface that represents a debugger."
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "Debugger"
                        },
                        {
                            "tag": "docreferenceactions",
                            "paramName": "",
                            "text": "^\\w+$\n"
                        }
                    ]
                },
                "children": [
                    {
                        "id": 2042,
                        "name": "action",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": [],
                        "comment": {
                            "shortText": "The action-related actions that are available in this debugger.",
                            "tags": [
                                {
                                    "tag": "docreferenceactions",
                                    "paramName": "",
                                    "text": "^action\\."
                                },
                                {
                                    "tag": "docsource",
                                    "paramName": "",
                                    "text": "ActionActions\n"
                                }
                            ]
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                "line": 1219,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "reflection",
                            "declaration": {
                                "id": 2043,
                                "name": "__type",
                                "kind": 65536,
                                "kindString": "Type literal",
                                "flags": {}
                            }
                        },
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.action"
                        },
                        "typeText": "interface ActionActions {\n}",
                        "typeReference": "ActionActions",
                        "references": "- [`action.perform(action)`](ref:action.perform)\n- [`action.reject(action)`](ref:action.reject)\n"
                    },
                    {
                        "id": 2040,
                        "name": "os",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": [],
                        "comment": {
                            "shortText": "The OS actions that are available in this debugger.",
                            "tags": [
                                {
                                    "tag": "docreferenceactions",
                                    "paramName": "",
                                    "text": "^os\\."
                                },
                                {
                                    "tag": "docsource",
                                    "paramName": "",
                                    "text": "OSActions\n"
                                }
                            ]
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                "line": 1205,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "reflection",
                            "declaration": {
                                "id": 2041,
                                "name": "__type",
                                "kind": 65536,
                                "kindString": "Type literal",
                                "flags": {}
                            }
                        },
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.os"
                        },
                        "typeText": "interface OSActions {\n}",
                        "typeReference": "OSActions",
                        "references": "- [`os.beginAudioRecording(options)`](ref:os.beginAudioRecording)\n- [`os.endAudioRecording()`](ref:os.endAudioRecording)\n- [`os.attachDebugger(debug, options)`](ref:os.attachDebugger)\n- [`os.createDebugger(options)`](ref:os.createDebugger-normal)\n- [`os.createDebugger(options)`](ref:os.createDebugger-pausable)\n- [`os.focusOn(bot, options)`](ref:os.focusOn-bot)\n- [`os.focusOn(position, options)`](ref:os.focusOn-position)\n- [`os.getExecutingDebugger()`](ref:os.getExecutingDebugger)\n- [`os.showInput(currentValue, options)`](ref:os.showInput)\n- [`os.addBotDropGrid(bot, ...targets)`](ref:os.addBotDropGrid)\n- [`os.addBotDropSnap(bot, ...targets)`](ref:os.addBotDropSnap)\n- [`os.addDropGrid(...targets)`](ref:os.addDropGrid)\n- [`os.addDropSnap(...targets)`](ref:os.addDropSnap)\n- [`os.applyUpdatesToInst(updates)`](ref:os.applyUpdatesToInst)\n- [`os.arSupported()`](ref:os.arSupported)\n- [`os.beginAudioRecording(options)`](ref:os.beginAudioRecording)\n- [`os.bufferFormAddressGLTF(address)`](ref:os.bufferFormAddressGLTF)\n- [`os.bufferSound(url)`](ref:os.bufferSound)\n- [`os.calculateRayFromCamera(portal, viewportCoordinates)`](ref:os.calculateRayFromCamera)\n- [`os.cancelSound(soundId)`](ref:os.cancelSound)\n- [`os.capturePhoto(options)`](ref:os.capturePhoto)\n- [`os.closeBarcodeScanner()`](ref:os.closeBarcodeScanner)\n- [`os.closeCircleWipe(options)`](ref:os.closeCircleWipe)\n- [`os.closeImageClassifier()`](ref:os.closeImageClassifier)\n- [`os.closePhotoCamera()`](ref:os.closePhotoCamera)\n- [`os.closeQRCodeScanner()`](ref:os.closeQRCodeScanner)\n- [`os.compileApp(appId, content)`](ref:os.compileApp)\n- [`os.convertGeolocationToWhat3Words(location)`](ref:os.convertGeolocationToWhat3Words)\n- [`os.countEvents(recordNameOrKey, eventName, endpoint)`](ref:os.countEvents)\n- [`os.createInitializationUpdate(bots)`](ref:os.createInitializationUpdate)\n- [`os.device()`](ref:os.device)\n- [`os.disableAR()`](ref:os.disableAR)\n- [`os.disablePointOfView()`](ref:os.disablePointOfView)\n- [`os.disableVR()`](ref:os.disableVR)\n- [`os.disableWakeLock()`](ref:os.disableWakeLock)\n- [`os.download(data, filename, mimeType)`](ref:os.download)\n- [`os.downloadBots(bots, filename)`](ref:os.downloadBots)\n- [`os.downloadBotsAsInitialzationUpdate(bots, filename)`](ref:os.downloadBotsAsInitialzationUpdate)\n- [`os.downloadInst()`](ref:os.downloadInst)\n- [`os.downloadInst()`](ref:os.downloadInst)\n- [`os.enableAR(options)`](ref:os.enableAR)\n- [`os.enableCollaboration()`](ref:os.enableCollaboration)\n- [`os.enableCustomDragging()`](ref:os.enableCustomDragging)\n- [`os.enablePointOfView(center, imu)`](ref:os.enablePointOfView)\n- [`os.enableVR(options)`](ref:os.enableVR)\n- [`os.endAudioRecording()`](ref:os.endAudioRecording)\n- [`os.eraseData(recordKeyOrName, address, endpoint)`](ref:os.eraseData)\n- [`os.eraseManualApprovalData(recordKeyOrName, address, endpoint)`](ref:os.eraseManualApprovalData)\n- [`os.exitFullscreenMode()`](ref:os.exitFullscreenMode)\n- [`os.getAverageFrameRate()`](ref:os.getAverageFrameRate)\n- [`os.getCameraPosition(portal)`](ref:os.getCameraPosition)\n- [`os.getCameraRotation(portal)`](ref:os.getCameraRotation)\n- [`os.getCurrentDimension()`](ref:os.getCurrentDimension)\n- [`os.getCurrentInst()`](ref:os.getCurrentInst)\n- [`os.getCurrentInstUpdate()`](ref:os.getCurrentInstUpdate)\n- [`os.getCurrentInst()`](ref:os.getCurrentInst)\n- [`os.getData(recordKeyOrName, address, endpoint)`](ref:os.getData)\n- [`os.getDimensionalDepth(dimension)`](ref:os.getDimensionalDepth)\n- [`os.getFocusPoint(portal)`](ref:os.getFocusPoint)\n- [`os.getGeolocation()`](ref:os.getGeolocation)\n- [`os.getInputList()`](ref:os.getInputList)\n- [`os.getInputState(controller, button)`](ref:os.getInputState)\n- [`os.getInstStateFromUpdates(updates)`](ref:os.getInstStateFromUpdates)\n- [`os.getManualApprovalData(recordKeyOrName, address, endpoint)`](ref:os.getManualApprovalData)\n- [`os.getMediaPermission(options)`](ref:os.getMediaPermission)\n- [`os.getMenuDimension()`](ref:os.getMenuDimension)\n- [`os.getMiniPortalDimension()`](ref:os.getMiniPortalDimension)\n- [`os.getPointerDirection(pointer)`](ref:os.getPointerDirection)\n- [`os.getPointerPosition(pointer)`](ref:os.getPointerPosition)\n- [`os.getPointerRotation(pointer)`](ref:os.getPointerRotation)\n- [`os.getPortalDimension(portal)`](ref:os.getPortalDimension)\n- [`os.getPublicRecordKey(name)`](ref:os.getPublicRecordKey)\n- [`os.getRoomOptions(roomName)`](ref:os.getRoomOptions)\n- [`os.getRoomRemoteOptions(roomName, remoteId)`](ref:os.getRoomRemoteOptions)\n- [`os.getRoomTrackOptions(roomName, address)`](ref:os.getRoomTrackOptions)\n- [`os.getSubjectlessPublicRecordKey(name)`](ref:os.getSubjectlessPublicRecordKey)\n- [`os.getWakeLockConfiguration()`](ref:os.getWakeLockConfiguration)\n- [`os.goToDimension(dimension)`](ref:os.goToDimension)\n- [`os.goToURL(url)`](ref:os.goToURL)\n- [`os.grantInstAdminPermission(recordName, options)`](ref:os.grantInstAdminPermission)\n- [`os.grantInstRole(recordName, role, inst, expireTimeMs, options)`](ref:os.grantInstRole)\n- [`os.grantRecordMarkerPermission(recordName, marker, permission, options)`](ref:os.grantRecordMarkerPermission)\n- [`os.grantUserRole(recordName, role, userId, expireTimeMs, options)`](ref:os.grantUserRole)\n- [`os.hasBotInMiniPortal(bots)`](ref:os.hasBotInMiniPortal)\n- [`os.hideBarcode()`](ref:os.hideBarcode)\n- [`os.hideChat()`](ref:os.hideChat)\n- [`os.hideHtml()`](ref:os.hideHtml)\n- [`os.hideQRCode()`](ref:os.hideQRCode)\n- [`os.hideTips(tipIds)`](ref:os.hideTips)\n- [`os.importAUX(urlOrJSON)`](ref:os.importAUX)\n- [`os.inSheet()`](ref:os.inSheet)\n- [`os.isCollaborative()`](ref:os.isCollaborative)\n- [`os.isInDimension(dimension)`](ref:os.isInDimension)\n- [`os.isRecordKey(key)`](ref:os.isRecordKey)\n- [`os.joinRoom(roomName, options)`](ref:os.joinRoom)\n- [`os.leaveRoom(roomName, options)`](ref:os.leaveRoom)\n- [`os.listBuiltinTags()`](ref:os.listBuiltinTags)\n- [`os.listData(recordKeyOrName, startingAddress, endpoint)`](ref:os.listData)\n- [`os.listFormAnimations(botOrAddress)`](ref:os.listFormAnimations)\n- [`os.listInstUpdates()`](ref:os.listInstUpdates)\n- [`os.listUserStudios(endpoint)`](ref:os.listUserStudios)\n- [`os.loadInst(id)`](ref:os.loadInst)\n- [`os.loadInst(id)`](ref:os.loadInst)\n- [`os.log(...args)`](ref:os.log)\n- [`os.meetCommand(command, ...args)`](ref:os.meetCommand)\n- [`os.meetFunction(functionName, ...args)`](ref:os.meetFunction)\n- [`os.openBarcodeScanner(camera)`](ref:os.openBarcodeScanner)\n- [`os.openCircleWipe(options)`](ref:os.openCircleWipe)\n- [`os.openDevConsole()`](ref:os.openDevConsole)\n- [`os.openImageClassifier(options)`](ref:os.openImageClassifier)\n- [`os.openPhotoCamera(options)`](ref:os.openPhotoCamera)\n- [`os.openQRCodeScanner(camera)`](ref:os.openQRCodeScanner)\n- [`os.openURL(url)`](ref:os.openURL)\n- [`os.parseBotsFromData(jsonOrPdf)`](ref:os.parseBotsFromData)\n- [`os.playSound(url)`](ref:os.playSound)\n- [`os.raycast(portal, origin, direction)`](ref:os.raycast)\n- [`os.raycastFromCamera(portal, viewportCoordinates)`](ref:os.raycastFromCamera)\n- [`os.recordData(recordKeyOrRecordName, address, data, endpointOrOptions)`](ref:os.recordData)\n- [`os.recordEvent(recordKeyOrName, eventName, endpoint)`](ref:os.recordEvent)\n- [`os.recordFile(recordKeyOrName, data, options, endpoint)`](ref:os.recordFile)\n- [`os.recordManualApprovalData(recordKeyOrRecordName, address, data, endpointOrOptions)`](ref:os.recordManualApprovalData)\n- [`os.registerApp(portalId, bot)`](ref:os.registerApp)\n- [`os.registerTagPrefix(prefix, options)`](ref:os.registerTagPrefix)\n- [`os.remoteCount(inst)`](ref:os.remoteCount)\n- [`os.remotes()`](ref:os.remotes)\n- [`os.replaceDragBot(bot)`](ref:os.replaceDragBot)\n- [`os.requestAuthBot()`](ref:os.requestAuthBot)\n- [`os.requestAuthBotInBackground()`](ref:os.requestAuthBotInBackground)\n- [`os.requestFullscreenMode()`](ref:os.requestFullscreenMode)\n- [`os.requestWakeLock()`](ref:os.requestWakeLock)\n- [`os.revokeInstRole(recordName, role, inst, options)`](ref:os.revokeInstRole)\n- [`os.revokeRecordMarkerPermission(recordName, marker, permission, options)`](ref:os.revokeRecordMarkerPermission)\n- [`os.revokeUserRole(recordName, role, userId, options)`](ref:os.revokeUserRole)\n- [`os.run(script)`](ref:os.run)\n- [`os.setClipboard(text)`](ref:os.setClipboard)\n- [`os.setRoomOptions(roomName, options)`](ref:os.setRoomOptions)\n- [`os.setRoomTrackOptions(roomName, address, options)`](ref:os.setRoomTrackOptions)\n- [`os.share(options)`](ref:os.share)\n- [`os.showBarcode(code, format)`](ref:os.showBarcode)\n- [`os.showConfirm(options)`](ref:os.showConfirm)\n- [`os.showHtml(html)`](ref:os.showHtml)\n- [`os.showInputForTag(bot, tag, options)`](ref:os.showInputForTag)\n- [`os.showJoinCode(inst, dimension)`](ref:os.showJoinCode)\n- [`os.showQRCode(code)`](ref:os.showQRCode)\n- [`os.showUploadAuxFile()`](ref:os.showUploadAuxFile)\n- [`os.showUploadFiles()`](ref:os.showUploadFiles)\n- [`os.sleep(time)`](ref:os.sleep)\n- [`os.startFormAnimation(botOrBots, nameOrIndex, options)`](ref:os.startFormAnimation)\n- [`os.stopFormAnimation(botOrBots, options)`](ref:os.stopFormAnimation)\n- [`os.tip(message, pixelX, pixelY, duration)`](ref:os.tip)\n- [`os.toast(message, duration)`](ref:os.toast)\n- [`os.totalRemoteCount()`](ref:os.totalRemoteCount)\n- [`os.unloadInst(id)`](ref:os.unloadInst)\n- [`os.unloadInst(id)`](ref:os.unloadInst)\n- [`os.unregisterApp(appId)`](ref:os.unregisterApp)\n- [`os.version()`](ref:os.version)\n- [`os.vrSupported()`](ref:os.vrSupported)\n- [`os.agreedUponTime`](ref:os.agreedUponTime)\n- [`os.deadReckoningTime`](ref:os.deadReckoningTime)\n- [`os.instLatency`](ref:os.instLatency)\n- [`os.instTimeOffset`](ref:os.instTimeOffset)\n- [`os.instTimeOffsetSpread`](ref:os.instTimeOffsetSpread)\n- [`os.localTime`](ref:os.localTime)\n- [`os.registerTagPrefix(prefix, options)`](ref:os.registerTagPrefix)\n- [`os.remotes()`](ref:os.remotes)\n- [`os.remotes()`](ref:os.remotes)\n- [`os.remoteCount(inst)`](ref:os.remoteCount)\n- [`os.remoteCount(inst)`](ref:os.remoteCount)\n- [`os.totalRemoteCount()`](ref:os.totalRemoteCount)\n- [`os.totalRemoteCount()`](ref:os.totalRemoteCount)\n- [`os.sleep(time)`](ref:os.sleep)\n"
                    },
                    {
                        "id": 2038,
                        "name": "web",
                        "kind": 1024,
                        "kindString": "Property",
                        "flags": [],
                        "comment": {
                            "shortText": "The web actions that are available in this debugger.",
                            "tags": [
                                {
                                    "tag": "docreferenceactions",
                                    "paramName": "",
                                    "text": "^web\\."
                                },
                                {
                                    "tag": "docsource",
                                    "paramName": "",
                                    "text": "WebActions\n"
                                }
                            ]
                        },
                        "sources": [
                            {
                                "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                                "line": 1197,
                                "character": 4
                            }
                        ],
                        "type": {
                            "type": "reflection",
                            "declaration": {
                                "id": 2039,
                                "name": "__type",
                                "kind": 65536,
                                "kindString": "Type literal",
                                "flags": {}
                            }
                        },
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.web"
                        },
                        "typeText": "interface WebActions {\n}",
                        "typeReference": "WebActions",
                        "references": "- [`web.get(url, options)`](ref:web.get)\n- [`web.hook(options)`](ref:web.hook)\n- [`web.post(url, data, options)`](ref:web.post)\n"
                    },
                    {
                        "id": 1991,
                        "name": "getAllActions",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "signatures": [
                            {
                                "id": 1992,
                                "name": "getAllActions",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Gets the list of action objects that have been performed by bots in the current debugger.\nAction objects are used by CasualOS to represent changes to bots or external effects that should be performed.\nExamples of this are [`create(...mods)`](ref:create), [`os.toast(message, duration)`](ref:os.toast) and [`os.enableVR(options)`](ref:os.enableVR).",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Get the list of bot changes and actions that have been performed in a debugger\nconst debug = await os.createDebugger();\ndebug.create({\n    test: '@os.toast(\"Hello\")'\n});\ndebug.shout(\"test\");\n\nconst actions = debug.getAllActions();\n\nassertEqual(actions, [\n    {\n        type: 'add_bot',\n        id: 'uuid-1',\n        bot: {\n            id: 'uuid-1',\n            tags: {\n                test: '@os.toast(\"Hello\")'\n            }\n        }\n    },\n    {\n        type: 'show_toast',\n        message: 'Hello',\n        duration: 2000\n    }\n]);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "array",
                                    "elementType": {
                                        "type": "reference",
                                        "name": "BotAction"
                                    }
                                },
                                "inheritedFrom": {
                                    "type": "reference",
                                    "name": "DebuggerBase.getAllActions"
                                }
                            }
                        ],
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.getAllActions"
                        }
                    },
                    {
                        "id": 1995,
                        "name": "getBotActions",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "signatures": [
                            {
                                "id": 1996,
                                "name": "getBotActions",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Gets the list of bot actions that have been performed by bots in the current debugger.\nAction objects are used by CasualOS to represent changes to bots or external effects that should be performed.\nBot actions are actions that immediately change bots or bot tags or masks.",
                                    "text": "Examples of bot actions are [`create(...mods)`](ref:create), [`destroy(bot)`](ref:destroy) or [`setTagMask(bot, tag, value, space)`](ref:setTagMask).\n",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Get the list of bot changes that have been performed in a debugger\nconst debug = await os.createDebugger();\ndebug.create({\n    test: '@os.toast(\"Hello\")'\n});\ndebug.shout(\"test\");\n\nconst actions = debug.getBotActions();\n\nassertEqual(actions, [\n    {\n        type: 'add_bot',\n        id: 'uuid-1',\n        bot: {\n            id: 'uuid-1',\n            tags: {\n                test: '@os.toast(\"Hello\")'\n            }\n        }\n    },\n]);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "array",
                                    "elementType": {
                                        "type": "reference",
                                        "name": "BotAction"
                                    }
                                },
                                "inheritedFrom": {
                                    "type": "reference",
                                    "name": "DebuggerBase.getBotActions"
                                }
                            }
                        ],
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.getBotActions"
                        }
                    },
                    {
                        "id": 1993,
                        "name": "getCommonActions",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "signatures": [
                            {
                                "id": 1994,
                                "name": "getCommonActions",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Gets the list of common action objects that have been performed by bots in the current debugger. Action objects are used by CasualOS to represent changes to bots or external effects that should be performed.\nCommon actions are actions that do not immediately change bots or bot tags or masks.",
                                    "text": "Examples of common actions are [`os.toast(message, duration)`](ref:os.toast) and [`os.enableVR(options)`](ref:os.enableVR).\n",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Get the list of actions that have been performed in a debugger\nconst debug = await os.createDebugger();\ndebug.create({\n    test: '@os.toast(\"Hello\")'\n});\ndebug.shout(\"test\");\n\nconst actions = debug.getCommonActions();\n\nassertEqual(actions, [\n    {\n        type: 'show_toast',\n        message: 'Hello',\n        duration: 2000\n    }\n]);\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "array",
                                    "elementType": {
                                        "type": "reference",
                                        "name": "BotAction"
                                    }
                                },
                                "inheritedFrom": {
                                    "type": "reference",
                                    "name": "DebuggerBase.getCommonActions"
                                }
                            }
                        ],
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.getCommonActions"
                        }
                    },
                    {
                        "id": 1997,
                        "name": "getErrors",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "signatures": [
                            {
                                "id": 1998,
                                "name": "getErrors",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Gets the list of errors that have occurred in the current debugger. Errors occur when an exceptional event happens in a script and prevents the rest of the script from executing.",
                                    "text": "Debuggers capture these errors and let you inspect them afterwards.\n",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Get the list of errors that have happened in a debugger\nconst debug = await os.createDebugger();\ndebug.create({\n    test: '@throw new Error(\"My Error\")'\n});\ndebug.shout(\"test\");\n\nconst errors = debug.getErrors();\n\nassertEqual(errors.length, 1);\nassertEqual(errors[0].error, new Error(\"My Error\"));\nassertEqual(errors[0].tag, \"test\");\n"
                                        }
                                    ]
                                },
                                "type": {
                                    "type": "array",
                                    "elementType": {
                                        "type": "intrinsic",
                                        "name": "any"
                                    }
                                },
                                "inheritedFrom": {
                                    "type": "reference",
                                    "name": "DebuggerBase.getErrors"
                                }
                            }
                        ],
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.getErrors"
                        }
                    },
                    {
                        "id": 1989,
                        "name": "getPortalBots",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "signatures": [
                            {
                                "id": 1990,
                                "name": "getPortalBots",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Gets the list of portal bots in the debugger.",
                                    "tags": []
                                },
                                "type": {
                                    "type": "reference",
                                    "typeArguments": [
                                        {
                                            "type": "intrinsic",
                                            "name": "string"
                                        },
                                        {
                                            "type": "reference",
                                            "id": 2758,
                                            "name": "Bot"
                                        }
                                    ],
                                    "qualifiedName": "Map",
                                    "package": "typescript",
                                    "name": "Map"
                                },
                                "inheritedFrom": {
                                    "type": "reference",
                                    "name": "DebuggerBase.getPortalBots"
                                }
                            }
                        ],
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.getPortalBots"
                        }
                    },
                    {
                        "id": 2005,
                        "name": "onAfterAction",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "signatures": [
                            {
                                "id": 2006,
                                "name": "onAfterAction",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Registers the given handler to be called after a bot action is executed in this debugger.",
                                    "tags": []
                                },
                                "parameters": [
                                    {
                                        "id": 2007,
                                        "name": "handler",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The handler that should be called.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reflection",
                                            "declaration": {
                                                "id": 2008,
                                                "name": "__type",
                                                "kind": 65536,
                                                "kindString": "Type literal",
                                                "flags": {},
                                                "signatures": [
                                                    {
                                                        "id": 2009,
                                                        "name": "__type",
                                                        "kind": 4096,
                                                        "kindString": "Call signature",
                                                        "flags": {},
                                                        "parameters": [
                                                            {
                                                                "id": 2010,
                                                                "name": "action",
                                                                "kind": 32768,
                                                                "kindString": "Parameter",
                                                                "flags": {},
                                                                "type": {
                                                                    "type": "reference",
                                                                    "name": "BotAction"
                                                                }
                                                            }
                                                        ],
                                                        "type": {
                                                            "type": "intrinsic",
                                                            "name": "void"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "void"
                                },
                                "inheritedFrom": {
                                    "type": "reference",
                                    "name": "DebuggerBase.onAfterAction"
                                }
                            }
                        ],
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.onAfterAction"
                        }
                    },
                    {
                        "id": 2023,
                        "name": "onAfterScriptUpdatedTag",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "signatures": [
                            {
                                "id": 2024,
                                "name": "onAfterScriptUpdatedTag",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Registers the given handler function to be called after any tag is updated in the debugger.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Listen for tag updates in a debugger\nconst debug = await os.createDebugger({\n    pausable: true\n});\n\n// Register a listener that gets called whenever a tag is updated.\ndebug.onAfterScriptUpdatedTag(update => {\n    console.log('tag updated', update);\n});\n\n// Because the debugger is pausable, the create() function returns a promise\n// because it calls @onCreate which could cause a pause trigger to be hit.\nconst debuggerBot = await debug.create({\n    test: '@tags.message = \"hello, world\";'\n});\n\n// Send a shout. Just like the create() function above, we recieve a promise that we can await.\nawait debug.shout('test');\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 2025,
                                        "name": "listener",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "the function that should be called when a tag is updated.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reflection",
                                            "declaration": {
                                                "id": 2026,
                                                "name": "__type",
                                                "kind": 65536,
                                                "kindString": "Type literal",
                                                "flags": {},
                                                "signatures": [
                                                    {
                                                        "id": 2027,
                                                        "name": "__type",
                                                        "kind": 4096,
                                                        "kindString": "Call signature",
                                                        "flags": {},
                                                        "parameters": [
                                                            {
                                                                "id": 2028,
                                                                "name": "update",
                                                                "kind": 32768,
                                                                "kindString": "Parameter",
                                                                "flags": {},
                                                                "type": {
                                                                    "type": "reference",
                                                                    "id": 2190,
                                                                    "name": "DebuggerTagUpdate"
                                                                }
                                                            }
                                                        ],
                                                        "type": {
                                                            "type": "intrinsic",
                                                            "name": "void"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "void"
                                },
                                "inheritedFrom": {
                                    "type": "reference",
                                    "name": "DebuggerBase.onAfterScriptUpdatedTag"
                                }
                            }
                        ],
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.onAfterScriptUpdatedTag"
                        }
                    },
                    {
                        "id": 2029,
                        "name": "onAfterScriptUpdatedTagMask",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "signatures": [
                            {
                                "id": 2030,
                                "name": "onAfterScriptUpdatedTagMask",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Registers the given handler function to be called after any tag mask is updated in the debugger.",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Listen for tag mask updates in a debugger\nconst debug = await os.createDebugger({\n    pausable: true\n});\n\n// Register a listener that gets called whenever a tag mask is updated.\ndebug.onAfterScriptUpdatedTagMask(update => {\n    console.log('tag mask updated', update);\n});\n\n// Because the debugger is pausable, the create() function returns a promise\n// because it calls @onCreate which could cause a pause trigger to be hit.\nconst debuggerBot = await debug.create({\n    test: '@masks.message = \"hello, world\";'\n});\n\n// Send a shout. Just like the create() function above, we recieve a promise that we can await.\nawait debug.shout('test');\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 2031,
                                        "name": "listener",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "the function that should be called when a tag mask is updated.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reflection",
                                            "declaration": {
                                                "id": 2032,
                                                "name": "__type",
                                                "kind": 65536,
                                                "kindString": "Type literal",
                                                "flags": {},
                                                "signatures": [
                                                    {
                                                        "id": 2033,
                                                        "name": "__type",
                                                        "kind": 4096,
                                                        "kindString": "Call signature",
                                                        "flags": {},
                                                        "parameters": [
                                                            {
                                                                "id": 2034,
                                                                "name": "update",
                                                                "kind": 32768,
                                                                "kindString": "Parameter",
                                                                "flags": {},
                                                                "type": {
                                                                    "type": "reference",
                                                                    "id": 2184,
                                                                    "name": "DebuggerTagMaskUpdate"
                                                                }
                                                            }
                                                        ],
                                                        "type": {
                                                            "type": "intrinsic",
                                                            "name": "void"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "void"
                                },
                                "inheritedFrom": {
                                    "type": "reference",
                                    "name": "DebuggerBase.onAfterScriptUpdatedTagMask"
                                }
                            }
                        ],
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.onAfterScriptUpdatedTagMask"
                        }
                    },
                    {
                        "id": 1999,
                        "name": "onBeforeAction",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "signatures": [
                            {
                                "id": 2000,
                                "name": "onBeforeAction",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Registers the given handler to be called before a bot action is executed in this debugger.",
                                    "tags": []
                                },
                                "parameters": [
                                    {
                                        "id": 2001,
                                        "name": "handler",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "The handler that should be called.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reflection",
                                            "declaration": {
                                                "id": 2002,
                                                "name": "__type",
                                                "kind": 65536,
                                                "kindString": "Type literal",
                                                "flags": {},
                                                "signatures": [
                                                    {
                                                        "id": 2003,
                                                        "name": "__type",
                                                        "kind": 4096,
                                                        "kindString": "Call signature",
                                                        "flags": {},
                                                        "parameters": [
                                                            {
                                                                "id": 2004,
                                                                "name": "action",
                                                                "kind": 32768,
                                                                "kindString": "Parameter",
                                                                "flags": {},
                                                                "type": {
                                                                    "type": "reference",
                                                                    "name": "BotAction"
                                                                }
                                                            }
                                                        ],
                                                        "type": {
                                                            "type": "intrinsic",
                                                            "name": "void"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "void"
                                },
                                "inheritedFrom": {
                                    "type": "reference",
                                    "name": "DebuggerBase.onBeforeAction"
                                }
                            }
                        ],
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.onBeforeAction"
                        }
                    },
                    {
                        "id": 2011,
                        "name": "onBeforeUserAction",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "signatures": [
                            {
                                "id": 2012,
                                "name": "onBeforeUserAction",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Registers the given handler function to be called before a user action is performed in the debugger.",
                                    "text": "User actions are like normal actions, except they are generated by the CasualOS frontend.\nGenerally, this only happens for built-in shouts and whispers.\nAdditionally, these actions can only be automatically created for debuggers that are attached using [`os.attachDebugger(debug, options)`](ref:os.attachDebugger).\n",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Listen for tag updates in a debugger\nconst debug = await os.createDebugger({\n    pausable: true\n});\n\n// Register a listener that gets called whenever a user action is about to be performed.\ndebug.onBeforeUserAction(update => {\n    console.log('user action', update);\n});\n\n// Because the debugger is pausable, the create() function returns a promise\n// because it calls @onCreate which could cause a pause trigger to be hit.\nconst debuggerBot = await debug.create({\n    home: true,\n});\n\n// Attach the debugger to the front end\nawait os.attachDebugger(debug);\n"
                                        },
                                        {
                                            "tag": "docname",
                                            "paramName": "",
                                            "text": "onBeforeUserAction"
                                        },
                                        {
                                            "tag": "docid",
                                            "paramName": "",
                                            "text": "debug.onBeforeUserAction\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 2013,
                                        "name": "listener",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "the function that should be called before a user action is performed.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reflection",
                                            "declaration": {
                                                "id": 2014,
                                                "name": "__type",
                                                "kind": 65536,
                                                "kindString": "Type literal",
                                                "flags": {},
                                                "signatures": [
                                                    {
                                                        "id": 2015,
                                                        "name": "__type",
                                                        "kind": 4096,
                                                        "kindString": "Call signature",
                                                        "flags": {},
                                                        "parameters": [
                                                            {
                                                                "id": 2016,
                                                                "name": "action",
                                                                "kind": 32768,
                                                                "kindString": "Parameter",
                                                                "flags": {},
                                                                "type": {
                                                                    "type": "reference",
                                                                    "name": "BotAction"
                                                                }
                                                            }
                                                        ],
                                                        "type": {
                                                            "type": "intrinsic",
                                                            "name": "void"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "void"
                                },
                                "inheritedFrom": {
                                    "type": "reference",
                                    "name": "DebuggerBase.onBeforeUserAction"
                                }
                            }
                        ],
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.onBeforeUserAction"
                        }
                    },
                    {
                        "id": 2017,
                        "name": "onScriptActionEnqueued",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "signatures": [
                            {
                                "id": 2018,
                                "name": "onScriptActionEnqueued",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Registers the given handler function to be called by the debugger whenever a script enqueues an action.\nThis occurrs for common actions like [`os.toast(message, duration)`](ref:os.toast) and [`os.showInput(currentValue, options)`](ref:os.showInput).",
                                    "text": "Every action that is enqueued ends up being performed.\n",
                                    "tags": [
                                        {
                                            "tag": "example",
                                            "paramName": "",
                                            "text": "Listen for actions to be enqueued in a debugger\nconst debug = await os.createDebugger({\n    pausable: true\n});\n\n// Register a listener that gets called whenever an action is scheduled to be performed.\ndebug.onScriptActionEnqueued(action => {\n    console.log('action enqueued', action);\n});\n\n// Because the debugger is pausable, the create() function returns a promise\n// because it calls @onCreate which could cause a pause trigger to be hit.\nconst debuggerBot = await debug.create({\n    test: '@let abc = 123; os.toast(abc);'\n});\n\n// Send a shout. Just like the create() function above, we recieve a promise that we can await.\nawait debug.shout('test');\n"
                                        }
                                    ]
                                },
                                "parameters": [
                                    {
                                        "id": 2019,
                                        "name": "listener",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {},
                                        "comment": {
                                            "shortText": "the function that should be called whenever an action is scheduled to be performed.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "reflection",
                                            "declaration": {
                                                "id": 2020,
                                                "name": "__type",
                                                "kind": 65536,
                                                "kindString": "Type literal",
                                                "flags": {},
                                                "signatures": [
                                                    {
                                                        "id": 2021,
                                                        "name": "__type",
                                                        "kind": 4096,
                                                        "kindString": "Call signature",
                                                        "flags": {},
                                                        "parameters": [
                                                            {
                                                                "id": 2022,
                                                                "name": "action",
                                                                "kind": 32768,
                                                                "kindString": "Parameter",
                                                                "flags": {},
                                                                "type": {
                                                                    "type": "reference",
                                                                    "name": "BotAction"
                                                                }
                                                            }
                                                        ],
                                                        "type": {
                                                            "type": "intrinsic",
                                                            "name": "void"
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "intrinsic",
                                    "name": "void"
                                },
                                "inheritedFrom": {
                                    "type": "reference",
                                    "name": "DebuggerBase.onScriptActionEnqueued"
                                }
                            }
                        ],
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.onScriptActionEnqueued"
                        }
                    },
                    {
                        "id": 2035,
                        "name": "performUserAction",
                        "kind": 2048,
                        "kindString": "Method",
                        "flags": {},
                        "signatures": [
                            {
                                "id": 2036,
                                "name": "performUserAction",
                                "kind": 4096,
                                "kindString": "Call signature",
                                "flags": {},
                                "comment": {
                                    "shortText": "Performs the given actions in order as if they were user actions.",
                                    "text": "This function works similarly to [`action.perform(action)`](ref:action.perform) except that actions performed with it will also call handlers registered with debug.onBeforeUserAction.",
                                    "tags": []
                                },
                                "parameters": [
                                    {
                                        "id": 2037,
                                        "name": "actions",
                                        "kind": 32768,
                                        "kindString": "Parameter",
                                        "flags": {
                                            "isRest": true
                                        },
                                        "comment": {
                                            "shortText": "the actions that should be performed.\n",
                                            "tags": []
                                        },
                                        "type": {
                                            "type": "array",
                                            "elementType": {
                                                "type": "reference",
                                                "name": "BotAction"
                                            }
                                        }
                                    }
                                ],
                                "type": {
                                    "type": "reference",
                                    "typeArguments": [
                                        {
                                            "type": "array",
                                            "elementType": {
                                                "type": "array",
                                                "elementType": {
                                                    "type": "intrinsic",
                                                    "name": "any"
                                                }
                                            }
                                        }
                                    ],
                                    "qualifiedName": "Promise",
                                    "package": "typescript",
                                    "name": "Promise"
                                },
                                "inheritedFrom": {
                                    "type": "reference",
                                    "name": "DebuggerBase.performUserAction"
                                }
                            }
                        ],
                        "inheritedFrom": {
                            "type": "reference",
                            "name": "DebuggerBase.performUserAction"
                        }
                    }
                ],
                "groups": [
                    {
                        "title": "Properties",
                        "kind": 1024,
                        "children": [
                            2042,
                            2040,
                            2038
                        ]
                    },
                    {
                        "title": "Methods",
                        "kind": 2048,
                        "children": [
                            1991,
                            1995,
                            1993,
                            1997,
                            1989,
                            2005,
                            2023,
                            2029,
                            1999,
                            2011,
                            2017,
                            2035
                        ]
                    }
                ],
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 1273,
                        "character": 17
                    }
                ],
                "extendedTypes": [
                    {
                        "type": "reference",
                        "name": "DebuggerBase"
                    }
                ],
                "references": "- [`changeState(bot, stateName, groupName)`](ref:changeState)\n- [`create(...mods)`](ref:create)\n- [`destroy(bot)`](ref:destroy)\n- [`priorityShout(eventNames, arg)`](ref:priorityShout)\n- [`shout(name, arg)`](ref:shout)\n- [`updateBotLinks(bot, idMap)`](ref:updateBotLinks)\n- [`whisper(bot, eventName, arg)`](ref:whisper)\n- [`applyDiffToSnapshot(snapshot, diff)`](ref:applyDiffToSnapshot)\n- [`applyMod(bot, ...mods)`](ref:applyMod)\n- [`assert(condition, message)`](ref:assert)\n- [`assertEqual(first, second)`](ref:assertEqual)\n- [`atPosition(dimension, x, y)`](ref:atPosition)\n- [`byCreator(bot)`](ref:byCreator)\n- [`byID(id)`](ref:byID)\n- [`byMod(mod)`](ref:byMod)\n- [`bySpace(space)`](ref:bySpace)\n- [`byTag(tag, filter)`](ref:byTag)\n- [`clearAnimations(bot, tag)`](ref:clearAnimations)\n- [`clearTagMasks(bot, space)`](ref:clearTagMasks)\n- [`deleteTagMaskText(bot, tag, index, count, space)`](ref:deleteTagMaskText)\n- [`deleteTagText(bot, tag, index, count)`](ref:deleteTagText)\n- [`diffSnapshots(first, second)`](ref:diffSnapshots)\n- [`either(...filters)`](ref:either)\n- [`getBotLinks(bot)`](ref:getBotLinks)\n- [`getBotPosition(bot, dimension)`](ref:getBotPosition)\n- [`getBotRotation(bot, dimension)`](ref:getBotRotation)\n- [`getBotTagValues(tag, filter)`](ref:getBotTagValues)\n- [`getFormattedJSON(data)`](ref:getFormattedJSON)\n- [`getID(bot)`](ref:getID)\n- [`getJSON(data)`](ref:getJSON)\n- [`getLink(...bots)`](ref:getLink)\n- [`getMod(bot, ...tags)`](ref:getMod)\n- [`getSnapshot(bots)`](ref:getSnapshot)\n- [`getTag(bot, ...tags)`](ref:getTag)\n- [`inDimension(dimension)`](ref:inDimension)\n- [`inStack(bot, dimension)`](ref:inStack)\n- [`insertTagMaskText(bot, tag, index, text, space)`](ref:insertTagMaskText)\n- [`insertTagText(bot, tag, index, text)`](ref:insertTagText)\n- [`neighboring(bot, dimension, direction)`](ref:neighboring)\n- [`not(filter)`](ref:not)\n- [`removeTags(bot, tagSection)`](ref:removeTags)\n- [`renameTag(bot, originalTag, newTag)`](ref:renameTag)\n- [`setTag(bot, tag, value)`](ref:setTag)\n- [`setTagMask(bot, tag, value, space)`](ref:setTagMask)\n- [`subtractMods(bot, ...mods)`](ref:subtractMods)\n- [`superShout(eventName, arg)`](ref:superShout)\n- [`uuid()`](ref:uuid)\n"
            },
            "comment": {
                "shortText": "Defines an interface that represents a debugger.",
                "text": "",
                "tags": [
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "types/debuggers/debugger"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Debugger"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Debugger"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Defines an interface that represents a debugger."
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "Debugger"
                    },
                    {
                        "tagName": "docreferenceactions",
                        "paramName": "",
                        "text": "^\\w+$\n"
                    }
                ]
            },
            "group": null
        }
    ],
    "references": {
        "CasualOSError": "types/error",
        "id-2935": "CasualOSError",
        "Quaternion": "types/math/rotations",
        "id-3340": "Quaternion",
        "Rotation": "types/math/rotations",
        "id-3372": "Rotation",
        "Vector2": "types/math/vectors",
        "id-3206": "Vector2",
        "Vector3": "types/math/vectors",
        "id-3263": "Vector3",
        "AIChatMessage": "types/ai",
        "id-2954": "AIChatMessage",
        "AIChatOptions": "types/ai",
        "id-2731": "AIChatOptions",
        "AIGenerateImageSuccess": "types/ai",
        "id-2250": "AIGenerateImageSuccess",
        "AIGenerateImageOptions": "types/ai",
        "id-2745": "AIGenerateImageOptions",
        "AIGenerateSkyboxOptions": "types/ai",
        "id-2741": "AIGenerateSkyboxOptions",
        "AIGenerateSkyboxRequest": "types/ai",
        "id-2243": "AIGenerateSkyboxRequest",
        "AIGenerateSkyboxResult": "types/ai",
        "id-2247": "AIGenerateSkyboxResult",
        "AIGeneratedImage": "types/ai",
        "id-2253": "AIGeneratedImage",
        "AddCountFailure": "types/records/events",
        "id-3139": "AddCountFailure",
        "AddCountSuccess": "types/records/events",
        "id-3134": "AddCountSuccess",
        "AnimateTagOptions": "types/animation",
        "id-1848": "AnimateTagOptions",
        "AttachDebuggerOptions": "types/debuggers/common",
        "id-2223": "AttachDebuggerOptions",
        "CasualOSDevice": "types/os",
        "id-2922": "CasualOSDevice",
        "CasualOSVersion": "types/os",
        "id-2914": "CasualOSVersion",
        "AxisAndAngle": "types/math/rotations",
        "id-3418": "AxisAndAngle",
        "BotTagMasks": "types/core",
        "id-2891": "BotTagMasks",
        "BotTags": "types/core",
        "id-2806": "BotTags",
        "BotState": "types/core",
        "id-2904": "BotState",
        "CompiledBotListeners": "types/core",
        "id-2885": "CompiledBotListeners",
        "ConvertGeolocationToWhat3WordsOptions": "types/os",
        "id-2372": "ConvertGeolocationToWhat3WordsOptions",
        "CreatePublicRecordKeyFailure": "types/records/key",
        "id-3076": "CreatePublicRecordKeyFailure",
        "CreatePublicRecordKeySuccess": "types/records/key",
        "id-3072": "CreatePublicRecordKeySuccess",
        "DebuggerCallFrame": "types/debuggers/common",
        "id-2176": "DebuggerCallFrame",
        "DebuggerFunctionLocation": "types/debuggers/common",
        "id-2211": "DebuggerFunctionLocation",
        "DebuggerPause": "types/debuggers/common",
        "id-2205": "DebuggerPause",
        "DebuggerTagMaskUpdate": "types/debuggers/common",
        "id-2184": "DebuggerTagMaskUpdate",
        "DebuggerTagUpdate": "types/debuggers/common",
        "id-2190": "DebuggerTagUpdate",
        "DebuggerVariable": "types/debuggers/common",
        "id-2217": "DebuggerVariable",
        "Easing": "types/animation",
        "id-2354": "Easing",
        "EnableCollaborationAction": "types/os",
        "id-2682": "EnableCollaborationAction",
        "EnableXROptions": "types/os",
        "id-2626": "EnableXROptions",
        "EraseDataFailure": "types/records/data",
        "id-3110": "EraseDataFailure",
        "EraseDataSuccess": "types/records/data",
        "id-3106": "EraseDataSuccess",
        "EraseFileFailure": "types/records/files",
        "id-3129": "EraseFileFailure",
        "EraseFileSuccess": "types/records/files",
        "id-3125": "EraseFileSuccess",
        "EulerAnglesRotation": "types/math/rotations",
        "id-3421": "EulerAnglesRotation",
        "FocusOnOptions": "types/os",
        "id-2406": "FocusOnOptions",
        "FocusOnRotation": "types/os",
        "id-2418": "FocusOnRotation",
        "FormAnimationData": "types/os",
        "id-2644": "FormAnimationData",
        "FromToRotation": "types/math/rotations",
        "id-3415": "FromToRotation",
        "GenericError": "types/error",
        "id-2932": "GenericError",
        "GetCountFailure": "types/records/events",
        "id-3150": "GetCountFailure",
        "GetCountSuccess": "types/records/events",
        "id-3144": "GetCountSuccess",
        "GetDataFailure": "types/records/data",
        "id-3101": "GetDataFailure",
        "GetDataSuccess": "types/records/data",
        "id-3092": "GetDataSuccess",
        "GetRoomOptionsFailure": "types/os",
        "id-1938": "GetRoomOptionsFailure",
        "GetRoomOptionsSuccess": "types/os",
        "id-1934": "GetRoomOptionsSuccess",
        "GetRoomRemoteOptionsFailure": "types/os",
        "id-1981": "GetRoomRemoteOptionsFailure",
        "GetRoomRemoteOptionsSuccess": "types/os",
        "id-1976": "GetRoomRemoteOptionsSuccess",
        "GetRoomTrackOptionsFailure": "types/os",
        "id-1957": "GetRoomTrackOptionsFailure",
        "GetRoomTrackOptionsSuccess": "types/os",
        "id-1952": "GetRoomTrackOptionsSuccess",
        "GrantMarkerPermissionFailure": "types/records/policies",
        "id-3178": "GrantMarkerPermissionFailure",
        "GrantMarkerPermissionSuccess": "types/records/policies",
        "id-3176": "GrantMarkerPermissionSuccess",
        "GrantRoleFailure": "types/records/roles",
        "id-3164": "GrantRoleFailure",
        "GrantRoleSuccess": "types/records/roles",
        "id-3162": "GrantRoleSuccess",
        "ImageClassifierOptions": "types/os",
        "id-2424": "ImageClassifierOptions",
        "InstUpdate": "types/os",
        "id-2928": "InstUpdate",
        "JoinRoomFailure": "types/os",
        "id-1919": "JoinRoomFailure",
        "JoinRoomSuccess": "types/os",
        "id-1916": "JoinRoomSuccess",
        "LeaveRoomFailure": "types/os",
        "id-1928": "LeaveRoomFailure",
        "LeaveRoomSuccess": "types/os",
        "id-1925": "LeaveRoomSuccess",
        "ListDataFailure": "types/records/data",
        "id-3120": "ListDataFailure",
        "ListDataSuccess": "types/records/data",
        "id-3115": "ListDataSuccess",
        "ListStudiosFailure": "types/records/studios",
        "id-3193": "ListStudiosFailure",
        "ListStudiosSuccess": "types/records/studios",
        "id-3190": "ListStudiosSuccess",
        "ListedStudio": "types/records/studios",
        "id-3197": "ListedStudio",
        "LookRotation": "types/math/rotations",
        "id-3438": "LookRotation",
        "MediaPermissionOptions": "types/os",
        "id-2623": "MediaPermissionOptions",
        "Debugger": "types/debuggers/debugger",
        "id-1988": "Debugger",
        "NormalDebuggerOptions": "types/debuggers/common",
        "id-2195": "NormalDebuggerOptions",
        "PhotoCameraOptions": "types/camera",
        "id-2666": "PhotoCameraOptions",
        "ParsedBotLink": "types/core",
        "id-2910": "ParsedBotLink",
        "PartialBotState": "types/core",
        "id-2907": "PartialBotState",
        "PausableDebugger": "types/debuggers/pausable-debugger",
        "id-2044": "PausableDebugger",
        "PausableDebuggerOptions": "types/debuggers/common",
        "id-2200": "PausableDebuggerOptions",
        "PauseTrigger": "types/debuggers/common",
        "id-2163": "PauseTrigger",
        "PauseTriggerOptions": "types/debuggers/common",
        "id-2171": "PauseTriggerOptions",
        "Photo": "types/camera",
        "id-2678": "Photo",
        "PossiblePauseTriggerLocation": "types/debuggers/common",
        "id-2158": "PossiblePauseTriggerLocation",
        "PseudoRandomNumberGenerator": "types/core",
        "id-2232": "PseudoRandomNumberGenerator",
        "QuaternionRotation": "types/math/rotations",
        "id-3431": "QuaternionRotation",
        "RaycastRay": "types/os",
        "id-1912": "RaycastRay",
        "RaycastResult": "types/os",
        "id-1909": "RaycastResult",
        "RecordActionOptions": "types/records/extra",
        "id-2694": "RecordActionOptions",
        "RecordDataFailure": "types/records/data",
        "id-3086": "RecordDataFailure",
        "RecordDataSuccess": "types/records/data",
        "id-3082": "RecordDataSuccess",
        "RecordFileFailure": "types/records/files",
        "id-1879": "RecordFileFailure",
        "RecordFileSuccess": "types/records/files",
        "id-1875": "RecordFileSuccess",
        "RecordedFile": "types/experimental",
        "id-2653": "RecordedFile",
        "Recording": "types/experimental",
        "id-2651": "Recording",
        "RecordingOptions": "types/experimental",
        "id-2658": "RecordingOptions",
        "RegisterPrefixOptions": "types/core",
        "id-2648": "RegisterPrefixOptions",
        "RevokeMarkerPermissionFailure": "types/records/policies",
        "id-3185": "RevokeMarkerPermissionFailure",
        "RevokeMarkerPermissionSuccess": "types/records/policies",
        "id-3183": "RevokeMarkerPermissionSuccess",
        "RevokeRoleFailure": "types/records/roles",
        "id-3171": "RevokeRoleFailure",
        "RevokeRoleSuccess": "types/records/roles",
        "id-3169": "RevokeRoleSuccess",
        "RoomJoinOptions": "types/os",
        "id-2697": "RoomJoinOptions",
        "RoomOptions": "types/os",
        "id-2706": "RoomOptions",
        "RoomRemoteOptions": "types/os",
        "id-2722": "RoomRemoteOptions",
        "RoomTrackOptions": "types/os",
        "id-2710": "RoomTrackOptions",
        "RuntimeBot": "types/core",
        "id-2758": "RuntimeBot",
        "RuntimeBotLinks": "types/core",
        "id-2897": "RuntimeBotLinks",
        "RuntimeBotVars": "types/core",
        "id-2894": "RuntimeBotVars",
        "SequenceRotation": "types/math/rotations",
        "id-3429": "SequenceRotation",
        "SetRoomOptionsSuccess": "types/os",
        "id-1943": "SetRoomOptionsSuccess",
        "SetRoomTrackOptions": "types/os",
        "id-2728": "SetRoomTrackOptions",
        "SetRoomTrackOptionsFailure": "types/os",
        "id-1969": "SetRoomTrackOptionsFailure",
        "SetRoomTrackOptionsSuccess": "types/os",
        "id-1964": "SetRoomTrackOptionsSuccess",
        "ShareOptions": "types/os",
        "id-2402": "ShareOptions",
        "ShowChatOptions": "types/os",
        "id-2396": "ShowChatOptions",
        "ShowConfirmAction": "types/os",
        "id-2445": "ShowConfirmAction",
        "ShowConfirmOptions": "types/os",
        "id-2440": "ShowConfirmOptions",
        "ShowInputOptions": "types/os",
        "id-2429": "ShowInputOptions",
        "SnapAxis": "types/os",
        "id-2376": "SnapAxis",
        "SnapGridTarget": "types/os",
        "id-1884": "SnapGridTarget",
        "SnapPoint": "types/os",
        "id-2388": "SnapPoint",
        "SpeakTextOptions": "types/experimental",
        "id-2228": "SpeakTextOptions",
        "StartFormAnimationOptions": "types/os",
        "id-2628": "StartFormAnimationOptions",
        "StopFormAnimationOptions": "types/os",
        "id-2641": "StopFormAnimationOptions",
        "SuccessfulGeolocation": "types/os",
        "id-2358": "SuccessfulGeolocation",
        "SyntheticVoice": "types/experimental",
        "id-2662": "SyntheticVoice",
        "TweenOptions": "types/experimental",
        "id-2225": "TweenOptions",
        "UnsuccessfulGeolocation": "types/os",
        "id-2368": "UnsuccessfulGeolocation",
        "UpdateEventRecordFailure": "types/records/events",
        "id-3157": "UpdateEventRecordFailure",
        "UpdateEventRecordSuccess": "types/records/events",
        "id-3155": "UpdateEventRecordSuccess",
        "UploadedFile": "types/os",
        "id-1905": "UploadedFile",
        "WebhookOptions": "types/web",
        "id-1829": "WebhookOptions",
        "WebhookResult": "types/web",
        "id-1841": "WebhookResult",
        "AddCountResult": "types/records/events",
        "id-3133": "AddCountResult",
        "AvailablePermissions": "types/permissions",
        "id-2960": "AvailablePermissions",
        "BarcodeFormat": "types/os",
        "id-2423": "BarcodeFormat",
        "BotFilter": "types/core",
        "id-1863": "BotFilter",
        "BotSpace": "types/core",
        "id-2881": "BotSpace",
        "CameraType": "types/os",
        "id-2422": "CameraType",
        "CreatePublicRecordKeyResult": "types/records/key",
        "id-3071": "CreatePublicRecordKeyResult",
        "EaseMode": "types/animation",
        "id-2353": "EaseMode",
        "EaseType": "types/animation",
        "id-2352": "EaseType",
        "EraseDataResult": "types/records/data",
        "id-3105": "EraseDataResult",
        "EraseFileResult": "types/records/files",
        "id-3124": "EraseFileResult",
        "Geolocation": "types/os",
        "id-2357": "Geolocation",
        "GetCountResult": "types/records/events",
        "id-3143": "GetCountResult",
        "GetDataResult": "types/records/data",
        "id-3091": "GetDataResult",
        "GetRoomOptionsResult": "types/os",
        "id-1933": "GetRoomOptionsResult",
        "GetRoomRemoteOptionsResult": "types/os",
        "id-1975": "GetRoomRemoteOptionsResult",
        "GetRoomTrackOptionsResult": "types/os",
        "id-1951": "GetRoomTrackOptionsResult",
        "GrantMarkerPermissionResult": "types/records/policies",
        "id-3175": "GrantMarkerPermissionResult",
        "GrantRoleResult": "types/records/roles",
        "id-3161": "GrantRoleResult",
        "JoinRoomResult": "types/os",
        "id-1915": "JoinRoomResult",
        "LeaveRoomResult": "types/os",
        "id-1924": "LeaveRoomResult",
        "ListDataResult": "types/records/data",
        "id-3114": "ListDataResult",
        "ListStudiosResult": "types/records/studios",
        "id-3189": "ListStudiosResult",
        "Mod": "types/core",
        "id-1858": "Mod",
        "PortalType": "types/core",
        "id-2913": "PortalType",
        "PossiblePauseTriggerStates": "types/debuggers/common",
        "id-2162": "PossiblePauseTriggerStates",
        "RecordDataResult": "types/records/data",
        "id-3081": "RecordDataResult",
        "RecordFileResult": "types/records/files",
        "id-1874": "RecordFileResult",
        "RevokeMarkerPermissionResult": "types/records/policies",
        "id-3182": "RevokeMarkerPermissionResult",
        "RevokeRoleResult": "types/records/roles",
        "id-3168": "RevokeRoleResult",
        "SetRoomOptionsResult": "types/os",
        "id-1942": "SetRoomOptionsResult",
        "SetRoomTrackOptionsResult": "types/os",
        "id-1963": "SetRoomTrackOptionsResult",
        "ShowInputSuptype": "types/os",
        "id-2439": "ShowInputSuptype",
        "ShowInputType": "types/os",
        "id-2438": "ShowInputType",
        "SnapTarget": "types/os",
        "id-2395": "SnapTarget",
        "TagFilter": "types/core",
        "id-1859": "TagFilter",
        "UpdateEventRecordResult": "types/records/events",
        "id-3154": "UpdateEventRecordResult",
        "animateTag-byOptions": "actions/utility",
        "id-364": "animateTag-byOptions",
        "getbot-tag": "actions/data",
        "id-33": "getbot-tag",
        "getbots-tag": "actions/data",
        "id-17": "getbots-tag",
        "animateTag-byTag": "actions/utility",
        "id-358": "animateTag-byTag",
        "changeState": "actions/data",
        "id-177": "changeState",
        "create": "actions/data",
        "id-162": "create",
        "destroy": "actions/data",
        "id-166": "destroy",
        "getbot-filters": "actions/data",
        "id-26": "getbot-filters",
        "getbots-filters": "actions/data",
        "id-10": "getbots-filters",
        "priorityShout": "actions/event",
        "id-225": "priorityShout",
        "shout": "actions/event",
        "id-237": "shout",
        "updateBotLinks": "actions/data",
        "id-198": "updateBotLinks",
        "whisper": "actions/event",
        "id-263": "whisper",
        "action.perform": "actions/event",
        "id-1364": "action.perform",
        "action.reject": "actions/event",
        "id-1368": "action.reject",
        "ai.chat-string": "actions/ai",
        "id-423": "ai.chat-string",
        "ai.chat-message": "actions/ai",
        "id-426": "ai.chat-message",
        "ai.chat-messages": "actions/ai",
        "id-429": "ai.chat-messages",
        "ai.generateImage-string": "actions/ai",
        "id-442": "ai.generateImage-string",
        "ai.generateImage-request": "actions/ai",
        "id-446": "ai.generateImage-request",
        "ai.generateSkybox-string": "actions/ai",
        "id-434": "ai.generateSkybox-string",
        "ai.generateSkybox-request": "actions/ai",
        "id-438": "ai.generateSkybox-request",
        "applyDiffToSnapshot": "actions/data",
        "id-83": "applyDiffToSnapshot",
        "applyMod": "actions/mods",
        "id-152": "applyMod",
        "assert": "actions/debuggers",
        "id-407": "assert",
        "assertEqual": "actions/debuggers",
        "id-412": "assertEqual",
        "atPosition": "actions/bot-filters",
        "id-293": "atPosition",
        "byCreator": "actions/bot-filters",
        "id-314": "byCreator",
        "byID": "actions/bot-filters",
        "id-281": "byID",
        "byMod": "actions/bot-filters",
        "id-285": "byMod",
        "bySpace": "actions/bot-filters",
        "id-310": "bySpace",
        "byTag": "actions/bot-filters",
        "id-276": "byTag",
        "bytes.fromBase64String": "actions/bytes",
        "id-1577": "bytes.fromBase64String",
        "bytes.fromBase64Url": "actions/bytes",
        "id-1594": "bytes.fromBase64Url",
        "bytes.fromHexString": "actions/bytes",
        "id-1585": "bytes.fromHexString",
        "bytes.toBase64String": "actions/bytes",
        "id-1573": "bytes.toBase64String",
        "bytes.toBase64Url": "actions/bytes",
        "id-1589": "bytes.toBase64Url",
        "bytes.toHexString": "actions/bytes",
        "id-1581": "bytes.toHexString",
        "clearAnimations": "actions/utility",
        "id-378": "clearAnimations",
        "clearTagMasks": "actions/data",
        "id-106": "clearTagMasks",
        "crypto.hash-raw": "actions/crypto",
        "id-1600": "crypto.hash-raw",
        "crypto.hash-string": "actions/crypto",
        "id-1606": "crypto.hash-string",
        "crypto.hmac-raw": "actions/crypto",
        "id-1637": "crypto.hmac-raw",
        "crypto.hmac-string": "actions/crypto",
        "id-1630": "crypto.hmac-string",
        "crypto.asymmetric.decrypt": "actions/crypto",
        "id-1695": "crypto.asymmetric.decrypt",
        "crypto.asymmetric.encrypt": "actions/crypto",
        "id-1690": "crypto.asymmetric.encrypt",
        "crypto.asymmetric.isEncrypted": "actions/crypto",
        "id-1701": "crypto.asymmetric.isEncrypted",
        "crypto.asymmetric.isKeypair": "actions/crypto",
        "id-1686": "crypto.asymmetric.isKeypair",
        "crypto.asymmetric.keypair": "actions/crypto",
        "id-1682": "crypto.asymmetric.keypair",
        "crypto.encrypt": "actions/crypto",
        "id-1666": "crypto.encrypt",
        "crypto.hmacSha256": "actions/crypto",
        "id-1656": "crypto.hmacSha256",
        "crypto.hmacSha512": "actions/crypto",
        "id-1661": "crypto.hmacSha512",
        "crypto.isEncrypted": "actions/crypto",
        "id-1676": "crypto.isEncrypted",
        "crypto.keypair": "actions/crypto",
        "id-1705": "crypto.keypair",
        "crypto.sha256": "actions/crypto",
        "id-1622": "crypto.sha256",
        "crypto.sha512": "actions/crypto",
        "id-1626": "crypto.sha512",
        "crypto.sign": "actions/crypto",
        "id-1709": "crypto.sign",
        "deleteTagMaskText": "actions/data",
        "id-133": "deleteTagMaskText",
        "deleteTagText": "actions/data",
        "id-126": "deleteTagText",
        "diffSnapshots": "actions/data",
        "id-78": "diffSnapshots",
        "either": "actions/bot-filters",
        "id-318": "either",
        "os.beginAudioRecording": "actions/audio",
        "id-1411": "os.beginAudioRecording",
        "experiment.beginRecording": "actions/experimental",
        "id-1418": "experiment.beginRecording",
        "os.endAudioRecording": "actions/audio",
        "id-1415": "os.endAudioRecording",
        "experiment.endRecording": "actions/experimental",
        "id-1422": "experiment.endRecording",
        "experiment.getAnchorPointPosition": "actions/experimental",
        "id-1401": "experiment.getAnchorPointPosition",
        "experiment.getVoices": "actions/experimental",
        "id-1430": "experiment.getVoices",
        "experiment.localFormAnimation": "actions/experimental",
        "id-1374": "experiment.localFormAnimation",
        "experiment.localPositionTween": "actions/experimental",
        "id-1379": "experiment.localPositionTween",
        "experiment.localRotationTween": "actions/experimental",
        "id-1390": "experiment.localRotationTween",
        "experiment.speakText": "actions/experimental",
        "id-1425": "experiment.speakText",
        "getBotLinks": "actions/data",
        "id-194": "getBotLinks",
        "getBotPosition": "actions/data",
        "id-52": "getBotPosition",
        "getBotRotation": "actions/data",
        "id-57": "getBotRotation",
        "getBotTagValues": "actions/data",
        "id-42": "getBotTagValues",
        "getFormattedJSON": "actions/data",
        "id-70": "getFormattedJSON",
        "getID": "actions/data",
        "id-62": "getID",
        "getJSON": "actions/data",
        "id-66": "getJSON",
        "getLink": "actions/data",
        "id-190": "getLink",
        "getMod": "actions/mods",
        "id-47": "getMod",
        "getSnapshot": "actions/data",
        "id-74": "getSnapshot",
        "getTag": "actions/data",
        "id-88": "getTag",
        "inDimension": "actions/bot-filters",
        "id-289": "inDimension",
        "inStack": "actions/bot-filters",
        "id-299": "inStack",
        "insertTagMaskText": "actions/data",
        "id-118": "insertTagMaskText",
        "insertTagText": "actions/data",
        "id-111": "insertTagText",
        "math.abs": "actions/math",
        "id-1447": "math.abs",
        "math.addVectors": "actions/math",
        "id-1517": "math.addVectors",
        "math.areClose": "actions/math",
        "id-1548": "math.areClose",
        "math.avg": "actions/math",
        "id-1439": "math.avg",
        "math.degreesToRadians": "actions/math",
        "id-1473": "math.degreesToRadians",
        "math.getAnchorPointOffset": "actions/math",
        "id-1513": "math.getAnchorPointOffset",
        "math.getForwardDirection": "actions/math",
        "id-1481": "math.getForwardDirection",
        "math.getSeededRandomNumberGenerator": "actions/math",
        "id-1455": "math.getSeededRandomNumberGenerator",
        "math.intersectPlane": "actions/math",
        "id-1490": "math.intersectPlane",
        "math.negateVector": "actions/math",
        "id-1527": "math.negateVector",
        "math.normalizeVector": "actions/math",
        "id-1532": "math.normalizeVector",
        "math.radiansToDegrees": "actions/math",
        "id-1477": "math.radiansToDegrees",
        "math.random": "actions/math",
        "id-1468": "math.random",
        "math.randomInt": "actions/math",
        "id-1463": "math.randomInt",
        "math.scaleVector": "actions/math",
        "id-1542": "math.scaleVector",
        "math.setRandomSeed": "actions/math",
        "id-1459": "math.setRandomSeed",
        "math.sqrt": "actions/math",
        "id-1443": "math.sqrt",
        "math.stdDev": "actions/math",
        "id-1451": "math.stdDev",
        "math.subtractVectors": "actions/math",
        "id-1522": "math.subtractVectors",
        "math.sum": "actions/math",
        "id-1435": "math.sum",
        "math.vectorLength": "actions/math",
        "id-1537": "math.vectorLength",
        "neighboring": "actions/bot-filters",
        "id-304": "neighboring",
        "not": "actions/bot-filters",
        "id-325": "not",
        "os.attachDebugger": "actions/debuggers",
        "id-1320": "os.attachDebugger",
        "os.createDebugger-normal": "actions/debuggers",
        "id-1309": "os.createDebugger-normal",
        "os.createDebugger-pausable": "actions/debuggers",
        "id-1313": "os.createDebugger-pausable",
        "os.focusOn-bot": "actions/portals",
        "id-510": "os.focusOn-bot",
        "os.focusOn-position": "actions/portals",
        "id-515": "os.focusOn-position",
        "os.getExecutingDebugger": "actions/debuggers",
        "id-1317": "os.getExecutingDebugger",
        "showChat-options": "actions/os",
        "id-537": "showChat-options",
        "showChat-placeholder": "actions/os",
        "id-533": "showChat-placeholder",
        "os.showInput": "actions/portals",
        "id-756": "os.showInput",
        "os.addBotDropGrid": "actions/portals",
        "id-826": "os.addBotDropGrid",
        "os.addBotDropSnap": "actions/portals",
        "id-817": "os.addBotDropSnap",
        "os.addDropGrid": "actions/portals",
        "id-822": "os.addDropGrid",
        "os.addDropSnap": "actions/portals",
        "id-813": "os.addDropSnap",
        "os.applyUpdatesToInst": "actions/os",
        "id-1272": "os.applyUpdatesToInst",
        "os.arSupported": "actions/xr",
        "id-581": "os.arSupported",
        "os.bufferFormAddressGLTF": "actions/animations",
        "id-1230": "os.bufferFormAddressGLTF",
        "os.bufferSound": "actions/audio",
        "id-789": "os.bufferSound",
        "os.calculateRayFromCamera": "actions/portals",
        "id-1225": "os.calculateRayFromCamera",
        "os.cancelSound": "actions/audio",
        "id-793": "os.cancelSound",
        "os.capturePhoto": "actions/camera",
        "id-676": "os.capturePhoto",
        "os.closeBarcodeScanner": "actions/barcodes",
        "id-654": "os.closeBarcodeScanner",
        "os.closeCircleWipe": "actions/portals",
        "id-805": "os.closeCircleWipe",
        "os.closeImageClassifier": "actions/image-classification",
        "id-669": "os.closeImageClassifier",
        "os.closePhotoCamera": "actions/camera",
        "id-680": "os.closePhotoCamera",
        "os.closeQRCodeScanner": "actions/barcodes",
        "id-640": "os.closeQRCodeScanner",
        "os.compileApp": "actions/app",
        "id-940": "os.compileApp",
        "os.convertGeolocationToWhat3Words": "actions/os",
        "id-1210": "os.convertGeolocationToWhat3Words",
        "os.countEvents": "actions/records",
        "id-1200": "os.countEvents",
        "os.createInitializationUpdate": "actions/os",
        "id-1268": "os.createInitializationUpdate",
        "os.device": "actions/os",
        "id-555": "os.device",
        "os.disableAR": "actions/xr",
        "id-571": "os.disableAR",
        "os.disablePointOfView": "actions/portals",
        "id-596": "os.disablePointOfView",
        "os.disableVR": "actions/xr",
        "id-578": "os.disableVR",
        "os.disableWakeLock": "actions/os",
        "id-602": "os.disableWakeLock",
        "os.download": "actions/files",
        "id-608": "os.download",
        "os.downloadBots": "actions/files",
        "id-614": "os.downloadBots",
        "os.downloadBotsAsInitialzationUpdate": "actions/files",
        "id-619": "os.downloadBotsAsInitialzationUpdate",
        "os.downloadInst": "actions/files",
        "id-627": "os.downloadInst",
        "os.enableAR": "actions/xr",
        "id-567": "os.enableAR",
        "os.enableCollaboration": "actions/os",
        "id-561": "os.enableCollaboration",
        "os.enableCustomDragging": "actions/portals",
        "id-831": "os.enableCustomDragging",
        "os.enablePointOfView": "actions/portals",
        "id-587": "os.enablePointOfView",
        "os.enableVR": "actions/xr",
        "id-574": "os.enableVR",
        "os.eraseData": "actions/records",
        "id-1143": "os.eraseData",
        "os.eraseManualApprovalData": "actions/records",
        "id-1149": "os.eraseManualApprovalData",
        "os.exitFullscreenMode": "actions/portals",
        "id-481": "os.exitFullscreenMode",
        "os.getAverageFrameRate": "actions/os",
        "id-888": "os.getAverageFrameRate",
        "os.getCameraPosition": "actions/portals",
        "id-844": "os.getCameraPosition",
        "os.getCameraRotation": "actions/portals",
        "id-848": "os.getCameraRotation",
        "os.getCurrentDimension": "actions/portals",
        "id-727": "os.getCurrentDimension",
        "os.getCurrentInst": "actions/portals",
        "id-733": "os.getCurrentInst",
        "os.getCurrentInstUpdate": "actions/os",
        "id-1276": "os.getCurrentInstUpdate",
        "os.getData": "actions/records",
        "id-1125": "os.getData",
        "os.getDimensionalDepth": "actions/portals",
        "id-746": "os.getDimensionalDepth",
        "os.getFocusPoint": "actions/portals",
        "id-856": "os.getFocusPoint",
        "os.getGeolocation": "actions/os",
        "id-838": "os.getGeolocation",
        "os.getInputList": "actions/portals",
        "id-881": "os.getInputList",
        "os.getInputState": "actions/portals",
        "id-876": "os.getInputState",
        "os.getInstStateFromUpdates": "actions/os",
        "id-1264": "os.getInstStateFromUpdates",
        "os.getManualApprovalData": "actions/records",
        "id-1131": "os.getManualApprovalData",
        "os.getMediaPermission": "actions/os",
        "id-884": "os.getMediaPermission",
        "os.getMenuDimension": "actions/portals",
        "id-736": "os.getMenuDimension",
        "os.getMiniPortalDimension": "actions/portals",
        "id-739": "os.getMiniPortalDimension",
        "os.getPointerDirection": "actions/portals",
        "id-872": "os.getPointerDirection",
        "os.getPointerPosition": "actions/portals",
        "id-860": "os.getPointerPosition",
        "os.getPointerRotation": "actions/portals",
        "id-864": "os.getPointerRotation",
        "os.getPortalDimension": "actions/portals",
        "id-742": "os.getPortalDimension",
        "os.getPublicRecordKey": "actions/records",
        "id-1050": "os.getPublicRecordKey",
        "os.getRoomOptions": "actions/rooms",
        "id-906": "os.getRoomOptions",
        "os.getRoomRemoteOptions": "actions/rooms",
        "id-921": "os.getRoomRemoteOptions",
        "os.getRoomTrackOptions": "actions/rooms",
        "id-910": "os.getRoomTrackOptions",
        "os.getSubjectlessPublicRecordKey": "actions/records",
        "id-1054": "os.getSubjectlessPublicRecordKey",
        "os.getWakeLockConfiguration": "actions/os",
        "id-605": "os.getWakeLockConfiguration",
        "os.goToDimension": "actions/portals",
        "id-770": "os.goToDimension",
        "os.goToURL": "actions/portals",
        "id-774": "os.goToURL",
        "os.grantInstAdminPermission": "actions/records",
        "id-1072": "os.grantInstAdminPermission",
        "os.grantInstRole": "actions/records",
        "id-1092": "os.grantInstRole",
        "os.grantRecordMarkerPermission": "actions/records",
        "id-1058": "os.grantRecordMarkerPermission",
        "os.grantUserRole": "actions/records",
        "id-1077": "os.grantUserRole",
        "os.hasBotInMiniPortal": "actions/portals",
        "id-797": "os.hasBotInMiniPortal",
        "os.hideBarcode": "actions/barcodes",
        "id-662": "os.hideBarcode",
        "os.hideChat": "actions/os",
        "id-545": "os.hideChat",
        "os.hideHtml": "actions/os",
        "id-488": "os.hideHtml",
        "os.hideQRCode": "actions/barcodes",
        "id-647": "os.hideQRCode",
        "os.hideTips": "actions/portals",
        "id-469": "os.hideTips",
        "os.importAUX": "actions/files",
        "id-711": "os.importAUX",
        "os.inSheet": "actions/portals",
        "id-841": "os.inSheet",
        "os.isCollaborative": "actions/os",
        "id-558": "os.isCollaborative",
        "os.isInDimension": "actions/portals",
        "id-723": "os.isInDimension",
        "os.isRecordKey": "actions/records",
        "id-1107": "os.isRecordKey",
        "os.joinRoom": "actions/rooms",
        "id-891": "os.joinRoom",
        "os.leaveRoom": "actions/rooms",
        "id-896": "os.leaveRoom",
        "os.listBuiltinTags": "actions/app",
        "id-1041": "os.listBuiltinTags",
        "os.listData": "actions/records",
        "id-1137": "os.listData",
        "os.listFormAnimations": "actions/animations",
        "id-1245": "os.listFormAnimations",
        "os.listInstUpdates": "actions/os",
        "id-1261": "os.listInstUpdates",
        "os.listUserStudios": "actions/records",
        "id-1206": "os.listUserStudios",
        "os.loadInst": "actions/os",
        "id-703": "os.loadInst",
        "os.log": "actions/os",
        "id-834": "os.log",
        "os.meetCommand": "actions/os",
        "id-1297": "os.meetCommand",
        "os.meetFunction": "actions/os",
        "id-1302": "os.meetFunction",
        "os.openBarcodeScanner": "actions/barcodes",
        "id-650": "os.openBarcodeScanner",
        "os.openCircleWipe": "actions/portals",
        "id-809": "os.openCircleWipe",
        "os.openDevConsole": "actions/os",
        "id-782": "os.openDevConsole",
        "os.openImageClassifier": "actions/image-classification",
        "id-665": "os.openImageClassifier",
        "os.openPhotoCamera": "actions/camera",
        "id-672": "os.openPhotoCamera",
        "os.openQRCodeScanner": "actions/barcodes",
        "id-636": "os.openQRCodeScanner",
        "os.openURL": "actions/portals",
        "id-778": "os.openURL",
        "os.parseBotsFromData": "actions/files",
        "id-715": "os.parseBotsFromData",
        "os.playSound": "actions/audio",
        "id-785": "os.playSound",
        "os.raycast": "actions/portals",
        "id-1219": "os.raycast",
        "os.raycastFromCamera": "actions/portals",
        "id-1214": "os.raycastFromCamera",
        "os.recordData": "actions/records",
        "id-1111": "os.recordData",
        "os.recordEvent": "actions/records",
        "id-1194": "os.recordEvent",
        "os.recordFile": "actions/records",
        "id-1155": "os.recordFile",
        "os.recordManualApprovalData": "actions/records",
        "id-1118": "os.recordManualApprovalData",
        "os.registerApp": "actions/app",
        "id-931": "os.registerApp",
        "os.registerTagPrefix": "actions/app",
        "id-926": "os.registerTagPrefix",
        "os.remoteCount": "actions/os",
        "id-1283": "os.remoteCount",
        "os.remotes": "actions/os",
        "id-1258": "os.remotes",
        "os.replaceDragBot": "actions/portals",
        "id-719": "os.replaceDragBot",
        "os.requestAuthBot": "actions/records",
        "id-1044": "os.requestAuthBot",
        "os.requestAuthBotInBackground": "actions/records",
        "id-1047": "os.requestAuthBotInBackground",
        "os.requestFullscreenMode": "actions/portals",
        "id-478": "os.requestFullscreenMode",
        "os.requestWakeLock": "actions/os",
        "id-599": "os.requestWakeLock",
        "os.revokeInstRole": "actions/records",
        "id-1100": "os.revokeInstRole",
        "os.revokeRecordMarkerPermission": "actions/records",
        "id-1065": "os.revokeRecordMarkerPermission",
        "os.revokeUserRole": "actions/records",
        "id-1085": "os.revokeUserRole",
        "os.run": "actions/os",
        "id-548": "os.run",
        "os.setClipboard": "actions/os",
        "id-491": "os.setClipboard",
        "os.setRoomOptions": "actions/rooms",
        "id-901": "os.setRoomOptions",
        "os.setRoomTrackOptions": "actions/rooms",
        "id-915": "os.setRoomTrackOptions",
        "os.share": "actions/os",
        "id-801": "os.share",
        "os.showBarcode": "actions/barcodes",
        "id-657": "os.showBarcode",
        "os.showConfirm": "actions/portals",
        "id-766": "os.showConfirm",
        "os.showHtml": "actions/os",
        "id-484": "os.showHtml",
        "os.showInputForTag": "actions/portals",
        "id-750": "os.showInputForTag",
        "os.showJoinCode": "actions/barcodes",
        "id-473": "os.showJoinCode",
        "os.showQRCode": "actions/barcodes",
        "id-643": "os.showQRCode",
        "os.showUploadAuxFile": "actions/files",
        "id-630": "os.showUploadAuxFile",
        "os.showUploadFiles": "actions/files",
        "id-633": "os.showUploadFiles",
        "os.sleep": "actions/os",
        "id-453": "os.sleep",
        "os.startFormAnimation": "actions/animations",
        "id-1234": "os.startFormAnimation",
        "os.stopFormAnimation": "actions/animations",
        "id-1240": "os.stopFormAnimation",
        "os.tip": "actions/portals",
        "id-462": "os.tip",
        "os.toast": "actions/os",
        "id-457": "os.toast",
        "os.totalRemoteCount": "actions/os",
        "id-1287": "os.totalRemoteCount",
        "os.unloadInst": "actions/os",
        "id-707": "os.unloadInst",
        "os.unregisterApp": "actions/app",
        "id-936": "os.unregisterApp",
        "os.version": "actions/os",
        "id-552": "os.version",
        "os.vrSupported": "actions/xr",
        "id-584": "os.vrSupported",
        "os.agreedUponTime": "actions/time",
        "id-684": "os.agreedUponTime",
        "os.deadReckoningTime": "actions/time",
        "id-692": "os.deadReckoningTime",
        "os.instLatency": "actions/time",
        "id-686": "os.instLatency",
        "os.instTimeOffset": "actions/time",
        "id-688": "os.instTimeOffset",
        "os.instTimeOffsetSpread": "actions/time",
        "id-690": "os.instTimeOffsetSpread",
        "os.localTime": "actions/time",
        "id-682": "os.localTime",
        "removeTags": "actions/data",
        "id-141": "removeTags",
        "renameTag": "actions/data",
        "id-146": "renameTag",
        "setTag": "actions/data",
        "id-93": "setTag",
        "setTagMask": "actions/data",
        "id-99": "setTagMask",
        "subtractMods": "actions/mods",
        "id-157": "subtractMods",
        "superShout": "actions/event",
        "id-220": "superShout",
        "uuid": "actions/data",
        "id-355": "uuid",
        "web.get": "actions/web",
        "id-1728": "web.get",
        "web.hook": "actions/web",
        "id-1739": "web.hook",
        "web.post": "actions/web",
        "id-1733": "web.post",
        "configBot": "actions/os",
        "id-418": "configBot"
    }
}