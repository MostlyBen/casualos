{
    "hash": "actions/os",
    "pageTitle": "OS Actions",
    "pageDescription": "OS actions are used to interact with the player's current session.",
    "pageSidebarLabel": "OS",
    "contents": [
        {
            "id": 645,
            "order": 9999,
            "name": "configBot",
            "reflection": {
                "id": 645,
                "name": "_configBot",
                "variant": "signature",
                "kind": 524288,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the config bot (formerly known as the player bot).\r\nThis is the bot that represents the player's browser tab.\r\n\r\nIt is "
                        },
                        {
                            "kind": "code",
                            "text": "`tempLocal`"
                        },
                        {
                            "kind": "text",
                            "text": " and is used to configure various portals."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the config bot and set a username on it.\r\nconfigBot.tags.username = \"bob\";\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nOpen the sheetPortal to \"testDimension\".\r\nconfigBot.tags.sheetPortal = \"testDimension\";\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@doctitle",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "OS Actions"
                                }
                            ]
                        },
                        {
                            "tag": "@docsidebar",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "OS"
                                }
                            ]
                        },
                        {
                            "tag": "@docdescription",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "OS actions are used to interact with the player's current session."
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "configBot"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "01-os"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 3001,
                        "character": 16,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L3001"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 2705,
                    "name": "Bot",
                    "package": "@casual-simulation/aux-common",
                    "id": 2705,
                    "qualifiedName": "RuntimeBot"
                }
            },
            "comment": {
                "text": "Gets the config bot (formerly known as the player bot).\r\nThis is the bot that represents the player's browser tab.\r\n\r\nIt is `tempLocal` and is used to configure various portals.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the config bot and set a username on it.\r\nconfigBot.tags.username = \"bob\";\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nOpen the sheetPortal to \"testDimension\".\r\nconfigBot.tags.sheetPortal = \"testDimension\";\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "doctitle",
                        "text": "OS Actions"
                    },
                    {
                        "tagName": "docsidebar",
                        "text": "OS"
                    },
                    {
                        "tagName": "docdescription",
                        "text": "OS actions are used to interact with the player's current session."
                    },
                    {
                        "tagName": "docname",
                        "text": "configBot"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "01-os"
                    }
                ]
            },
            "group": "01-os"
        },
        {
            "id": 772,
            "order": 9999,
            "name": "os.hideChat",
            "reflection": {
                "id": 772,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Hides the \"chat bar\" at the top of the screen in CasualOS."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nHide the chat bar.\r\nos.hideChat();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.hideChat"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-chat"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5553,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5553"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "../src/aux-common/bots/BotEvents.ts",
                        "qualifiedName": "ShowChatBarAction"
                    },
                    "name": "ShowChatBarAction",
                    "package": "@casual-simulation/aux-common"
                }
            },
            "comment": {
                "text": "Hides the \"chat bar\" at the top of the screen in CasualOS.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nHide the chat bar.\r\nos.hideChat();\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.hideChat"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-chat"
                    }
                ]
            },
            "group": "10-chat"
        },
        {
            "id": 764,
            "order": 9999,
            "name": "showChat-options",
            "reflection": {
                "id": 764,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Shows the \"chat bar\" at the top of the screen in CasualOS, optionally using the given text as the placeholder.\r\nTyping in the chat bar will send "
                        },
                        {
                            "kind": "text",
                            "text": "[`@onChatTyping`](tags:@onChatTyping)"
                        },
                        {
                            "kind": "text",
                            "text": " shouts and pressing Enter will send a "
                        },
                        {
                            "kind": "text",
                            "text": "[`@onChat`](tags:@onChat)"
                        },
                        {
                            "kind": "text",
                            "text": " shout and clear the chat bar."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow the chat bar with a placeholder.\r\nos.showChat({\r\n    placeholder: \"hello\"\r\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow the chat bar with some prefilled text.\r\nos.showChat({\r\n    prefill: \"this is prefilled\"\r\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow the chat bar with some prefilled text and a placeholder.\r\nos.showChat({\r\n    prefill: \"this is prefilled\",\r\n    placeholder: \"hello\"\r\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow the chat bar with a custom placeholder color.\r\nos.showChat({\r\n    placeholder: \"hello\",\r\n    placeholderColor: '#44a471'\r\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow the chat bar with a custom background color.\r\nos.showChat({\r\n    placeholder: \"hello\",\r\n    backgroundColor: '#f1abe2'\r\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow the chat bar with a custom foreground color.\r\nos.showChat({\r\n    placeholder: \"hello\",\r\n    foregroundColor: '#531234'\r\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.showChat"
                                }
                            ]
                        },
                        {
                            "tag": "@docid",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "showChat-options"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-chat"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5517,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5517"
                    }
                ],
                "parameters": [
                    {
                        "id": 765,
                        "name": "options",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the options that the chat bar should use."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 2530,
                            "name": "ShowChatOptions",
                            "package": "@casual-simulation/aux-common",
                            "id": 2530,
                            "qualifiedName": "ShowChatOptions"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "void"
                }
            },
            "comment": {
                "text": "Shows the \"chat bar\" at the top of the screen in CasualOS, optionally using the given text as the placeholder.\r\nTyping in the chat bar will send @onChatTyping shouts and pressing Enter will send a @onChat shout and clear the chat bar.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow the chat bar with a placeholder.\r\nos.showChat({\r\n    placeholder: \"hello\"\r\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow the chat bar with some prefilled text.\r\nos.showChat({\r\n    prefill: \"this is prefilled\"\r\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow the chat bar with some prefilled text and a placeholder.\r\nos.showChat({\r\n    prefill: \"this is prefilled\",\r\n    placeholder: \"hello\"\r\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow the chat bar with a custom placeholder color.\r\nos.showChat({\r\n    placeholder: \"hello\",\r\n    placeholderColor: '#44a471'\r\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow the chat bar with a custom background color.\r\nos.showChat({\r\n    placeholder: \"hello\",\r\n    backgroundColor: '#f1abe2'\r\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow the chat bar with a custom foreground color.\r\nos.showChat({\r\n    placeholder: \"hello\",\r\n    foregroundColor: '#531234'\r\n});\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.showChat"
                    },
                    {
                        "tagName": "docid",
                        "text": "showChat-options"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-chat"
                    }
                ]
            },
            "group": "10-chat"
        },
        {
            "id": 760,
            "order": 9999,
            "name": "showChat-placeholder",
            "reflection": {
                "id": 760,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Shows the \"chat bar\" at the top of the screen in CasualOS, optionally using the given text as the placeholder.\r\nTyping in the chat bar will send "
                        },
                        {
                            "kind": "text",
                            "text": "[`@onChatTyping`](tags:@onChatTyping)"
                        },
                        {
                            "kind": "text",
                            "text": " shouts and pressing Enter will send a "
                        },
                        {
                            "kind": "text",
                            "text": "[`@onChat`](tags:@onChat)"
                        },
                        {
                            "kind": "text",
                            "text": " shout and clear the chat bar."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow the chat bar.\r\nos.showChat();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow the chat bar with some placeholder text.\r\nos.showChat(\"hello\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.showChat"
                                }
                            ]
                        },
                        {
                            "tag": "@docid",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "showChat-placeholder"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-chat"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5470,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5470"
                    }
                ],
                "parameters": [
                    {
                        "id": 761,
                        "name": "placeholder",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the text that the chat bar should show as the placeholder."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "void"
                }
            },
            "comment": {
                "text": "Shows the \"chat bar\" at the top of the screen in CasualOS, optionally using the given text as the placeholder.\r\nTyping in the chat bar will send @onChatTyping shouts and pressing Enter will send a @onChat shout and clear the chat bar.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow the chat bar.\r\nos.showChat();\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow the chat bar with some placeholder text.\r\nos.showChat(\"hello\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.showChat"
                    },
                    {
                        "tagName": "docid",
                        "text": "showChat-placeholder"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-chat"
                    }
                ]
            },
            "group": "10-chat"
        },
        {
            "id": 1437,
            "order": 9999,
            "name": "os.convertGeolocationToWhat3Words",
            "reflection": {
                "id": 1437,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Converts the given geolocation to a [what3words](https://what3words.com/) address. Returns a promise that resolves with the 3 word address."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the current geolocation as a 3 word address\r\nconst location = await os.getGeolocation();\r\n\r\nif (location.success) {\r\n    const address = await os.convertGeolocationToWhat3Words(location);\r\n    os.toast(address);\r\n} else {\r\n    os.tost(\"Could not get geolocation\");\r\n}\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the location of the Amway Grand as a 3 word address\r\nconst address = await os.convertGeolocationToWhat3Words({\r\n    latitude: 42.966824756903755,\r\n    longitude: -85.67309821404483,\r\n});\r\nos.toast(address);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.convertGeolocationToWhat3Words"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-geolocation"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 9183,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L9183"
                    }
                ],
                "parameters": [
                    {
                        "id": 1438,
                        "name": "location",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The latitude and longitude that should be converted to a 3 word address."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 2506,
                            "name": "ConvertGeolocationToWhat3WordsOptions",
                            "package": "@casual-simulation/aux-common",
                            "id": 2506,
                            "qualifiedName": "ConvertGeolocationToWhat3WordsOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Converts the given geolocation to a [what3words](https://what3words.com/) address. Returns a promise that resolves with the 3 word address.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the current geolocation as a 3 word address\r\nconst location = await os.getGeolocation();\r\n\r\nif (location.success) {\r\n    const address = await os.convertGeolocationToWhat3Words(location);\r\n    os.toast(address);\r\n} else {\r\n    os.tost(\"Could not get geolocation\");\r\n}\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the location of the Amway Grand as a 3 word address\r\nconst address = await os.convertGeolocationToWhat3Words({\r\n    latitude: 42.966824756903755,\r\n    longitude: -85.67309821404483,\r\n});\r\nos.toast(address);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.convertGeolocationToWhat3Words"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-geolocation"
                    }
                ]
            },
            "group": "10-geolocation"
        },
        {
            "id": 1065,
            "order": 9999,
            "name": "os.getGeolocation",
            "reflection": {
                "id": 1065,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the geographic location that the current device is at in the world.\r\n\r\nReturns a promise that resolves with the location."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the current geolocation.\r\nconst location = await os.getGeolocation();\r\n\r\nif (location.success) {\r\n    os.toast(`You are at (${location.latitude}, ${location.longitude})`);\r\n} else {\r\n    os.toast(location.errorMessage);\r\n}\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getGeolocation"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-geolocation"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7649,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L7649"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "reference",
                            "target": 2491,
                            "name": "Geolocation",
                            "package": "@casual-simulation/aux-common",
                            "id": 2491,
                            "qualifiedName": "Geolocation"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Gets the geographic location that the current device is at in the world.\r\n\r\nReturns a promise that resolves with the location.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the current geolocation.\r\nconst location = await os.getGeolocation();\r\n\r\nif (location.success) {\r\n    os.toast(`You are at (${location.latitude}, ${location.longitude})`);\r\n} else {\r\n    os.toast(location.errorMessage);\r\n}\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getGeolocation"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-geolocation"
                    }
                ]
            },
            "group": "10-geolocation"
        },
        {
            "id": 715,
            "order": 9999,
            "name": "os.hideHtml",
            "reflection": {
                "id": 715,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Closes the HTML popup modal."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nHide the HTML popup.\r\nos.hideHtml();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.hideHtml"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-html"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5248,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5248"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "../src/aux-common/bots/BotEvents.ts",
                        "qualifiedName": "HideHtmlAction"
                    },
                    "name": "HideHtmlAction",
                    "package": "@casual-simulation/aux-common"
                }
            },
            "comment": {
                "text": "Closes the HTML popup modal.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nHide the HTML popup.\r\nos.hideHtml();\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.hideHtml"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-html"
                    }
                ]
            },
            "group": "10-html"
        },
        {
            "id": 711,
            "order": 9999,
            "name": "os.showHtml",
            "reflection": {
                "id": 711,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Shows some HTML to the player in a popup modal. This can be useful for loading a separate webpage or providing some formatted text."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a header with some text.\r\nos.showHtml(`\r\n  <h1>This is some text!</h1>\r\n`);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a YouTube video.\r\nos.showHtml(`\r\n  <iframe\r\n      width=\"560\"\r\n      height=\"315\"\r\n      src=\"https://www.youtube.com/embed/BHACKCNDMW8\"\r\n      frameborder=\"0\"\r\n      allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n      allowfullscreen>\r\n  </iframe>\r\n`);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.showHtml"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-html"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5234,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5234"
                    }
                ],
                "parameters": [
                    {
                        "id": 712,
                        "name": "html",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the HTML that should be shown to the user."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "../src/aux-common/bots/BotEvents.ts",
                        "qualifiedName": "ShowHtmlAction"
                    },
                    "name": "ShowHtmlAction",
                    "package": "@casual-simulation/aux-common"
                }
            },
            "comment": {
                "text": "Shows some HTML to the player in a popup modal. This can be useful for loading a separate webpage or providing some formatted text.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a header with some text.\r\nos.showHtml(`\r\n  <h1>This is some text!</h1>\r\n`);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a YouTube video.\r\nos.showHtml(`\r\n  <iframe\r\n      width=\"560\"\r\n      height=\"315\"\r\n      src=\"https://www.youtube.com/embed/BHACKCNDMW8\"\r\n      frameborder=\"0\"\r\n      allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\r\n      allowfullscreen>\r\n  </iframe>\r\n`);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.showHtml"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-html"
                    }
                ]
            },
            "group": "10-html"
        },
        {
            "id": 930,
            "order": 9999,
            "name": "os.loadInst",
            "reflection": {
                "id": 930,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Loads the given inst into the current browser tab. When the inst is loaded, the "
                        },
                        {
                            "kind": "text",
                            "text": "[`@onInstJoined`](tags:@onInstJoined)"
                        },
                        {
                            "kind": "text",
                            "text": " shout will be triggered.\r\n\r\nNote that separate instances cannot interact directly. They must instead interact via super shouts"
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nLoad the \"fun\" inst.\r\nos.loadInst(\"fun\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.loadInst"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-load-inst"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 6436,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L6436"
                    }
                ],
                "parameters": [
                    {
                        "id": 931,
                        "name": "id",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the ID of the inst to load."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "../src/aux-common/bots/BotEvents.ts",
                        "qualifiedName": "LoadServerAction"
                    },
                    "name": "LoadServerAction",
                    "package": "@casual-simulation/aux-common"
                }
            },
            "comment": {
                "text": "Loads the given inst into the current browser tab. When the inst is loaded, the @onInstJoined shout will be triggered.\r\n\r\nNote that separate instances cannot interact directly. They must instead interact via super shouts",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nLoad the \"fun\" inst.\r\nos.loadInst(\"fun\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.loadInst"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-load-inst"
                    }
                ]
            },
            "group": "10-load-inst"
        },
        {
            "id": 934,
            "order": 9999,
            "name": "os.unloadInst",
            "reflection": {
                "id": 934,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Unloads the given inst from the current browser tab. When the inst is unloaded, the "
                        },
                        {
                            "kind": "text",
                            "text": "[`@onInstLeave`](tags:@onInstLeave)"
                        },
                        {
                            "kind": "text",
                            "text": " shout will be triggered."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nUnload the \"fun\" inst.\r\nos.unloadInst(\"fun\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.unloadInst"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-load-inst"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 6453,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L6453"
                    }
                ],
                "parameters": [
                    {
                        "id": 935,
                        "name": "id",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the name of the inst to unload."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "../src/aux-common/bots/BotEvents.ts",
                        "qualifiedName": "UnloadServerAction"
                    },
                    "name": "UnloadServerAction",
                    "package": "@casual-simulation/aux-common"
                }
            },
            "comment": {
                "text": "Unloads the given inst from the current browser tab. When the inst is unloaded, the @onInstLeave shout will be triggered.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nUnload the \"fun\" inst.\r\nos.unloadInst(\"fun\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.unloadInst"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-load-inst"
                    }
                ]
            },
            "group": "10-load-inst"
        },
        {
            "id": 782,
            "order": 9999,
            "name": "os.device",
            "reflection": {
                "id": 782,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets information about the device that the player is using."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the device info and popup a message with it.\r\nconst info = os.device();\r\nos.toast(info);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.device"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-os-info"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5616,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5616"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 2876,
                    "name": "CasualOSDevice",
                    "package": "@casual-simulation/aux-runtime",
                    "id": 2876,
                    "qualifiedName": "AuxDevice"
                }
            },
            "comment": {
                "text": "Gets information about the device that the player is using.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the device info and popup a message with it.\r\nconst info = os.device();\r\nos.toast(info);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.device"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-os-info"
                    }
                ]
            },
            "group": "10-os-info"
        },
        {
            "id": 788,
            "order": 9999,
            "name": "os.enableCollaboration",
            "reflection": {
                "id": 788,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Attempts to enable collaboration features on the device."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nEnable collaboration on this device.\r\nawait os.enableCollaboration();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.enableCollaboration"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-os-info"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5661,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5661"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Attempts to enable collaboration features on the device.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nEnable collaboration on this device.\r\nawait os.enableCollaboration();\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.enableCollaboration"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-os-info"
                    }
                ]
            },
            "group": "10-os-info"
        },
        {
            "id": 785,
            "order": 9999,
            "name": "os.isCollaborative",
            "reflection": {
                "id": 785,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets whether the current session was loaded with collaborative features enabled.\r\n\r\nWhen "
                        },
                        {
                            "kind": "code",
                            "text": "`true`"
                        },
                        {
                            "kind": "text",
                            "text": ", CasualOS will attempt to sync the "
                        },
                        {
                            "kind": "code",
                            "text": "`shared`"
                        },
                        {
                            "kind": "text",
                            "text": " (including "
                        },
                        {
                            "kind": "code",
                            "text": "`tempShared`"
                        },
                        {
                            "kind": "text",
                            "text": " and "
                        },
                        {
                            "kind": "code",
                            "text": "`remoteTempShared`"
                        },
                        {
                            "kind": "text",
                            "text": ") spaces with other players.\r\nWhen "
                        },
                        {
                            "kind": "code",
                            "text": "`false`"
                        },
                        {
                            "kind": "text",
                            "text": ", CasualOS will treat all the shared spaces like they are all "
                        },
                        {
                            "kind": "code",
                            "text": "`tempLocal`"
                        },
                        {
                            "kind": "text",
                            "text": "."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nToast whether the current session is collaborative.\r\nconst isCollaborative = os.isCollaborative();\r\nos.toast(isCollaborative ? \"We are collaborative!\" : \"We are not collaborative!\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.isCollaborative"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-os-info"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5643,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5643"
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "boolean"
                }
            },
            "comment": {
                "text": "Gets whether the current session was loaded with collaborative features enabled.\r\n\r\nWhen `true`, CasualOS will attempt to sync the `shared` (including `tempShared` and `remoteTempShared`) spaces with other players.\r\nWhen `false`, CasualOS will treat all the shared spaces like they are all `tempLocal`.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nToast whether the current session is collaborative.\r\nconst isCollaborative = os.isCollaborative();\r\nos.toast(isCollaborative ? \"We are collaborative!\" : \"We are not collaborative!\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.isCollaborative"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-os-info"
                    }
                ]
            },
            "group": "10-os-info"
        },
        {
            "id": 779,
            "order": 9999,
            "name": "os.version",
            "reflection": {
                "id": 779,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets information about the version of CasualOS."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the current version and popup a message with it.\r\nconst info = os.version();\r\nos.toast(info.version);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nCheck whether the current inst is for playing AUXes.\r\nconst info = os.version();\r\nconst isPlayer = info.playerMode === \"player\";\r\nos.toast('Is Player: ' + isPlayer);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.version"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-os-info"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5601,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5601"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": 2868,
                    "name": "CasualOSVersion",
                    "package": "@casual-simulation/aux-runtime",
                    "id": 2868,
                    "qualifiedName": "AuxVersion"
                }
            },
            "comment": {
                "text": "Gets information about the version of CasualOS.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the current version and popup a message with it.\r\nconst info = os.version();\r\nos.toast(info.version);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nCheck whether the current inst is for playing AUXes.\r\nconst info = os.version();\r\nconst isPlayer = info.playerMode === \"player\";\r\nos.toast('Is Player: ' + isPlayer);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.version"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-os-info"
                    }
                ]
            },
            "group": "10-os-info"
        },
        {
            "id": 1510,
            "order": 9999,
            "name": "os.remoteCount",
            "reflection": {
                "id": 1510,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the number of remotes that are viewing the current inst.\r\nOptionally takes a parameter which is the inst that the number of remotes should be retrieved for.\r\nIf omitted, then the current inst will be checked. Returns a promise that resolves with the number of active remotes."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the number of remotes in the current inst.\r\nconst numberOfRemotes = await os.remoteCount();\r\nos.toast(\"Number of Remotes: \" + numberOfRemotes);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the number of remotes in the `test` inst.\r\nconst numberOfRemotes = await os.remoteCount('test');\r\nos.toast(\"Number of Remotes: \" + numberOfRemotes);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.remoteCount"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-remotes"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 9525,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L9525"
                    }
                ],
                "parameters": [
                    {
                        "id": 1511,
                        "name": "inst",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the name of the inst that the number of remotes should be retrieved for. If not specified, then the current inst current inst will be used."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Gets the number of remotes that are viewing the current inst.\r\nOptionally takes a parameter which is the inst that the number of remotes should be retrieved for.\r\nIf omitted, then the current inst will be checked. Returns a promise that resolves with the number of active remotes.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the number of remotes in the current inst.\r\nconst numberOfRemotes = await os.remoteCount();\r\nos.toast(\"Number of Remotes: \" + numberOfRemotes);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the number of remotes in the `test` inst.\r\nconst numberOfRemotes = await os.remoteCount('test');\r\nos.toast(\"Number of Remotes: \" + numberOfRemotes);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.remoteCount"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-remotes"
                    }
                ]
            },
            "group": "10-remotes"
        },
        {
            "id": 1485,
            "order": 9999,
            "name": "os.remotes",
            "reflection": {
                "id": 1485,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the list of remote IDs that are connected to the current inst. Returns a promise that resolves with the list of remote IDs.\r\n\r\nThe resolved list will always have at least one value that represents the current remote."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the list of remote IDs.\r\nconst remotes = await os.remotes();\r\nos.toast(\"Remotes \" + remotes.join(','));\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.remotes"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-remotes"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 9572,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L9572"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "array",
                            "elementType": {
                                "type": "intrinsic",
                                "name": "string"
                            }
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Gets the list of remote IDs that are connected to the current inst. Returns a promise that resolves with the list of remote IDs.\r\n\r\nThe resolved list will always have at least one value that represents the current remote.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the list of remote IDs.\r\nconst remotes = await os.remotes();\r\nos.toast(\"Remotes \" + remotes.join(','));\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.remotes"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-remotes"
                    }
                ]
            },
            "group": "10-remotes"
        },
        {
            "id": 1514,
            "order": 9999,
            "name": "os.totalRemoteCount",
            "reflection": {
                "id": 1514,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the number of devices that are connected to the server. Returns a promise that resolves with the number of active devices."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the number of devices on the server.\r\nconst numberOfDevices = await os.totalRemoteCount();\r\nos.toast(\"Number of Devices: \" + numberOfDevices);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.totalRemoteCount"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-remotes"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 9548,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L9548"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Gets the number of devices that are connected to the server. Returns a promise that resolves with the number of active devices.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the number of devices on the server.\r\nconst numberOfDevices = await os.totalRemoteCount();\r\nos.toast(\"Number of Devices: \" + numberOfDevices);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.totalRemoteCount"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-remotes"
                    }
                ]
            },
            "group": "10-remotes"
        },
        {
            "id": 1499,
            "order": 9999,
            "name": "os.applyUpdatesToInst",
            "reflection": {
                "id": 1499,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Applies the given updates to the current inst. Returns a promise that resolves once the updates have been applied.\r\n\r\nNote that you can call this function with the same update multiple times and you will end up with only one version of the bots saved in the update. Additionally, future changes to the bots will be preserved even if the update is applied again.\r\n\r\nThis feature makes inst updates useful when you want to ensure that an experience starts in an initial state but also able to change over time."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nApply an update that was saved to a tag\r\nawait os.applyUpdatesToInst([ tags.savedUpdate ]);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.applyUpdatesToInst"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-updates"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 9713,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L9713"
                    }
                ],
                "parameters": [
                    {
                        "id": 1500,
                        "name": "updates",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the list of updates that should be applied to this inst."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "target": 2882,
                                "name": "InstUpdate",
                                "package": "@casual-simulation/aux-common",
                                "id": 2882,
                                "qualifiedName": "InstUpdate"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Applies the given updates to the current inst. Returns a promise that resolves once the updates have been applied.\r\n\r\nNote that you can call this function with the same update multiple times and you will end up with only one version of the bots saved in the update. Additionally, future changes to the bots will be preserved even if the update is applied again.\r\n\r\nThis feature makes inst updates useful when you want to ensure that an experience starts in an initial state but also able to change over time.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nApply an update that was saved to a tag\r\nawait os.applyUpdatesToInst([ tags.savedUpdate ]);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.applyUpdatesToInst"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-updates"
                    }
                ]
            },
            "group": "10-updates"
        },
        {
            "id": 1495,
            "order": 9999,
            "name": "os.createInitializationUpdate",
            "reflection": {
                "id": 1495,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Creates an inst update that, when applied, ensures the given bots are created on this inst. Returns a promise that resolves with the inst update.\r\n\r\nNote that you can apply the same update multiple times and you will end up with only one version of the bots saved in the update. Additionally, future changes to the bots will be preserved even if the update is applied again.\r\n\r\nThis feature makes inst updates useful when you want to ensure that an experience starts in an initial state but also able to change over time.\r\n\r\nUnlike "
                        },
                        {
                            "kind": "text",
                            "text": "[`os.getCurrentInstUpdate()`](ref:os.getCurrentInstUpdate)"
                        },
                        {
                            "kind": "text",
                            "text": ", this function creates an update that is not linked to this inst. This means that applying the update to the inst it was created in will create duplicate bots."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nCreate an update with this bot and save it to a tag\r\nconst update = await os.createInitializationUpdate([thisBot]);\r\ntags.savedUpdate = update;\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nCreate an update with all the bots in the home dimension\r\nconst update = await os.createInitializationUpdate(getBots(inDimension('home')));\r\ntags.savedUpdate = update;\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.createInitializationUpdate"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-updates"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 9681,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L9681"
                    }
                ],
                "parameters": [
                    {
                        "id": 1496,
                        "name": "bots",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the list of bots that should be included in the update."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "target": 2705,
                                "name": "Bot",
                                "package": "@casual-simulation/aux-common",
                                "id": 2705,
                                "qualifiedName": "RuntimeBot"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "reference",
                            "target": 2882,
                            "name": "InstUpdate",
                            "package": "@casual-simulation/aux-common",
                            "id": 2882,
                            "qualifiedName": "InstUpdate"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Creates an inst update that, when applied, ensures the given bots are created on this inst. Returns a promise that resolves with the inst update.\r\n\r\nNote that you can apply the same update multiple times and you will end up with only one version of the bots saved in the update. Additionally, future changes to the bots will be preserved even if the update is applied again.\r\n\r\nThis feature makes inst updates useful when you want to ensure that an experience starts in an initial state but also able to change over time.\r\n\r\nUnlike os.getCurrentInstUpdate, this function creates an update that is not linked to this inst. This means that applying the update to the inst it was created in will create duplicate bots.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nCreate an update with this bot and save it to a tag\r\nconst update = await os.createInitializationUpdate([thisBot]);\r\ntags.savedUpdate = update;\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nCreate an update with all the bots in the home dimension\r\nconst update = await os.createInitializationUpdate(getBots(inDimension('home')));\r\ntags.savedUpdate = update;\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.createInitializationUpdate"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-updates"
                    }
                ]
            },
            "group": "10-updates"
        },
        {
            "id": 1503,
            "order": 9999,
            "name": "os.getCurrentInstUpdate",
            "reflection": {
                "id": 1503,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Retrieves an inst update that represents the current local shared state of the inst. Returns a promise that resolves with the update.\r\n\r\nNote that the inst update only contains bots and tag masks from the "
                        },
                        {
                            "kind": "code",
                            "text": "`shared`"
                        },
                        {
                            "kind": "text",
                            "text": " space. Useful for saving the current shared state of the inst so that it can be restored later or transferred to another inst.\r\n\r\nUnlike "
                        },
                        {
                            "kind": "text",
                            "text": "[`os.createInitializationUpdate(bots)`](ref:os.createInitializationUpdate)"
                        },
                        {
                            "kind": "text",
                            "text": ", this function creates an update that is linked to this inst. This means that applying the update to the inst it was created in will not create duplicate bots. It is still possible to apply the update to other insts, but it may create duplicate bots depending on the history of the other inst."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nSave the current inst state to a local bot\r\nconst update = await os.getCurrentInstUpdate();\r\ncreate({\r\n    space: 'local',\r\n    backup: true,\r\n    timestamp: update.timestamp,\r\n    update: update\r\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nRestore from a local bot\r\nconst savedUpdates = getBots(bySpace('local'), byTag('backup', true));\r\nsavedUpdates.sort((a, b) => b.timestamp - a.timestamp);\r\n\r\nif (savedUpdates.length > 0) {\r\n    const update = savedUpdates[0].tags.update;\r\n    await os.applyUpdatesToInst([update]);\r\n    os.toast(\"Restored!\");\r\n}\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getCurrentInstUpdate"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-updates"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 9754,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L9754"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "reference",
                            "target": 2882,
                            "name": "InstUpdate",
                            "package": "@casual-simulation/aux-common",
                            "id": 2882,
                            "qualifiedName": "InstUpdate"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Retrieves an inst update that represents the current local shared state of the inst. Returns a promise that resolves with the update.\r\n\r\nNote that the inst update only contains bots and tag masks from the `shared` space. Useful for saving the current shared state of the inst so that it can be restored later or transferred to another inst.\r\n\r\nUnlike os.createInitializationUpdate, this function creates an update that is linked to this inst. This means that applying the update to the inst it was created in will not create duplicate bots. It is still possible to apply the update to other insts, but it may create duplicate bots depending on the history of the other inst.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nSave the current inst state to a local bot\r\nconst update = await os.getCurrentInstUpdate();\r\ncreate({\r\n    space: 'local',\r\n    backup: true,\r\n    timestamp: update.timestamp,\r\n    update: update\r\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nRestore from a local bot\r\nconst savedUpdates = getBots(bySpace('local'), byTag('backup', true));\r\nsavedUpdates.sort((a, b) => b.timestamp - a.timestamp);\r\n\r\nif (savedUpdates.length > 0) {\r\n    const update = savedUpdates[0].tags.update;\r\n    await os.applyUpdatesToInst([update]);\r\n    os.toast(\"Restored!\");\r\n}\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getCurrentInstUpdate"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-updates"
                    }
                ]
            },
            "group": "10-updates"
        },
        {
            "id": 1491,
            "order": 9999,
            "name": "os.getInstStateFromUpdates",
            "reflection": {
                "id": 1491,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Calculates the inst state from the given list of updates. Returns a promise that resolves with the bot state that the updates produce.\r\n\r\nUseful for tracking the history of an inst over time."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the last 5 inst states in the shared space\r\nconst updates = await os.listInstUpdates();\r\n\r\nlet states = [];\r\nfor(let i = 5; i >= 0; i--) {\r\n    const state = await os.getInstStateFromUpdates(updates.slice(0, updates.length - i));\r\n    states.push(state);\r\n}\r\n\r\nconsole.log('States: ', states);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nCalculate the last deltas from shared space updates\r\nconst updates = await os.listInstUpdates();\r\n\r\nlet lastState;\r\nlet deltas = [];\r\nfor(let i = 5; i >= 0; i--) {\r\n    const state = await os.getInstStateFromUpdates(updates.slice(0, updates.length - i));\r\n\r\n    if (lastState) {\r\n        const delta = diffSnapshots(lastState, state);\r\n        deltas.push(delta);\r\n    }\r\n\r\n    lastState = state;\r\n}\r\nconsole.log('Deltas: ', deltas);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getInstStateFromUpdates"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-updates"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 9645,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L9645"
                    }
                ],
                "parameters": [
                    {
                        "id": 1492,
                        "name": "updates",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The updates that the state should be calculated from."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "target": 2882,
                                "name": "InstUpdate",
                                "package": "@casual-simulation/aux-common",
                                "id": 2882,
                                "qualifiedName": "InstUpdate"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "reference",
                            "target": 2858,
                            "name": "BotState",
                            "package": "@casual-simulation/aux-common",
                            "id": 2858,
                            "qualifiedName": "BotsState"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Calculates the inst state from the given list of updates. Returns a promise that resolves with the bot state that the updates produce.\r\n\r\nUseful for tracking the history of an inst over time.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the last 5 inst states in the shared space\r\nconst updates = await os.listInstUpdates();\r\n\r\nlet states = [];\r\nfor(let i = 5; i >= 0; i--) {\r\n    const state = await os.getInstStateFromUpdates(updates.slice(0, updates.length - i));\r\n    states.push(state);\r\n}\r\n\r\nconsole.log('States: ', states);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nCalculate the last deltas from shared space updates\r\nconst updates = await os.listInstUpdates();\r\n\r\nlet lastState;\r\nlet deltas = [];\r\nfor(let i = 5; i >= 0; i--) {\r\n    const state = await os.getInstStateFromUpdates(updates.slice(0, updates.length - i));\r\n\r\n    if (lastState) {\r\n        const delta = diffSnapshots(lastState, state);\r\n        deltas.push(delta);\r\n    }\r\n\r\n    lastState = state;\r\n}\r\nconsole.log('Deltas: ', deltas);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getInstStateFromUpdates"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-updates"
                    }
                ]
            },
            "group": "10-updates"
        },
        {
            "id": 1488,
            "order": 9999,
            "name": "os.listInstUpdates",
            "reflection": {
                "id": 1488,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the list of updates that have occurred in the shared space. Returns a promise that resolves with the list of updates.\r\n\r\nUseful when combined with "
                        },
                        {
                            "kind": "text",
                            "text": "[`os.getInstStateFromUpdates(updates)`](ref:os.getInstStateFromUpdates)"
                        },
                        {
                            "kind": "text",
                            "text": " to track the history of an inst over time."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet a list of updates to shared space\r\nconst updates = await os.listInstUpdates();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.listInstUpdates"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-updates"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 9595,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L9595"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "array",
                            "elementType": {
                                "type": "reference",
                                "target": 2882,
                                "name": "InstUpdate",
                                "package": "@casual-simulation/aux-common",
                                "id": 2882,
                                "qualifiedName": "InstUpdate"
                            }
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Gets the list of updates that have occurred in the shared space. Returns a promise that resolves with the list of updates.\r\n\r\nUseful when combined with os.getInstStateFromUpdates to track the history of an inst over time.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet a list of updates to shared space\r\nconst updates = await os.listInstUpdates();\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.listInstUpdates"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-updates"
                    }
                ]
            },
            "group": "10-updates"
        },
        {
            "id": 829,
            "order": 9999,
            "name": "os.disableWakeLock",
            "reflection": {
                "id": 829,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Disables the wake lock that was previously enabled. Returns a promise that resolves once the wake lock has been disabled."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nDisable the wake lock\r\nawait os.disableWakeLock();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.disableWakeLock"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-wake-lock"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5888,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5888"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Disables the wake lock that was previously enabled. Returns a promise that resolves once the wake lock has been disabled.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nDisable the wake lock\r\nawait os.disableWakeLock();\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.disableWakeLock"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-wake-lock"
                    }
                ]
            },
            "group": "10-wake-lock"
        },
        {
            "id": 832,
            "order": 9999,
            "name": "os.getWakeLockConfiguration",
            "reflection": {
                "id": 832,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Retrieves the current wake lock state. Returns a promise that resolves with an object that contains information about the current wake lock state."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the current wake lock state\r\nconst configuration = await os.getWakeLockConfiguration();\r\n\r\nif (configuration.enabled) {\r\n    os.toast('Wake lock is enabled!');\r\n} else {\r\n    os.toast('Wake lock is disabled.');\r\n}\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getWakeLockConfiguration"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-wake-lock"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5910,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5910"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "reference",
                            "target": {
                                "sourceFileName": "../src/aux-common/bots/BotEvents.ts",
                                "qualifiedName": "WakeLockConfiguration"
                            },
                            "name": "WakeLockConfiguration",
                            "package": "@casual-simulation/aux-common"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Retrieves the current wake lock state. Returns a promise that resolves with an object that contains information about the current wake lock state.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the current wake lock state\r\nconst configuration = await os.getWakeLockConfiguration();\r\n\r\nif (configuration.enabled) {\r\n    os.toast('Wake lock is enabled!');\r\n} else {\r\n    os.toast('Wake lock is disabled.');\r\n}\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getWakeLockConfiguration"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-wake-lock"
                    }
                ]
            },
            "group": "10-wake-lock"
        },
        {
            "id": 826,
            "order": 9999,
            "name": "os.requestWakeLock",
            "reflection": {
                "id": 826,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Requests a wake lock that will keep the device screen awake.\r\nThis will ask the user for permission to keep the screen awake.\r\nReturns a promise that resolves once the wake lock has been granted. If the wake lock is denied, then an error will be thrown.\r\n\r\nUseful for a kiosk mode where the screen is always supposed to be on."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nRequest a wake lock from the user.\r\nawait os.requestWakeLock();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.requestWakeLock"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "10-wake-lock"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5872,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5872"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Requests a wake lock that will keep the device screen awake.\r\nThis will ask the user for permission to keep the screen awake.\r\nReturns a promise that resolves once the wake lock has been granted. If the wake lock is denied, then an error will be thrown.\r\n\r\nUseful for a kiosk mode where the screen is always supposed to be on.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nRequest a wake lock from the user.\r\nawait os.requestWakeLock();\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.requestWakeLock"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "10-wake-lock"
                    }
                ]
            },
            "group": "10-wake-lock"
        },
        {
            "id": 1009,
            "order": 9999,
            "name": "os.openDevConsole",
            "reflection": {
                "id": 1009,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Instructs CasualOS to open the built-in developer console.\r\nThe dev console provides easy access to error messages and debug logs for formulas and actions."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nOpen the developer console.\r\nos.openDevConsole();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.openDevConsole"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "12-dev"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7143,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L7143"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "../src/aux-common/bots/BotEvents.ts",
                        "qualifiedName": "OpenConsoleAction"
                    },
                    "name": "OpenConsoleAction",
                    "package": "@casual-simulation/aux-common"
                }
            },
            "comment": {
                "text": "Instructs CasualOS to open the built-in developer console.\r\nThe dev console provides easy access to error messages and debug logs for formulas and actions.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nOpen the developer console.\r\nos.openDevConsole();\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.openDevConsole"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "12-dev"
                    }
                ]
            },
            "group": "12-dev"
        },
        {
            "id": 1524,
            "order": 9999,
            "name": "os.meetCommand",
            "reflection": {
                "id": 1524,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Send a [command](https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe-commands) to the Jitsi Meet API. The commands are only valid if the meet portal is fully loaded (see "
                        },
                        {
                            "kind": "text",
                            "text": "[`@onMeetLoaded`](tags:@onMeetLoaded)"
                        },
                        {
                            "kind": "text",
                            "text": ").\r\n\r\nReturns a promise that resolves when the command has been executed."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nChange user's meet display name\r\nos.meetCommand('displayName', 'ABC123');\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nClose the meet.\r\nos.meetCommand('hangup')\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.meetCommand"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "12-meet"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 11138,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L11138"
                    }
                ],
                "parameters": [
                    {
                        "id": 1525,
                        "name": "command",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the command to execute."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 1526,
                        "name": "args",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The arguments for the command (if any)."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Send a [command](https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe-commands) to the Jitsi Meet API. The commands are only valid if the meet portal is fully loaded (see @onMeetLoaded).\r\n\r\nReturns a promise that resolves when the command has been executed.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nChange user's meet display name\r\nos.meetCommand('displayName', 'ABC123');\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nClose the meet.\r\nos.meetCommand('hangup')\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.meetCommand"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "12-meet"
                    }
                ]
            },
            "group": "12-meet"
        },
        {
            "id": 1529,
            "order": 9999,
            "name": "os.meetFunction",
            "reflection": {
                "id": 1529,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Executes the given [function](https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe-functions) on the Jitsi Meet API and returns a promise that resolves with the result. The functions are only valid if the meet portal is fully loaded (see @onMeetLoaded)."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet a list of all the participants.\r\nconst participants = await os.meetFunction('getParticipantsInfo')\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet a list of available breakout rooms.\r\nconst rooms = await os.meetFunction('listBreakoutRooms');\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.meetFunction"
                                }
                            ]
                        },
                        {
                            "tag": "@docgroup",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "12-meet"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 11160,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L11160"
                    }
                ],
                "parameters": [
                    {
                        "id": 1530,
                        "name": "functionName",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the name of the function to execute."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 1531,
                        "name": "args",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the arguments to provide to the function."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "intrinsic",
                                "name": "any"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Executes the given [function](https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe-functions) on the Jitsi Meet API and returns a promise that resolves with the result. The functions are only valid if the meet portal is fully loaded (see @onMeetLoaded).",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet a list of all the participants.\r\nconst participants = await os.meetFunction('getParticipantsInfo')\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nGet a list of available breakout rooms.\r\nconst rooms = await os.meetFunction('listBreakoutRooms');\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.meetFunction"
                    },
                    {
                        "tagName": "docgroup",
                        "text": "12-meet"
                    }
                ]
            },
            "group": "12-meet"
        },
        {
            "id": 1115,
            "order": 9999,
            "name": "os.getAverageFrameRate",
            "reflection": {
                "id": 1115,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets the number of frames that have occurred over the last second.\r\nReturns a promise that resolves with the number of frames that have ocurred in the last second."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet the current frames per second.\r\nlet fps = await os.getAverageFrameRate();\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nCreate a basic FPS counter.\r\nsetInterval(async () => {\r\n    masks.label = await os.getAverageFrameRate();\r\n}, 1000);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getAverageFrameRate"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 14365,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L14365"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Gets the number of frames that have occurred over the last second.\r\nReturns a promise that resolves with the number of frames that have ocurred in the last second.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet the current frames per second.\r\nlet fps = await os.getAverageFrameRate();\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nCreate a basic FPS counter.\r\nsetInterval(async () => {\r\n    masks.label = await os.getAverageFrameRate();\r\n}, 1000);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getAverageFrameRate"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1111,
            "order": 9999,
            "name": "os.getMediaPermission",
            "reflection": {
                "id": 1111,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Gets permission from user to access audio and/or video streams from the device.\r\n\r\nReturns a promise that resolves if the user grants the specified media permission(s).\r\nIf the user blocks permission or has previously blocked permission or any other problem occurs, an error will be thrown."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet permission for the device's microphone.\r\ntry {\r\n    await os.getMediaPermission({ audio: true });\r\n} catch (e) {\r\n    console.error('Could not get permission for microphone:', e);\r\n}\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nGet permission for the device's microphone and camera.\r\ntry {\r\n    await os.getMediaPermission({ audio: true, video: true });\r\n} catch (e) {\r\n    console.error('Could not get permission for microphone and/or camera:', e);\r\n}\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.getMediaPermission"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 14344,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L14344"
                    }
                ],
                "parameters": [
                    {
                        "id": 1112,
                        "name": "options",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The options that should be used for requesting media permissions. At least one of "
                                },
                                {
                                    "kind": "code",
                                    "text": "`audio`"
                                },
                                {
                                    "kind": "text",
                                    "text": " or "
                                },
                                {
                                    "kind": "code",
                                    "text": "`video`"
                                },
                                {
                                    "kind": "text",
                                    "text": " must be set to "
                                },
                                {
                                    "kind": "code",
                                    "text": "`true`"
                                },
                                {
                                    "kind": "text",
                                    "text": "."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 2577,
                            "name": "MediaPermissionOptions",
                            "package": "@casual-simulation/aux-common",
                            "id": 2577,
                            "qualifiedName": "MediaPermssionOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Gets permission from user to access audio and/or video streams from the device.\r\n\r\nReturns a promise that resolves if the user grants the specified media permission(s).\r\nIf the user blocks permission or has previously blocked permission or any other problem occurs, an error will be thrown.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nGet permission for the device's microphone.\r\ntry {\r\n    await os.getMediaPermission({ audio: true });\r\n} catch (e) {\r\n    console.error('Could not get permission for microphone:', e);\r\n}\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nGet permission for the device's microphone and camera.\r\ntry {\r\n    await os.getMediaPermission({ audio: true, video: true });\r\n} catch (e) {\r\n    console.error('Could not get permission for microphone and/or camera:', e);\r\n}\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.getMediaPermission"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1061,
            "order": 9999,
            "name": "os.log",
            "reflection": {
                "id": 1061,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Logs the given data to the developer console."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nLog \"Hello, World!\" to the browser developer console.\r\nos.log(\"Hello, World!\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.log"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7627,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L7627"
                    }
                ],
                "parameters": [
                    {
                        "id": 1062,
                        "name": "args",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the data that should be logged."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "intrinsic",
                                "name": "any"
                            }
                        }
                    }
                ],
                "type": {
                    "type": "intrinsic",
                    "name": "void"
                }
            },
            "comment": {
                "text": "Logs the given data to the developer console.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nLog \"Hello, World!\" to the browser developer console.\r\nos.log(\"Hello, World!\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.log"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 775,
            "order": 9999,
            "name": "os.run",
            "reflection": {
                "id": 775,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Runs the given script.\r\nThe script will be executed in a separate environment with no "
                        },
                        {
                            "kind": "code",
                            "text": "`bot`"
                        },
                        {
                            "kind": "text",
                            "text": ", "
                        },
                        {
                            "kind": "code",
                            "text": "`tags`"
                        },
                        {
                            "kind": "text",
                            "text": ", "
                        },
                        {
                            "kind": "code",
                            "text": "`this`"
                        },
                        {
                            "kind": "text",
                            "text": ", "
                        },
                        {
                            "kind": "code",
                            "text": "`thisBot`"
                        },
                        {
                            "kind": "text",
                            "text": ", "
                        },
                        {
                            "kind": "code",
                            "text": "`data`"
                        },
                        {
                            "kind": "text",
                            "text": ", and "
                        },
                        {
                            "kind": "code",
                            "text": "`that`"
                        },
                        {
                            "kind": "text",
                            "text": " variables.\r\nThis means that you need to use the "
                        },
                        {
                            "kind": "text",
                            "text": "[`getBot(...filters)`](ref:getbot-filters)"
                        },
                        {
                            "kind": "text",
                            "text": " or "
                        },
                        {
                            "kind": "text",
                            "text": "[`getBots(...filters)`](ref:getbots-filters)"
                        },
                        {
                            "kind": "text",
                            "text": " functions to read bot data.\r\n\r\nReturns a promise that resolves with the returned script value after it has been executed."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nRun a script that says \"hello\".\r\nos.run(\"os.toast('hello');\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nRun a script from the #script tag on the current bot.\r\nos.run(tags.script);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nRun a script and toast the result.\r\nconst result = await os.run(\"return 594 + 391\");\r\nos.toast(result);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.run"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5579,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5579"
                    }
                ],
                "parameters": [
                    {
                        "id": 776,
                        "name": "script",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "The script that should be executed."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "any"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Runs the given script.\r\nThe script will be executed in a separate environment with no `bot`, `tags`, `this`, `thisBot`, `data`, and `that` variables.\r\nThis means that you need to use the getbot-filters or getbots-filters functions to read bot data.\r\n\r\nReturns a promise that resolves with the returned script value after it has been executed.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nRun a script that says \"hello\".\r\nos.run(\"os.toast('hello');\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nRun a script from the #script tag on the current bot.\r\nos.run(tags.script);\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nRun a script and toast the result.\r\nconst result = await os.run(\"return 594 + 391\");\r\nos.toast(result);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.run"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 718,
            "order": 9999,
            "name": "os.setClipboard",
            "reflection": {
                "id": 718,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Copies the given text to the player's clipboard. On Chrome and Firefox, this will act like a "
                        },
                        {
                            "kind": "code",
                            "text": "`Ctrl+C`"
                        },
                        {
                            "kind": "text",
                            "text": "/"
                        },
                        {
                            "kind": "code",
                            "text": "`Cmd+C`"
                        },
                        {
                            "kind": "text",
                            "text": ".\r\nOn Safari and all iOS browsers this will open a popup which prompts the player to copy the text."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nCopy \"hello\" to the player's clipboard.\r\nos.setClipboard(\"hello\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.setClipboard"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5264,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5264"
                    }
                ],
                "parameters": [
                    {
                        "id": 719,
                        "name": "text",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the text that should be copied to the player's clipboard."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "../src/aux-common/bots/BotEvents.ts",
                        "qualifiedName": "SetClipboardAction"
                    },
                    "name": "SetClipboardAction",
                    "package": "@casual-simulation/aux-common"
                }
            },
            "comment": {
                "text": "Copies the given text to the player's clipboard. On Chrome and Firefox, this will act like a `Ctrl+C`/`Cmd+C`.\r\nOn Safari and all iOS browsers this will open a popup which prompts the player to copy the text.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nCopy \"hello\" to the player's clipboard.\r\nos.setClipboard(\"hello\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.setClipboard"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 1028,
            "order": 9999,
            "name": "os.share",
            "reflection": {
                "id": 1028,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Shares the given URL or text via the device's social share capabilities. Returns a Promise that resolves when sharing has succeeded or failed."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShare a URL.\r\nos.share({\r\n    url: 'https://example.com'\r\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShare some text.\r\nos.share({\r\n    text: 'abcdefghijklmnopqrstuvwxyz'\r\n});\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.share"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 7258,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L7258"
                    }
                ],
                "parameters": [
                    {
                        "id": 1029,
                        "name": "options",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the options for sharing."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "reference",
                            "target": 2536,
                            "name": "ShareOptions",
                            "package": "@casual-simulation/aux-common",
                            "id": 2536,
                            "qualifiedName": "ShareOptions"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Shares the given URL or text via the device's social share capabilities. Returns a Promise that resolves when sharing has succeeded or failed.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShare a URL.\r\nos.share({\r\n    url: 'https://example.com'\r\n});\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShare some text.\r\nos.share({\r\n    text: 'abcdefghijklmnopqrstuvwxyz'\r\n});\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.share"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 680,
            "order": 9999,
            "name": "os.sleep",
            "reflection": {
                "id": 680,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Waits the amount of time provided, in [miliseconds](https://en.wikipedia.org/wiki/Millisecond).\r\n\r\nReturns a promise that resolves when the time has been waited."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nWait 2 seconds before proceeding.\r\nos.toast(\"Stop!\");\r\nawait os.sleep(2000);\r\nos.toast(\"Hammer Time!\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.sleep"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 10131,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L10131"
                    }
                ],
                "parameters": [
                    {
                        "id": 681,
                        "name": "time",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the Time to wait in ms. 1 second is 1000 ms."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "node_modules/typescript/lib/lib.es5.d.ts",
                        "qualifiedName": "Promise"
                    },
                    "typeArguments": [
                        {
                            "type": "intrinsic",
                            "name": "void"
                        }
                    ],
                    "name": "Promise",
                    "package": "typescript"
                }
            },
            "comment": {
                "text": "Waits the amount of time provided, in [miliseconds](https://en.wikipedia.org/wiki/Millisecond).\r\n\r\nReturns a promise that resolves when the time has been waited.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nWait 2 seconds before proceeding.\r\nos.toast(\"Stop!\");\r\nawait os.sleep(2000);\r\nos.toast(\"Hammer Time!\");\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.sleep"
                    }
                ]
            },
            "group": null
        },
        {
            "id": 684,
            "order": 9999,
            "name": "os.toast",
            "reflection": {
                "id": 684,
                "name": "__type",
                "variant": "signature",
                "kind": 4096,
                "flags": {},
                "comment": {
                    "summary": [
                        {
                            "kind": "text",
                            "text": "Shows a temporary \"toast\" notification to the player at the bottom of the screen with the given message.\r\nOptionally accepts a duration parameter which is the number of seconds that the message should be on the screen."
                        }
                    ],
                    "blockTags": [
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow a \"Hello!\" toast message.\r\nos.toast(\"Hello!\");\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@example",
                            "content": [
                                {
                                    "kind": "code",
                                    "text": "```ts\nShow the player a code for 5 seconds.\r\nos.toast(\"this is the code\", 5);\n```"
                                }
                            ]
                        },
                        {
                            "tag": "@dochash",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "actions/os"
                                }
                            ]
                        },
                        {
                            "tag": "@docname",
                            "content": [
                                {
                                    "kind": "text",
                                    "text": "os.toast"
                                }
                            ]
                        }
                    ]
                },
                "sources": [
                    {
                        "fileName": "src/aux-runtime/runtime/AuxLibrary.ts",
                        "line": 5072,
                        "character": 13,
                        "url": "https://github.com/KallynGowdy/casualos/blob/a2794eb9f/src/aux-runtime/runtime/AuxLibrary.ts#L5072"
                    }
                ],
                "parameters": [
                    {
                        "id": 685,
                        "name": "message",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the text that the toast message should show."
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "intrinsic",
                                    "name": "number"
                                },
                                {
                                    "type": "intrinsic",
                                    "name": "boolean"
                                },
                                {
                                    "type": "intrinsic",
                                    "name": "object"
                                },
                                {
                                    "type": "array",
                                    "elementType": {
                                        "type": "intrinsic",
                                        "name": "any"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "id": 686,
                        "name": "duration",
                        "variant": "param",
                        "kind": 32768,
                        "flags": {},
                        "comment": {
                            "summary": [
                                {
                                    "kind": "text",
                                    "text": "the number of seconds that the message should be on the screen. (Default is 2)"
                                }
                            ],
                            "blockTags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        },
                        "defaultValue": "2"
                    }
                ],
                "type": {
                    "type": "reference",
                    "target": {
                        "sourceFileName": "../src/aux-common/bots/BotEvents.ts",
                        "qualifiedName": "ShowToastAction"
                    },
                    "name": "ShowToastAction",
                    "package": "@casual-simulation/aux-common"
                }
            },
            "comment": {
                "text": "Shows a temporary \"toast\" notification to the player at the bottom of the screen with the given message.\r\nOptionally accepts a duration parameter which is the number of seconds that the message should be on the screen.",
                "tags": [
                    {
                        "tagName": "example",
                        "text": "```ts\nShow a \"Hello!\" toast message.\r\nos.toast(\"Hello!\");\n```"
                    },
                    {
                        "tagName": "example",
                        "text": "```ts\nShow the player a code for 5 seconds.\r\nos.toast(\"this is the code\", 5);\n```"
                    },
                    {
                        "tagName": "dochash",
                        "text": "actions/os"
                    },
                    {
                        "tagName": "docname",
                        "text": "os.toast"
                    }
                ]
            },
            "group": null
        }
    ],
    "references": {
        "CasualOSError": "types/error",
        "id-2889": "CasualOSError",
        "Quaternion": "types/math/rotations",
        "id-127": "Quaternion",
        "Rotation": "types/math/rotations",
        "id-154": "Rotation",
        "Vector2": "types/math/vectors",
        "id-1": "Vector2",
        "Vector3": "types/math/vectors",
        "id-58": "Vector3",
        "AIChatMessage": "types/ai",
        "id-2908": "AIChatMessage",
        "AIChatOptions": "types/ai",
        "id-2678": "AIChatOptions",
        "AIGenerateImageSuccess": "types/ai",
        "id-2478": "AIGenerateImageSuccess",
        "AIGenerateImageOptions": "types/ai",
        "id-2692": "AIGenerateImageOptions",
        "AIGenerateSkyboxOptions": "types/ai",
        "id-2688": "AIGenerateSkyboxOptions",
        "AIGenerateSkyboxRequest": "types/ai",
        "id-2471": "AIGenerateSkyboxRequest",
        "AIGenerateSkyboxResult": "types/ai",
        "id-2475": "AIGenerateSkyboxResult",
        "AIGeneratedImage": "types/ai",
        "id-2481": "AIGeneratedImage",
        "AddCountFailure": "types/records/events",
        "id-3093": "AddCountFailure",
        "AddCountSuccess": "types/records/events",
        "id-3088": "AddCountSuccess",
        "AnimateTagOptions": "types/animation",
        "id-2075": "AnimateTagOptions",
        "AttachDebuggerOptions": "types/debuggers/common",
        "id-2451": "AttachDebuggerOptions",
        "CasualOSDevice": "types/os",
        "id-2876": "CasualOSDevice",
        "CasualOSVersion": "types/os",
        "id-2868": "CasualOSVersion",
        "AxisAndAngle": "types/math/rotations",
        "id-200": "AxisAndAngle",
        "BotTagMasks": "types/core",
        "id-2845": "BotTagMasks",
        "BotTags": "types/core",
        "id-2760": "BotTags",
        "BotState": "types/core",
        "id-2858": "BotState",
        "CompiledBotListeners": "types/core",
        "id-2839": "CompiledBotListeners",
        "ConvertGeolocationToWhat3WordsOptions": "types/os",
        "id-2506": "ConvertGeolocationToWhat3WordsOptions",
        "CreatePublicRecordKeyFailure": "types/records/key",
        "id-3030": "CreatePublicRecordKeyFailure",
        "CreatePublicRecordKeySuccess": "types/records/key",
        "id-3026": "CreatePublicRecordKeySuccess",
        "DebuggerCallFrame": "types/debuggers/common",
        "id-2404": "DebuggerCallFrame",
        "DebuggerFunctionLocation": "types/debuggers/common",
        "id-2439": "DebuggerFunctionLocation",
        "DebuggerPause": "types/debuggers/common",
        "id-2433": "DebuggerPause",
        "DebuggerTagMaskUpdate": "types/debuggers/common",
        "id-2412": "DebuggerTagMaskUpdate",
        "DebuggerTagUpdate": "types/debuggers/common",
        "id-2418": "DebuggerTagUpdate",
        "DebuggerVariable": "types/debuggers/common",
        "id-2445": "DebuggerVariable",
        "Easing": "types/animation",
        "id-2488": "Easing",
        "EnableCollaborationAction": "types/os",
        "id-2636": "EnableCollaborationAction",
        "EnableXROptions": "types/os",
        "id-2580": "EnableXROptions",
        "EraseDataFailure": "types/records/data",
        "id-3064": "EraseDataFailure",
        "EraseDataSuccess": "types/records/data",
        "id-3060": "EraseDataSuccess",
        "EraseFileFailure": "types/records/files",
        "id-3083": "EraseFileFailure",
        "EraseFileSuccess": "types/records/files",
        "id-3079": "EraseFileSuccess",
        "EulerAnglesRotation": "types/math/rotations",
        "id-203": "EulerAnglesRotation",
        "FocusOnOptions": "types/os",
        "id-2540": "FocusOnOptions",
        "FocusOnRotation": "types/os",
        "id-2552": "FocusOnRotation",
        "FormAnimationData": "types/os",
        "id-2598": "FormAnimationData",
        "FromToRotation": "types/math/rotations",
        "id-197": "FromToRotation",
        "GenericError": "types/error",
        "id-2886": "GenericError",
        "GetCountFailure": "types/records/events",
        "id-3104": "GetCountFailure",
        "GetCountSuccess": "types/records/events",
        "id-3098": "GetCountSuccess",
        "GetDataFailure": "types/records/data",
        "id-3055": "GetDataFailure",
        "GetDataSuccess": "types/records/data",
        "id-3046": "GetDataSuccess",
        "GetRoomOptionsFailure": "types/os",
        "id-2166": "GetRoomOptionsFailure",
        "GetRoomOptionsSuccess": "types/os",
        "id-2162": "GetRoomOptionsSuccess",
        "GetRoomRemoteOptionsFailure": "types/os",
        "id-2209": "GetRoomRemoteOptionsFailure",
        "GetRoomRemoteOptionsSuccess": "types/os",
        "id-2204": "GetRoomRemoteOptionsSuccess",
        "GetRoomTrackOptionsFailure": "types/os",
        "id-2185": "GetRoomTrackOptionsFailure",
        "GetRoomTrackOptionsSuccess": "types/os",
        "id-2180": "GetRoomTrackOptionsSuccess",
        "GrantMarkerPermissionFailure": "types/records/policies",
        "id-3132": "GrantMarkerPermissionFailure",
        "GrantMarkerPermissionSuccess": "types/records/policies",
        "id-3130": "GrantMarkerPermissionSuccess",
        "GrantRoleFailure": "types/records/roles",
        "id-3118": "GrantRoleFailure",
        "GrantRoleSuccess": "types/records/roles",
        "id-3116": "GrantRoleSuccess",
        "ImageClassifierOptions": "types/os",
        "id-2558": "ImageClassifierOptions",
        "InstUpdate": "types/os",
        "id-2882": "InstUpdate",
        "JoinRoomFailure": "types/os",
        "id-2147": "JoinRoomFailure",
        "JoinRoomSuccess": "types/os",
        "id-2144": "JoinRoomSuccess",
        "LeaveRoomFailure": "types/os",
        "id-2156": "LeaveRoomFailure",
        "LeaveRoomSuccess": "types/os",
        "id-2153": "LeaveRoomSuccess",
        "ListDataFailure": "types/records/data",
        "id-3074": "ListDataFailure",
        "ListDataSuccess": "types/records/data",
        "id-3069": "ListDataSuccess",
        "ListStudiosFailure": "types/records/studios",
        "id-3147": "ListStudiosFailure",
        "ListStudiosSuccess": "types/records/studios",
        "id-3144": "ListStudiosSuccess",
        "ListedStudio": "types/records/studios",
        "id-3151": "ListedStudio",
        "LookRotation": "types/math/rotations",
        "id-211": "LookRotation",
        "MediaPermissionOptions": "types/os",
        "id-2577": "MediaPermissionOptions",
        "Debugger": "types/debuggers/debugger",
        "id-2216": "Debugger",
        "NormalDebuggerOptions": "types/debuggers/common",
        "id-2423": "NormalDebuggerOptions",
        "PhotoCameraOptions": "types/camera",
        "id-2620": "PhotoCameraOptions",
        "ParsedBotLink": "types/core",
        "id-2864": "ParsedBotLink",
        "PartialBotState": "types/core",
        "id-2861": "PartialBotState",
        "PausableDebugger": "types/debuggers/pausable-debugger",
        "id-2272": "PausableDebugger",
        "PausableDebuggerOptions": "types/debuggers/common",
        "id-2428": "PausableDebuggerOptions",
        "PauseTrigger": "types/debuggers/common",
        "id-2391": "PauseTrigger",
        "PauseTriggerOptions": "types/debuggers/common",
        "id-2399": "PauseTriggerOptions",
        "Photo": "types/camera",
        "id-2632": "Photo",
        "PossiblePauseTriggerLocation": "types/debuggers/common",
        "id-2386": "PossiblePauseTriggerLocation",
        "PseudoRandomNumberGenerator": "types/core",
        "id-2460": "PseudoRandomNumberGenerator",
        "QuaternionRotation": "types/math/rotations",
        "id-215": "QuaternionRotation",
        "RaycastRay": "types/os",
        "id-2140": "RaycastRay",
        "RaycastResult": "types/os",
        "id-2137": "RaycastResult",
        "RecordActionOptions": "types/records/extra",
        "id-2641": "RecordActionOptions",
        "RecordDataFailure": "types/records/data",
        "id-3040": "RecordDataFailure",
        "RecordDataSuccess": "types/records/data",
        "id-3036": "RecordDataSuccess",
        "RecordFileFailure": "types/records/files",
        "id-2107": "RecordFileFailure",
        "RecordFileSuccess": "types/records/files",
        "id-2103": "RecordFileSuccess",
        "RecordedFile": "types/experimental",
        "id-2607": "RecordedFile",
        "Recording": "types/experimental",
        "id-2605": "Recording",
        "RecordingOptions": "types/experimental",
        "id-2612": "RecordingOptions",
        "RegisterPrefixOptions": "types/core",
        "id-2602": "RegisterPrefixOptions",
        "RevokeMarkerPermissionFailure": "types/records/policies",
        "id-3139": "RevokeMarkerPermissionFailure",
        "RevokeMarkerPermissionSuccess": "types/records/policies",
        "id-3137": "RevokeMarkerPermissionSuccess",
        "RevokeRoleFailure": "types/records/roles",
        "id-3125": "RevokeRoleFailure",
        "RevokeRoleSuccess": "types/records/roles",
        "id-3123": "RevokeRoleSuccess",
        "RoomJoinOptions": "types/os",
        "id-2644": "RoomJoinOptions",
        "RoomOptions": "types/os",
        "id-2653": "RoomOptions",
        "RoomRemoteOptions": "types/os",
        "id-2669": "RoomRemoteOptions",
        "RoomTrackOptions": "types/os",
        "id-2657": "RoomTrackOptions",
        "RuntimeBot": "types/core",
        "id-2705": "RuntimeBot",
        "RuntimeBotLinks": "types/core",
        "id-2851": "RuntimeBotLinks",
        "RuntimeBotVars": "types/core",
        "id-2848": "RuntimeBotVars",
        "SequenceRotation": "types/math/rotations",
        "id-222": "SequenceRotation",
        "SetRoomOptionsSuccess": "types/os",
        "id-2171": "SetRoomOptionsSuccess",
        "SetRoomTrackOptions": "types/os",
        "id-2675": "SetRoomTrackOptions",
        "SetRoomTrackOptionsFailure": "types/os",
        "id-2197": "SetRoomTrackOptionsFailure",
        "SetRoomTrackOptionsSuccess": "types/os",
        "id-2192": "SetRoomTrackOptionsSuccess",
        "ShareOptions": "types/os",
        "id-2536": "ShareOptions",
        "ShowChatOptions": "types/os",
        "id-2530": "ShowChatOptions",
        "ShowConfirmOptions": "types/os",
        "id-2572": "ShowConfirmOptions",
        "ShowInputOptions": "types/os",
        "id-2563": "ShowInputOptions",
        "SnapAxis": "types/os",
        "id-2510": "SnapAxis",
        "SnapGridTarget": "types/os",
        "id-2112": "SnapGridTarget",
        "SnapPoint": "types/os",
        "id-2522": "SnapPoint",
        "SpeakTextOptions": "types/experimental",
        "id-2456": "SpeakTextOptions",
        "StartFormAnimationOptions": "types/os",
        "id-2582": "StartFormAnimationOptions",
        "StopFormAnimationOptions": "types/os",
        "id-2595": "StopFormAnimationOptions",
        "SuccessfulGeolocation": "types/os",
        "id-2492": "SuccessfulGeolocation",
        "SyntheticVoice": "types/experimental",
        "id-2616": "SyntheticVoice",
        "TweenOptions": "types/experimental",
        "id-2453": "TweenOptions",
        "UnsuccessfulGeolocation": "types/os",
        "id-2502": "UnsuccessfulGeolocation",
        "UpdateEventRecordFailure": "types/records/events",
        "id-3111": "UpdateEventRecordFailure",
        "UpdateEventRecordSuccess": "types/records/events",
        "id-3109": "UpdateEventRecordSuccess",
        "UploadedFile": "types/os",
        "id-2133": "UploadedFile",
        "WebhookOptions": "types/web",
        "id-2056": "WebhookOptions",
        "WebhookResult": "types/web",
        "id-2068": "WebhookResult",
        "AddCountResult": "types/records/events",
        "id-3087": "AddCountResult",
        "AvailablePermissions": "types/permissions",
        "id-2914": "AvailablePermissions",
        "BarcodeFormat": "types/os",
        "id-2557": "BarcodeFormat",
        "BotFilter": "types/core",
        "id-2090": "BotFilter",
        "BotSpace": "types/core",
        "id-2835": "BotSpace",
        "CameraType": "types/os",
        "id-2556": "CameraType",
        "CreatePublicRecordKeyResult": "types/records/key",
        "id-3025": "CreatePublicRecordKeyResult",
        "EaseMode": "types/animation",
        "id-2487": "EaseMode",
        "EaseType": "types/animation",
        "id-2486": "EaseType",
        "EraseDataResult": "types/records/data",
        "id-3059": "EraseDataResult",
        "EraseFileResult": "types/records/files",
        "id-3078": "EraseFileResult",
        "Geolocation": "types/os",
        "id-2491": "Geolocation",
        "GetCountResult": "types/records/events",
        "id-3097": "GetCountResult",
        "GetDataResult": "types/records/data",
        "id-3045": "GetDataResult",
        "GetRoomOptionsResult": "types/os",
        "id-2161": "GetRoomOptionsResult",
        "GetRoomRemoteOptionsResult": "types/os",
        "id-2203": "GetRoomRemoteOptionsResult",
        "GetRoomTrackOptionsResult": "types/os",
        "id-2179": "GetRoomTrackOptionsResult",
        "GrantMarkerPermissionResult": "types/records/policies",
        "id-3129": "GrantMarkerPermissionResult",
        "GrantRoleResult": "types/records/roles",
        "id-3115": "GrantRoleResult",
        "JoinRoomResult": "types/os",
        "id-2143": "JoinRoomResult",
        "LeaveRoomResult": "types/os",
        "id-2152": "LeaveRoomResult",
        "ListDataResult": "types/records/data",
        "id-3068": "ListDataResult",
        "ListStudiosResult": "types/records/studios",
        "id-3143": "ListStudiosResult",
        "Mod": "types/core",
        "id-2085": "Mod",
        "PortalType": "types/core",
        "id-2867": "PortalType",
        "PossiblePauseTriggerStates": "types/debuggers/common",
        "id-2390": "PossiblePauseTriggerStates",
        "RecordDataResult": "types/records/data",
        "id-3035": "RecordDataResult",
        "RecordFileResult": "types/records/files",
        "id-2102": "RecordFileResult",
        "RevokeMarkerPermissionResult": "types/records/policies",
        "id-3136": "RevokeMarkerPermissionResult",
        "RevokeRoleResult": "types/records/roles",
        "id-3122": "RevokeRoleResult",
        "SetRoomOptionsResult": "types/os",
        "id-2170": "SetRoomOptionsResult",
        "SetRoomTrackOptionsResult": "types/os",
        "id-2191": "SetRoomTrackOptionsResult",
        "SnapTarget": "types/os",
        "id-2529": "SnapTarget",
        "TagFilter": "types/core",
        "id-2086": "TagFilter",
        "UpdateEventRecordResult": "types/records/events",
        "id-3108": "UpdateEventRecordResult",
        "animateTag-byOptions": "actions/utility",
        "id-591": "animateTag-byOptions",
        "getbot-tag": "actions/data",
        "id-256": "getbot-tag",
        "getbots-tag": "actions/data",
        "id-240": "getbots-tag",
        "animateTag-byTag": "actions/utility",
        "id-585": "animateTag-byTag",
        "changeState": "actions/data",
        "id-401": "changeState",
        "create": "actions/data",
        "id-385": "create",
        "destroy": "actions/data",
        "id-389": "destroy",
        "getbot-filters": "actions/data",
        "id-249": "getbot-filters",
        "getbots-filters": "actions/data",
        "id-233": "getbots-filters",
        "priorityShout": "actions/event",
        "id-450": "priorityShout",
        "shout": "actions/event",
        "id-463": "shout",
        "updateBotLinks": "actions/data",
        "id-423": "updateBotLinks",
        "whisper": "actions/event",
        "id-489": "whisper",
        "action.perform": "actions/event",
        "id-1591": "action.perform",
        "action.reject": "actions/event",
        "id-1595": "action.reject",
        "ai.chat-string": "actions/ai",
        "id-650": "ai.chat-string",
        "ai.chat-message": "actions/ai",
        "id-653": "ai.chat-message",
        "ai.chat-messages": "actions/ai",
        "id-656": "ai.chat-messages",
        "ai.generateImage-string": "actions/ai",
        "id-669": "ai.generateImage-string",
        "ai.generateImage-request": "actions/ai",
        "id-673": "ai.generateImage-request",
        "ai.generateSkybox-string": "actions/ai",
        "id-661": "ai.generateSkybox-string",
        "ai.generateSkybox-request": "actions/ai",
        "id-665": "ai.generateSkybox-request",
        "applyDiffToSnapshot": "actions/data",
        "id-306": "applyDiffToSnapshot",
        "applyMod": "actions/mods",
        "id-375": "applyMod",
        "assert": "actions/debuggers",
        "id-634": "assert",
        "assertEqual": "actions/debuggers",
        "id-639": "assertEqual",
        "atPosition": "actions/bot-filters",
        "id-520": "atPosition",
        "byCreator": "actions/bot-filters",
        "id-541": "byCreator",
        "byID": "actions/bot-filters",
        "id-508": "byID",
        "byMod": "actions/bot-filters",
        "id-512": "byMod",
        "bySpace": "actions/bot-filters",
        "id-537": "bySpace",
        "byTag": "actions/bot-filters",
        "id-503": "byTag",
        "bytes.fromBase64String": "actions/bytes",
        "id-1804": "bytes.fromBase64String",
        "bytes.fromBase64Url": "actions/bytes",
        "id-1821": "bytes.fromBase64Url",
        "bytes.fromHexString": "actions/bytes",
        "id-1812": "bytes.fromHexString",
        "bytes.toBase64String": "actions/bytes",
        "id-1800": "bytes.toBase64String",
        "bytes.toBase64Url": "actions/bytes",
        "id-1816": "bytes.toBase64Url",
        "bytes.toHexString": "actions/bytes",
        "id-1808": "bytes.toHexString",
        "clearAnimations": "actions/utility",
        "id-605": "clearAnimations",
        "clearTagMasks": "actions/data",
        "id-329": "clearTagMasks",
        "crypto.hash-raw": "actions/crypto",
        "id-1827": "crypto.hash-raw",
        "crypto.hash-string": "actions/crypto",
        "id-1833": "crypto.hash-string",
        "crypto.hmac-raw": "actions/crypto",
        "id-1864": "crypto.hmac-raw",
        "crypto.hmac-string": "actions/crypto",
        "id-1857": "crypto.hmac-string",
        "crypto.asymmetric.decrypt": "actions/crypto",
        "id-1922": "crypto.asymmetric.decrypt",
        "crypto.asymmetric.encrypt": "actions/crypto",
        "id-1917": "crypto.asymmetric.encrypt",
        "crypto.asymmetric.isEncrypted": "actions/crypto",
        "id-1928": "crypto.asymmetric.isEncrypted",
        "crypto.asymmetric.isKeypair": "actions/crypto",
        "id-1913": "crypto.asymmetric.isKeypair",
        "crypto.asymmetric.keypair": "actions/crypto",
        "id-1909": "crypto.asymmetric.keypair",
        "crypto.encrypt": "actions/crypto",
        "id-1893": "crypto.encrypt",
        "crypto.hmacSha256": "actions/crypto",
        "id-1883": "crypto.hmacSha256",
        "crypto.hmacSha512": "actions/crypto",
        "id-1888": "crypto.hmacSha512",
        "crypto.isEncrypted": "actions/crypto",
        "id-1903": "crypto.isEncrypted",
        "crypto.keypair": "actions/crypto",
        "id-1932": "crypto.keypair",
        "crypto.sha256": "actions/crypto",
        "id-1849": "crypto.sha256",
        "crypto.sha512": "actions/crypto",
        "id-1853": "crypto.sha512",
        "crypto.sign": "actions/crypto",
        "id-1936": "crypto.sign",
        "deleteTagMaskText": "actions/data",
        "id-356": "deleteTagMaskText",
        "deleteTagText": "actions/data",
        "id-349": "deleteTagText",
        "diffSnapshots": "actions/data",
        "id-301": "diffSnapshots",
        "either": "actions/bot-filters",
        "id-545": "either",
        "os.beginAudioRecording": "actions/audio",
        "id-1638": "os.beginAudioRecording",
        "experiment.beginRecording": "actions/experimental",
        "id-1645": "experiment.beginRecording",
        "os.endAudioRecording": "actions/audio",
        "id-1642": "os.endAudioRecording",
        "experiment.endRecording": "actions/experimental",
        "id-1649": "experiment.endRecording",
        "experiment.getAnchorPointPosition": "actions/experimental",
        "id-1628": "experiment.getAnchorPointPosition",
        "experiment.getVoices": "actions/experimental",
        "id-1657": "experiment.getVoices",
        "experiment.localFormAnimation": "actions/experimental",
        "id-1601": "experiment.localFormAnimation",
        "experiment.localPositionTween": "actions/experimental",
        "id-1606": "experiment.localPositionTween",
        "experiment.localRotationTween": "actions/experimental",
        "id-1617": "experiment.localRotationTween",
        "experiment.speakText": "actions/experimental",
        "id-1652": "experiment.speakText",
        "getBotLinks": "actions/data",
        "id-419": "getBotLinks",
        "getBotPosition": "actions/data",
        "id-275": "getBotPosition",
        "getBotRotation": "actions/data",
        "id-280": "getBotRotation",
        "getBotTagValues": "actions/data",
        "id-265": "getBotTagValues",
        "getFormattedJSON": "actions/data",
        "id-293": "getFormattedJSON",
        "getID": "actions/data",
        "id-285": "getID",
        "getJSON": "actions/data",
        "id-289": "getJSON",
        "getLink": "actions/data",
        "id-415": "getLink",
        "getMod": "actions/mods",
        "id-270": "getMod",
        "getSnapshot": "actions/data",
        "id-297": "getSnapshot",
        "getTag": "actions/data",
        "id-311": "getTag",
        "inDimension": "actions/bot-filters",
        "id-516": "inDimension",
        "inStack": "actions/bot-filters",
        "id-526": "inStack",
        "insertTagMaskText": "actions/data",
        "id-341": "insertTagMaskText",
        "insertTagText": "actions/data",
        "id-334": "insertTagText",
        "math.abs": "actions/math",
        "id-1674": "math.abs",
        "math.addVectors": "actions/math",
        "id-1744": "math.addVectors",
        "math.areClose": "actions/math",
        "id-1775": "math.areClose",
        "math.avg": "actions/math",
        "id-1666": "math.avg",
        "math.degreesToRadians": "actions/math",
        "id-1700": "math.degreesToRadians",
        "math.getAnchorPointOffset": "actions/math",
        "id-1740": "math.getAnchorPointOffset",
        "math.getForwardDirection": "actions/math",
        "id-1708": "math.getForwardDirection",
        "math.getSeededRandomNumberGenerator": "actions/math",
        "id-1682": "math.getSeededRandomNumberGenerator",
        "math.intersectPlane": "actions/math",
        "id-1717": "math.intersectPlane",
        "math.negateVector": "actions/math",
        "id-1754": "math.negateVector",
        "math.normalizeVector": "actions/math",
        "id-1759": "math.normalizeVector",
        "math.radiansToDegrees": "actions/math",
        "id-1704": "math.radiansToDegrees",
        "math.random": "actions/math",
        "id-1695": "math.random",
        "math.randomInt": "actions/math",
        "id-1690": "math.randomInt",
        "math.scaleVector": "actions/math",
        "id-1769": "math.scaleVector",
        "math.setRandomSeed": "actions/math",
        "id-1686": "math.setRandomSeed",
        "math.sqrt": "actions/math",
        "id-1670": "math.sqrt",
        "math.stdDev": "actions/math",
        "id-1678": "math.stdDev",
        "math.subtractVectors": "actions/math",
        "id-1749": "math.subtractVectors",
        "math.sum": "actions/math",
        "id-1662": "math.sum",
        "math.vectorLength": "actions/math",
        "id-1764": "math.vectorLength",
        "neighboring": "actions/bot-filters",
        "id-531": "neighboring",
        "not": "actions/bot-filters",
        "id-552": "not",
        "os.attachDebugger": "actions/debuggers",
        "id-1547": "os.attachDebugger",
        "os.createDebugger-normal": "actions/debuggers",
        "id-1536": "os.createDebugger-normal",
        "os.createDebugger-pausable": "actions/debuggers",
        "id-1540": "os.createDebugger-pausable",
        "os.focusOn-bot": "actions/portals",
        "id-737": "os.focusOn-bot",
        "os.focusOn-position": "actions/portals",
        "id-742": "os.focusOn-position",
        "os.getExecutingDebugger": "actions/debuggers",
        "id-1544": "os.getExecutingDebugger",
        "showChat-options": "actions/os",
        "id-764": "showChat-options",
        "showChat-placeholder": "actions/os",
        "id-760": "showChat-placeholder",
        "os.showInput": "actions/portals",
        "id-983": "os.showInput",
        "os.addBotDropGrid": "actions/portals",
        "id-1053": "os.addBotDropGrid",
        "os.addBotDropSnap": "actions/portals",
        "id-1044": "os.addBotDropSnap",
        "os.addDropGrid": "actions/portals",
        "id-1049": "os.addDropGrid",
        "os.addDropSnap": "actions/portals",
        "id-1040": "os.addDropSnap",
        "os.applyUpdatesToInst": "actions/os",
        "id-1499": "os.applyUpdatesToInst",
        "os.arSupported": "actions/xr",
        "id-808": "os.arSupported",
        "os.bufferFormAddressGLTF": "actions/animations",
        "id-1457": "os.bufferFormAddressGLTF",
        "os.bufferSound": "actions/audio",
        "id-1016": "os.bufferSound",
        "os.calculateRayFromCamera": "actions/portals",
        "id-1452": "os.calculateRayFromCamera",
        "os.cancelSound": "actions/audio",
        "id-1020": "os.cancelSound",
        "os.capturePhoto": "actions/camera",
        "id-903": "os.capturePhoto",
        "os.closeBarcodeScanner": "actions/barcodes",
        "id-881": "os.closeBarcodeScanner",
        "os.closeCircleWipe": "actions/portals",
        "id-1032": "os.closeCircleWipe",
        "os.closeImageClassifier": "actions/image-classification",
        "id-896": "os.closeImageClassifier",
        "os.closePhotoCamera": "actions/camera",
        "id-907": "os.closePhotoCamera",
        "os.closeQRCodeScanner": "actions/barcodes",
        "id-867": "os.closeQRCodeScanner",
        "os.compileApp": "actions/app",
        "id-1167": "os.compileApp",
        "os.convertGeolocationToWhat3Words": "actions/os",
        "id-1437": "os.convertGeolocationToWhat3Words",
        "os.countEvents": "actions/records",
        "id-1427": "os.countEvents",
        "os.createInitializationUpdate": "actions/os",
        "id-1495": "os.createInitializationUpdate",
        "os.device": "actions/os",
        "id-782": "os.device",
        "os.disableAR": "actions/xr",
        "id-798": "os.disableAR",
        "os.disablePointOfView": "actions/portals",
        "id-823": "os.disablePointOfView",
        "os.disableVR": "actions/xr",
        "id-805": "os.disableVR",
        "os.disableWakeLock": "actions/os",
        "id-829": "os.disableWakeLock",
        "os.download": "actions/files",
        "id-835": "os.download",
        "os.downloadBots": "actions/files",
        "id-841": "os.downloadBots",
        "os.downloadBotsAsInitialzationUpdate": "actions/files",
        "id-846": "os.downloadBotsAsInitialzationUpdate",
        "os.downloadInst": "actions/files",
        "id-854": "os.downloadInst",
        "os.enableAR": "actions/xr",
        "id-794": "os.enableAR",
        "os.enableCollaboration": "actions/os",
        "id-788": "os.enableCollaboration",
        "os.enableCustomDragging": "actions/portals",
        "id-1058": "os.enableCustomDragging",
        "os.enablePointOfView": "actions/portals",
        "id-814": "os.enablePointOfView",
        "os.enableVR": "actions/xr",
        "id-801": "os.enableVR",
        "os.eraseData": "actions/records",
        "id-1370": "os.eraseData",
        "os.eraseManualApprovalData": "actions/records",
        "id-1376": "os.eraseManualApprovalData",
        "os.exitFullscreenMode": "actions/portals",
        "id-708": "os.exitFullscreenMode",
        "os.getAverageFrameRate": "actions/os",
        "id-1115": "os.getAverageFrameRate",
        "os.getCameraPosition": "actions/portals",
        "id-1071": "os.getCameraPosition",
        "os.getCameraRotation": "actions/portals",
        "id-1075": "os.getCameraRotation",
        "os.getCurrentDimension": "actions/portals",
        "id-954": "os.getCurrentDimension",
        "os.getCurrentInst": "actions/portals",
        "id-960": "os.getCurrentInst",
        "os.getCurrentInstUpdate": "actions/os",
        "id-1503": "os.getCurrentInstUpdate",
        "os.getData": "actions/records",
        "id-1352": "os.getData",
        "os.getDimensionalDepth": "actions/portals",
        "id-973": "os.getDimensionalDepth",
        "os.getFocusPoint": "actions/portals",
        "id-1083": "os.getFocusPoint",
        "os.getGeolocation": "actions/os",
        "id-1065": "os.getGeolocation",
        "os.getInputList": "actions/portals",
        "id-1108": "os.getInputList",
        "os.getInputState": "actions/portals",
        "id-1103": "os.getInputState",
        "os.getInstStateFromUpdates": "actions/os",
        "id-1491": "os.getInstStateFromUpdates",
        "os.getManualApprovalData": "actions/records",
        "id-1358": "os.getManualApprovalData",
        "os.getMediaPermission": "actions/os",
        "id-1111": "os.getMediaPermission",
        "os.getMenuDimension": "actions/portals",
        "id-963": "os.getMenuDimension",
        "os.getMiniPortalDimension": "actions/portals",
        "id-966": "os.getMiniPortalDimension",
        "os.getPointerDirection": "actions/portals",
        "id-1099": "os.getPointerDirection",
        "os.getPointerPosition": "actions/portals",
        "id-1087": "os.getPointerPosition",
        "os.getPointerRotation": "actions/portals",
        "id-1091": "os.getPointerRotation",
        "os.getPortalDimension": "actions/portals",
        "id-969": "os.getPortalDimension",
        "os.getPublicRecordKey": "actions/records",
        "id-1277": "os.getPublicRecordKey",
        "os.getRoomOptions": "actions/rooms",
        "id-1133": "os.getRoomOptions",
        "os.getRoomRemoteOptions": "actions/rooms",
        "id-1148": "os.getRoomRemoteOptions",
        "os.getRoomTrackOptions": "actions/rooms",
        "id-1137": "os.getRoomTrackOptions",
        "os.getSubjectlessPublicRecordKey": "actions/records",
        "id-1281": "os.getSubjectlessPublicRecordKey",
        "os.getWakeLockConfiguration": "actions/os",
        "id-832": "os.getWakeLockConfiguration",
        "os.goToDimension": "actions/portals",
        "id-997": "os.goToDimension",
        "os.goToURL": "actions/portals",
        "id-1001": "os.goToURL",
        "os.grantInstAdminPermission": "actions/records",
        "id-1299": "os.grantInstAdminPermission",
        "os.grantInstRole": "actions/records",
        "id-1319": "os.grantInstRole",
        "os.grantRecordMarkerPermission": "actions/records",
        "id-1285": "os.grantRecordMarkerPermission",
        "os.grantUserRole": "actions/records",
        "id-1304": "os.grantUserRole",
        "os.hasBotInMiniPortal": "actions/portals",
        "id-1024": "os.hasBotInMiniPortal",
        "os.hideBarcode": "actions/barcodes",
        "id-889": "os.hideBarcode",
        "os.hideChat": "actions/os",
        "id-772": "os.hideChat",
        "os.hideHtml": "actions/os",
        "id-715": "os.hideHtml",
        "os.hideQRCode": "actions/barcodes",
        "id-874": "os.hideQRCode",
        "os.hideTips": "actions/portals",
        "id-696": "os.hideTips",
        "os.importAUX": "actions/files",
        "id-938": "os.importAUX",
        "os.inSheet": "actions/portals",
        "id-1068": "os.inSheet",
        "os.isCollaborative": "actions/os",
        "id-785": "os.isCollaborative",
        "os.isInDimension": "actions/portals",
        "id-950": "os.isInDimension",
        "os.isRecordKey": "actions/records",
        "id-1334": "os.isRecordKey",
        "os.joinRoom": "actions/rooms",
        "id-1118": "os.joinRoom",
        "os.leaveRoom": "actions/rooms",
        "id-1123": "os.leaveRoom",
        "os.listBuiltinTags": "actions/app",
        "id-1268": "os.listBuiltinTags",
        "os.listData": "actions/records",
        "id-1364": "os.listData",
        "os.listFormAnimations": "actions/animations",
        "id-1472": "os.listFormAnimations",
        "os.listInstUpdates": "actions/os",
        "id-1488": "os.listInstUpdates",
        "os.listUserStudios": "actions/records",
        "id-1433": "os.listUserStudios",
        "os.loadInst": "actions/os",
        "id-930": "os.loadInst",
        "os.log": "actions/os",
        "id-1061": "os.log",
        "os.meetCommand": "actions/os",
        "id-1524": "os.meetCommand",
        "os.meetFunction": "actions/os",
        "id-1529": "os.meetFunction",
        "os.openBarcodeScanner": "actions/barcodes",
        "id-877": "os.openBarcodeScanner",
        "os.openCircleWipe": "actions/portals",
        "id-1036": "os.openCircleWipe",
        "os.openDevConsole": "actions/os",
        "id-1009": "os.openDevConsole",
        "os.openImageClassifier": "actions/image-classification",
        "id-892": "os.openImageClassifier",
        "os.openPhotoCamera": "actions/camera",
        "id-899": "os.openPhotoCamera",
        "os.openQRCodeScanner": "actions/barcodes",
        "id-863": "os.openQRCodeScanner",
        "os.openURL": "actions/portals",
        "id-1005": "os.openURL",
        "os.parseBotsFromData": "actions/files",
        "id-942": "os.parseBotsFromData",
        "os.playSound": "actions/audio",
        "id-1012": "os.playSound",
        "os.raycast": "actions/portals",
        "id-1446": "os.raycast",
        "os.raycastFromCamera": "actions/portals",
        "id-1441": "os.raycastFromCamera",
        "os.recordData": "actions/records",
        "id-1338": "os.recordData",
        "os.recordEvent": "actions/records",
        "id-1421": "os.recordEvent",
        "os.recordFile": "actions/records",
        "id-1382": "os.recordFile",
        "os.recordManualApprovalData": "actions/records",
        "id-1345": "os.recordManualApprovalData",
        "os.registerApp": "actions/app",
        "id-1158": "os.registerApp",
        "os.registerTagPrefix": "actions/app",
        "id-1153": "os.registerTagPrefix",
        "os.remoteCount": "actions/os",
        "id-1510": "os.remoteCount",
        "os.remotes": "actions/os",
        "id-1485": "os.remotes",
        "os.replaceDragBot": "actions/portals",
        "id-946": "os.replaceDragBot",
        "os.requestAuthBot": "actions/records",
        "id-1271": "os.requestAuthBot",
        "os.requestAuthBotInBackground": "actions/records",
        "id-1274": "os.requestAuthBotInBackground",
        "os.requestFullscreenMode": "actions/portals",
        "id-705": "os.requestFullscreenMode",
        "os.requestWakeLock": "actions/os",
        "id-826": "os.requestWakeLock",
        "os.revokeInstRole": "actions/records",
        "id-1327": "os.revokeInstRole",
        "os.revokeRecordMarkerPermission": "actions/records",
        "id-1292": "os.revokeRecordMarkerPermission",
        "os.revokeUserRole": "actions/records",
        "id-1312": "os.revokeUserRole",
        "os.run": "actions/os",
        "id-775": "os.run",
        "os.setClipboard": "actions/os",
        "id-718": "os.setClipboard",
        "os.setRoomOptions": "actions/rooms",
        "id-1128": "os.setRoomOptions",
        "os.setRoomTrackOptions": "actions/rooms",
        "id-1142": "os.setRoomTrackOptions",
        "os.share": "actions/os",
        "id-1028": "os.share",
        "os.showBarcode": "actions/barcodes",
        "id-884": "os.showBarcode",
        "os.showConfirm": "actions/portals",
        "id-993": "os.showConfirm",
        "os.showHtml": "actions/os",
        "id-711": "os.showHtml",
        "os.showInputForTag": "actions/portals",
        "id-977": "os.showInputForTag",
        "os.showJoinCode": "actions/barcodes",
        "id-700": "os.showJoinCode",
        "os.showQRCode": "actions/barcodes",
        "id-870": "os.showQRCode",
        "os.showUploadAuxFile": "actions/files",
        "id-857": "os.showUploadAuxFile",
        "os.showUploadFiles": "actions/files",
        "id-860": "os.showUploadFiles",
        "os.sleep": "actions/os",
        "id-680": "os.sleep",
        "os.startFormAnimation": "actions/animations",
        "id-1461": "os.startFormAnimation",
        "os.stopFormAnimation": "actions/animations",
        "id-1467": "os.stopFormAnimation",
        "os.tip": "actions/portals",
        "id-689": "os.tip",
        "os.toast": "actions/os",
        "id-684": "os.toast",
        "os.totalRemoteCount": "actions/os",
        "id-1514": "os.totalRemoteCount",
        "os.unloadInst": "actions/os",
        "id-934": "os.unloadInst",
        "os.unregisterApp": "actions/app",
        "id-1163": "os.unregisterApp",
        "os.version": "actions/os",
        "id-779": "os.version",
        "os.vrSupported": "actions/xr",
        "id-811": "os.vrSupported",
        "os.agreedUponTime": "actions/time",
        "id-911": "os.agreedUponTime",
        "os.deadReckoningTime": "actions/time",
        "id-919": "os.deadReckoningTime",
        "os.instLatency": "actions/time",
        "id-913": "os.instLatency",
        "os.instTimeOffset": "actions/time",
        "id-915": "os.instTimeOffset",
        "os.instTimeOffsetSpread": "actions/time",
        "id-917": "os.instTimeOffsetSpread",
        "os.localTime": "actions/time",
        "id-909": "os.localTime",
        "removeTags": "actions/data",
        "id-364": "removeTags",
        "renameTag": "actions/data",
        "id-369": "renameTag",
        "setTag": "actions/data",
        "id-316": "setTag",
        "setTagMask": "actions/data",
        "id-322": "setTagMask",
        "subtractMods": "actions/mods",
        "id-380": "subtractMods",
        "superShout": "actions/event",
        "id-445": "superShout",
        "uuid": "actions/data",
        "id-582": "uuid",
        "web.get": "actions/web",
        "id-1955": "web.get",
        "web.hook": "actions/web",
        "id-1966": "web.hook",
        "web.post": "actions/web",
        "id-1960": "web.post",
        "configBot": "actions/os",
        "id-645": "configBot"
    }
}