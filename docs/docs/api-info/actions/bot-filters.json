{
    "hash": "actions/bot-filters",
    "pageTitle": "Bot Filters",
    "pageDescription": "Bot Filters are functions that are useful for filtering bots.",
    "pageSidebarLabel": "Bot Filters",
    "contents": [
        {
            "id": 293,
            "order": 9999,
            "name": "atPosition",
            "reflection": {
                "id": 293,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Creates a bot filter that includes bots that are in the given dimension and at the given X and Y position.",
                    "text": "When this filter is used with [`getBots(...filters)`](ref:getbots-filters), the returned bots are sorted in the same order that they are stacked. This means that the first bot in the array is at the bottom of the stack and the last bot is at the top of the stack (assuming they're stackable).\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find all the bots at (1, 2) in the \"test\" dimension.\nlet bots = getBots(atPosition(\"test\", 1, 2));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/bot-filters"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "01-filters"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "atPosition\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 294,
                        "name": "dimension",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the name of the dimension.",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 295,
                        "name": "x",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the X position. That is, the left-right position of the bots in the dimension.",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    },
                    {
                        "id": 296,
                        "name": "y",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the Y position. That is, the forward-backward position of the bots in the dimension.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "number"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 1863,
                    "name": "BotFilter"
                }
            },
            "comment": {
                "shortText": "Creates a bot filter that includes bots that are in the given dimension and at the given X and Y position.",
                "text": "When this filter is used with {@link getbots-filters}, the returned bots are sorted in the same order that they are stacked. This means that the first bot in the array is at the bottom of the stack and the last bot is at the top of the stack (assuming they're stackable).\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find all the bots at (1, 2) in the \"test\" dimension.\nlet bots = getBots(atPosition(\"test\", 1, 2));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/bot-filters"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "01-filters"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "atPosition\n"
                    }
                ]
            },
            "group": "01-filters"
        },
        {
            "id": 314,
            "order": 9999,
            "name": "byCreator",
            "reflection": {
                "id": 314,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Creates a bot filter that includes bots created by the given bot.\nThat is, they have [`#creator`](tags:creator) set to the [`#id`](tags:id) of the given bot.",
                    "text": "> This function behaves exactly like `byTag(\"creator\", getID(bot))`.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find all the bots created by this bot.\nlet bots = getBots(byCreator(thisBot));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/bot-filters"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "01-filters"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "byCreator\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 315,
                        "name": "bot",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the bot that created the other bots.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "intrinsic",
                                    "name": "string"
                                },
                                {
                                    "type": "reference",
                                    "id": 3122,
                                    "name": "Bot"
                                }
                            ]
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 1863,
                    "name": "BotFilter"
                }
            },
            "comment": {
                "shortText": "Creates a bot filter that includes bots created by the given bot.\nThat is, they have {@tag creator} set to the {@tag id} of the given bot.",
                "text": "> This function behaves exactly like `byTag(\"creator\", getID(bot))`.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find all the bots created by this bot.\nlet bots = getBots(byCreator(thisBot));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/bot-filters"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "01-filters"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "byCreator\n"
                    }
                ]
            },
            "group": "01-filters"
        },
        {
            "id": 281,
            "order": 9999,
            "name": "byID",
            "reflection": {
                "id": 281,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Creates a bot filter that includes the bot with the given ID.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find the bot with the ID '123'\nlet bot = getBot(byID(\"123\"));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/bot-filters"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "01-filters"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "byID\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 282,
                        "name": "id",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the ID of the bot.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 1863,
                    "name": "BotFilter"
                }
            },
            "comment": {
                "shortText": "Creates a bot filter that includes the bot with the given ID.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find the bot with the ID '123'\nlet bot = getBot(byID(\"123\"));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/bot-filters"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "01-filters"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "byID\n"
                    }
                ]
            },
            "group": "01-filters"
        },
        {
            "id": 285,
            "order": 9999,
            "name": "byMod",
            "reflection": {
                "id": 285,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Creates a bot filter that includes bots that match the given mod.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find all the bots with #height set to 1 and #color set to red.\nconst bots = getBots(byMod({\n    height: 1,\n    color: \"red\"\n}));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/bot-filters"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "01-filters"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "byMod\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 286,
                        "name": "mod",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the bot or mod that the other bots should match.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 1858,
                            "name": "Mod"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 1863,
                    "name": "BotFilter"
                }
            },
            "comment": {
                "shortText": "Creates a bot filter that includes bots that match the given mod.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find all the bots with #height set to 1 and #color set to red.\nconst bots = getBots(byMod({\n    height: 1,\n    color: \"red\"\n}));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/bot-filters"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "01-filters"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "byMod\n"
                    }
                ]
            },
            "group": "01-filters"
        },
        {
            "id": 310,
            "order": 9999,
            "name": "bySpace",
            "reflection": {
                "id": 310,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Creates a bot filter that includes bots in the given space. That is, they have [`#space`](tags:space) set to the given value.",
                    "text": "> This function behaves exactly like `byTag(\"space\", getID(bot))`.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find all bots in the tempLocal space.\nlet bots = getBots(bySpace(\"tempLocal\"));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/bot-filters"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "01-filters"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "bySpace\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 311,
                        "name": "space",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the space that the bots are in.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 1863,
                    "name": "BotFilter"
                }
            },
            "comment": {
                "shortText": "Creates a bot filter that includes bots in the given space. That is, they have {@tag space} set to the given value.",
                "text": "> This function behaves exactly like `byTag(\"space\", getID(bot))`.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find all bots in the tempLocal space.\nlet bots = getBots(bySpace(\"tempLocal\"));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/bot-filters"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "01-filters"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "bySpace\n"
                    }
                ]
            },
            "group": "01-filters"
        },
        {
            "id": 276,
            "order": 9999,
            "name": "byTag",
            "reflection": {
                "id": 276,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Creates a bot filter that includes bots that have the given tag that matches the given value.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find all the bots with #name set to \"bob\".\nlet bots = getBots(byTag(\"#name\", \"bob\"));\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find all bots with a height larger than 2.\nlet bots = getBots(byTag(\"#height\", height => height > 2));\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find all bots with the \"test\" tag.\nlet bots = getBots(byTag(\"#test\"));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/bot-filters"
                        },
                        {
                            "tag": "doctitle",
                            "paramName": "",
                            "text": "Bot Filters"
                        },
                        {
                            "tag": "docsidebar",
                            "paramName": "",
                            "text": "Bot Filters"
                        },
                        {
                            "tag": "docdescription",
                            "paramName": "",
                            "text": "Bot Filters are functions that are useful for filtering bots."
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "01-filters"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "byTag\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 277,
                        "name": "tag",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the name of the tag. Bots that have this tag will be included as long as they also match the second parameter.",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 278,
                        "name": "filter",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the value that the tag should match. If not specified, then all bots with the tag will be included. If specified, then only bots that have the same tag value will be included. If you specify a function as the value, then it will be used to match tag values.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 1859,
                            "name": "TagFilter"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 1863,
                    "name": "BotFilter"
                }
            },
            "comment": {
                "shortText": "Creates a bot filter that includes bots that have the given tag that matches the given value.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find all the bots with #name set to \"bob\".\nlet bots = getBots(byTag(\"#name\", \"bob\"));\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find all bots with a height larger than 2.\nlet bots = getBots(byTag(\"#height\", height => height > 2));\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find all bots with the \"test\" tag.\nlet bots = getBots(byTag(\"#test\"));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/bot-filters"
                    },
                    {
                        "tagName": "doctitle",
                        "paramName": "",
                        "text": "Bot Filters"
                    },
                    {
                        "tagName": "docsidebar",
                        "paramName": "",
                        "text": "Bot Filters"
                    },
                    {
                        "tagName": "docdescription",
                        "paramName": "",
                        "text": "Bot Filters are functions that are useful for filtering bots."
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "01-filters"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "byTag\n"
                    }
                ]
            },
            "group": "01-filters"
        },
        {
            "id": 318,
            "order": 9999,
            "name": "either",
            "reflection": {
                "id": 318,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Creates a bot filter that includes bots which match any (i.e. one or more) of the given filters.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find all bots with the #name bob or a #height of 2\nconst bots = getBots(\n    either(\n        byTag(\"#name\", \"bob\"),\n        byTag(\"height\", 2)\n    )\n);\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/bot-filters"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "01-filters"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "either\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 319,
                        "name": "filters",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isRest": true
                        },
                        "comment": {
                            "shortText": "the filters that should be used.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "array",
                            "elementType": {
                                "type": "reflection",
                                "declaration": {
                                    "id": 320,
                                    "name": "__type",
                                    "kind": 65536,
                                    "kindString": "Type literal",
                                    "flags": {},
                                    "signatures": [
                                        {
                                            "id": 321,
                                            "name": "__type",
                                            "kind": 4096,
                                            "kindString": "Call signature",
                                            "flags": {},
                                            "parameters": [
                                                {
                                                    "id": 322,
                                                    "name": "bot",
                                                    "kind": 32768,
                                                    "kindString": "Parameter",
                                                    "flags": {},
                                                    "type": {
                                                        "type": "reference",
                                                        "id": 3122,
                                                        "name": "Bot"
                                                    }
                                                }
                                            ],
                                            "type": {
                                                "type": "intrinsic",
                                                "name": "boolean"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 1863,
                    "name": "BotFilter"
                }
            },
            "comment": {
                "shortText": "Creates a bot filter that includes bots which match any (i.e. one or more) of the given filters.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find all bots with the #name bob or a #height of 2\nconst bots = getBots(\n    either(\n        byTag(\"#name\", \"bob\"),\n        byTag(\"height\", 2)\n    )\n);\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/bot-filters"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "01-filters"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "either\n"
                    }
                ]
            },
            "group": "01-filters"
        },
        {
            "id": 289,
            "order": 9999,
            "name": "inDimension",
            "reflection": {
                "id": 289,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Creates a bot filter that includes bots that are in the given dimension. That is, they have the given tag set to true.",
                    "text": "> This function behaves exactly like [`byTag(tag, filter)`](ref:byTag) with the `value` parameter set to `true`.\n",
                    "returns": "A function that returns true if the given bot is in the dimension and false if it is not.\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find all the bots in the \"test\" dimension.\nlet bots = getBots(inDimension(\"test\"));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/bot-filters"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "01-filters"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "inDimension\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 290,
                        "name": "dimension",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the name of the dimension.",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 1863,
                    "name": "BotFilter"
                }
            },
            "comment": {
                "shortText": "Creates a bot filter that includes bots that are in the given dimension. That is, they have the given tag set to true.",
                "text": "> This function behaves exactly like {@link byTag} with the `value` parameter set to `true`.\n",
                "returns": "A function that returns true if the given bot is in the dimension and false if it is not.\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find all the bots in the \"test\" dimension.\nlet bots = getBots(inDimension(\"test\"));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/bot-filters"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "01-filters"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "inDimension\n"
                    }
                ]
            },
            "group": "01-filters"
        },
        {
            "id": 299,
            "order": 9999,
            "name": "inStack",
            "reflection": {
                "id": 299,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Creates a bot filter that includes bots in the same stack as the given bot. The given bot will always be included by this filter as long the given bot is in the given dimension.",
                    "text": "When this filter is used with [`getBots(...filters)`](ref:getbots-filters), the returned bots are sorted in the same order that they are stacked. This means that the first bot in the array is at the bottom of the stack and the last bot is at the top of the stack (assuming they're stackable).\n",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find all bots in the same stack as thisBot in the \"test\" dimension.\nlet bots = getBots(inStack(this, \"test\"));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/bot-filters"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "01-filters"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "inStack\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 300,
                        "name": "bot",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the bot that other bots should be in the same stack with.",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 3122,
                            "name": "Bot"
                        }
                    },
                    {
                        "id": 301,
                        "name": "dimension",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the name of the dimension.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 1863,
                    "name": "BotFilter"
                }
            },
            "comment": {
                "shortText": "Creates a bot filter that includes bots in the same stack as the given bot. The given bot will always be included by this filter as long the given bot is in the given dimension.",
                "text": "When this filter is used with {@link getbots-filters}, the returned bots are sorted in the same order that they are stacked. This means that the first bot in the array is at the bottom of the stack and the last bot is at the top of the stack (assuming they're stackable).\n",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find all bots in the same stack as thisBot in the \"test\" dimension.\nlet bots = getBots(inStack(this, \"test\"));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/bot-filters"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "01-filters"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "inStack\n"
                    }
                ]
            },
            "group": "01-filters"
        },
        {
            "id": 304,
            "order": 9999,
            "name": "neighboring",
            "reflection": {
                "id": 304,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Creates a bot filter that includes bots which are neighboring the given bot. Optionally takes a direction that the neighboring bots must be in.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find all bots in front of this bot in the test dimension.\nconst bots = getBots(neighboring(this, \"test\", \"front\"));\n"
                        },
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find all bots around this bot in the test dimension.\nconst bots = getBots(neighboring(this, \"test\"));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/bot-filters"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "01-filters"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "neighboring\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 305,
                        "name": "bot",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the bot that the other bots need to be neighboring.",
                            "tags": []
                        },
                        "type": {
                            "type": "reference",
                            "id": 3122,
                            "name": "Bot"
                        }
                    },
                    {
                        "id": 306,
                        "name": "dimension",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the dimension that the other bots need to be in.",
                            "tags": []
                        },
                        "type": {
                            "type": "intrinsic",
                            "name": "string"
                        }
                    },
                    {
                        "id": 307,
                        "name": "direction",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {
                            "isOptional": true
                        },
                        "comment": {
                            "shortText": "the neighboring direction to check. If not specified, then all of the supported directions will be checked. Currently, the supported directions are front, right, back, and left. If an unsupported direction is specified, then no bots will be included.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "union",
                            "types": [
                                {
                                    "type": "literal",
                                    "value": "front"
                                },
                                {
                                    "type": "literal",
                                    "value": "left"
                                },
                                {
                                    "type": "literal",
                                    "value": "right"
                                },
                                {
                                    "type": "literal",
                                    "value": "back"
                                }
                            ]
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 1863,
                    "name": "BotFilter"
                }
            },
            "comment": {
                "shortText": "Creates a bot filter that includes bots which are neighboring the given bot. Optionally takes a direction that the neighboring bots must be in.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find all bots in front of this bot in the test dimension.\nconst bots = getBots(neighboring(this, \"test\", \"front\"));\n"
                    },
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find all bots around this bot in the test dimension.\nconst bots = getBots(neighboring(this, \"test\"));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/bot-filters"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "01-filters"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "neighboring\n"
                    }
                ]
            },
            "group": "01-filters"
        },
        {
            "id": 325,
            "order": 9999,
            "name": "not",
            "reflection": {
                "id": 325,
                "name": "__type",
                "kind": 4096,
                "kindString": "Call signature",
                "flags": {},
                "comment": {
                    "shortText": "Creates a function that includes bots which _do not_ match the given filter.",
                    "tags": [
                        {
                            "tag": "example",
                            "paramName": "",
                            "text": "Find all bots that are not in the test dimension\nconst bots = getBots(not(inDimension(\"test\")));\n"
                        },
                        {
                            "tag": "dochash",
                            "paramName": "",
                            "text": "actions/bot-filters"
                        },
                        {
                            "tag": "docgroup",
                            "paramName": "",
                            "text": "01-filters"
                        },
                        {
                            "tag": "docname",
                            "paramName": "",
                            "text": "not\n"
                        }
                    ]
                },
                "parameters": [
                    {
                        "id": 326,
                        "name": "filter",
                        "kind": 32768,
                        "kindString": "Parameter",
                        "flags": {},
                        "comment": {
                            "shortText": "the bot filter whose results should be negated.\n",
                            "tags": []
                        },
                        "type": {
                            "type": "reflection",
                            "declaration": {
                                "id": 327,
                                "name": "__type",
                                "kind": 65536,
                                "kindString": "Type literal",
                                "flags": {},
                                "signatures": [
                                    {
                                        "id": 328,
                                        "name": "__type",
                                        "kind": 4096,
                                        "kindString": "Call signature",
                                        "flags": {},
                                        "parameters": [
                                            {
                                                "id": 329,
                                                "name": "bot",
                                                "kind": 32768,
                                                "kindString": "Parameter",
                                                "flags": {},
                                                "type": {
                                                    "type": "reference",
                                                    "id": 3122,
                                                    "name": "Bot"
                                                }
                                            }
                                        ],
                                        "type": {
                                            "type": "intrinsic",
                                            "name": "boolean"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "type": {
                    "type": "reference",
                    "id": 1863,
                    "name": "BotFilter"
                }
            },
            "comment": {
                "shortText": "Creates a function that includes bots which _do not_ match the given filter.",
                "text": "",
                "tags": [
                    {
                        "tagName": "example",
                        "paramName": "",
                        "text": "Find all bots that are not in the test dimension\nconst bots = getBots(not(inDimension(\"test\")));\n"
                    },
                    {
                        "tagName": "dochash",
                        "paramName": "",
                        "text": "actions/bot-filters"
                    },
                    {
                        "tagName": "docgroup",
                        "paramName": "",
                        "text": "01-filters"
                    },
                    {
                        "tagName": "docname",
                        "paramName": "",
                        "text": "not\n"
                    }
                ]
            },
            "group": "01-filters"
        }
    ],
    "references": {
        "CasualOSError": "types/error",
        "id-3299": "CasualOSError",
        "Quaternion": "types/math/rotations",
        "id-3704": "Quaternion",
        "Rotation": "types/math/rotations",
        "id-3736": "Rotation",
        "Vector2": "types/math/vectors",
        "id-3570": "Vector2",
        "Vector3": "types/math/vectors",
        "id-3627": "Vector3",
        "AIChatMessage": "types/ai",
        "id-3318": "AIChatMessage",
        "AIChatOptions": "types/ai",
        "id-3095": "AIChatOptions",
        "AIGenerateImageSuccess": "types/ai",
        "id-2250": "AIGenerateImageSuccess",
        "AIGenerateImageOptions": "types/ai",
        "id-3109": "AIGenerateImageOptions",
        "AIGenerateSkyboxOptions": "types/ai",
        "id-3105": "AIGenerateSkyboxOptions",
        "AIGenerateSkyboxRequest": "types/ai",
        "id-2243": "AIGenerateSkyboxRequest",
        "AIGenerateSkyboxResult": "types/ai",
        "id-2247": "AIGenerateSkyboxResult",
        "AIGeneratedImage": "types/ai",
        "id-2253": "AIGeneratedImage",
        "ARSupportedAction": "types/os",
        "id-2840": "ARSupportedAction",
        "AddCountFailure": "types/records/events",
        "id-3503": "AddCountFailure",
        "AddCountSuccess": "types/records/events",
        "id-3498": "AddCountSuccess",
        "AddDropSnapAction": "types/os",
        "id-2469": "AddDropSnapAction",
        "AddDropSnapPointsAction": "types/os",
        "id-2473": "AddDropSnapPointsAction",
        "AnalyticsRecordEventAction": "types/os",
        "id-3045": "AnalyticsRecordEventAction",
        "AnimateTagOptions": "types/animation",
        "id-1848": "AnimateTagOptions",
        "AttachDebuggerOptions": "types/debuggers/common",
        "id-2223": "AttachDebuggerOptions",
        "AuthData": "types/os",
        "id-2984": "AuthData",
        "CasualOSDevice": "types/os",
        "id-3286": "CasualOSDevice",
        "CasualOSVersion": "types/os",
        "id-3278": "CasualOSVersion",
        "AxisAndAngle": "types/math/rotations",
        "id-3782": "AxisAndAngle",
        "BeginRecordingAction": "types/os",
        "id-2927": "BeginRecordingAction",
        "BotTagMasks": "types/core",
        "id-3255": "BotTagMasks",
        "BotTags": "types/core",
        "id-3170": "BotTags",
        "BotState": "types/core",
        "id-3268": "BotState",
        "BufferFormAddressGLTFAction": "types/os",
        "id-3052": "BufferFormAddressGLTFAction",
        "BufferSoundAction": "types/os",
        "id-2651": "BufferSoundAction",
        "CalculateRayFromCameraAction": "types/os",
        "id-3025": "CalculateRayFromCameraAction",
        "CancelSoundAction": "types/os",
        "id-2657": "CancelSoundAction",
        "CompiledBotListeners": "types/core",
        "id-3249": "CompiledBotListeners",
        "ConfigureWakeLockAction": "types/os",
        "id-3032": "ConfigureWakeLockAction",
        "ConvertGeolocationToWhat3WordsAction": "types/os",
        "id-2415": "ConvertGeolocationToWhat3WordsAction",
        "ConvertGeolocationToWhat3WordsOptions": "types/os",
        "id-2404": "ConvertGeolocationToWhat3WordsOptions",
        "CreatePublicRecordKeyFailure": "types/records/key",
        "id-3440": "CreatePublicRecordKeyFailure",
        "CreatePublicRecordKeySuccess": "types/records/key",
        "id-3436": "CreatePublicRecordKeySuccess",
        "CustomAppContainerAvailableAction": "types/os",
        "id-2884": "CustomAppContainerAvailableAction",
        "DebuggerCallFrame": "types/debuggers/common",
        "id-2176": "DebuggerCallFrame",
        "DebuggerFunctionLocation": "types/debuggers/common",
        "id-2211": "DebuggerFunctionLocation",
        "DebuggerPause": "types/debuggers/common",
        "id-2205": "DebuggerPause",
        "DebuggerTagMaskUpdate": "types/debuggers/common",
        "id-2184": "DebuggerTagMaskUpdate",
        "DebuggerTagUpdate": "types/debuggers/common",
        "id-2190": "DebuggerTagUpdate",
        "DebuggerVariable": "types/debuggers/common",
        "id-2217": "DebuggerVariable",
        "DefineGlobalBotAction": "types/os",
        "id-2408": "DefineGlobalBotAction",
        "DownloadAction": "types/os",
        "id-2663": "DownloadAction",
        "Easing": "types/animation",
        "id-2386": "Easing",
        "EnableARAction": "types/os",
        "id-2836": "EnableARAction",
        "EnableCollaborationAction": "types/os",
        "id-2795": "EnableCollaborationAction",
        "EnableCustomDraggingAction": "types/os",
        "id-2499": "EnableCustomDraggingAction",
        "EnablePOVAction": "types/os",
        "id-2854": "EnablePOVAction",
        "EnableVRAction": "types/os",
        "id-2850": "EnableVRAction",
        "EnableXROptions": "types/os",
        "id-2706": "EnableXROptions",
        "EndRecordingAction": "types/os",
        "id-2935": "EndRecordingAction",
        "EraseDataFailure": "types/records/data",
        "id-3474": "EraseDataFailure",
        "EraseDataSuccess": "types/records/data",
        "id-3470": "EraseDataSuccess",
        "EraseFileFailure": "types/records/files",
        "id-3493": "EraseFileFailure",
        "EraseFileSuccess": "types/records/files",
        "id-3489": "EraseFileSuccess",
        "EulerAnglesRotation": "types/math/rotations",
        "id-3785": "EulerAnglesRotation",
        "ExitFullscreenAction": "types/os",
        "id-2869": "ExitFullscreenAction",
        "FocusOnOptions": "types/os",
        "id-2453": "FocusOnOptions",
        "FocusOnRotation": "types/os",
        "id-2465": "FocusOnRotation",
        "FormAnimationData": "types/os",
        "id-2751": "FormAnimationData",
        "FromToRotation": "types/math/rotations",
        "id-3779": "FromToRotation",
        "GenericError": "types/error",
        "id-3296": "GenericError",
        "GetAverageFrameRateAction": "types/os",
        "id-3005": "GetAverageFrameRateAction",
        "GetCountFailure": "types/records/events",
        "id-3514": "GetCountFailure",
        "GetCountSuccess": "types/records/events",
        "id-3508": "GetCountSuccess",
        "GetDataFailure": "types/records/data",
        "id-3465": "GetDataFailure",
        "GetDataSuccess": "types/records/data",
        "id-3456": "GetDataSuccess",
        "GetGeolocationAction": "types/os",
        "id-2968": "GetGeolocationAction",
        "GetRoomOptionsFailure": "types/os",
        "id-1938": "GetRoomOptionsFailure",
        "GetRoomOptionsSuccess": "types/os",
        "id-1934": "GetRoomOptionsSuccess",
        "GetRoomRemoteOptionsFailure": "types/os",
        "id-1981": "GetRoomRemoteOptionsFailure",
        "GetRoomRemoteOptionsSuccess": "types/os",
        "id-1976": "GetRoomRemoteOptionsSuccess",
        "GetRoomTrackOptionsFailure": "types/os",
        "id-1957": "GetRoomTrackOptionsFailure",
        "GetRoomTrackOptionsSuccess": "types/os",
        "id-1952": "GetRoomTrackOptionsSuccess",
        "GetVoicesAction": "types/os",
        "id-2963": "GetVoicesAction",
        "GetWakeLockConfigurationAction": "types/os",
        "id-3038": "GetWakeLockConfigurationAction",
        "GoToTagAction": "types/os",
        "id-2973": "GoToTagAction",
        "GrantMarkerPermissionFailure": "types/records/policies",
        "id-3542": "GrantMarkerPermissionFailure",
        "GrantMarkerPermissionSuccess": "types/records/policies",
        "id-3540": "GrantMarkerPermissionSuccess",
        "GrantRoleFailure": "types/records/roles",
        "id-3528": "GrantRoleFailure",
        "GrantRoleSuccess": "types/records/roles",
        "id-3526": "GrantRoleSuccess",
        "HtmlAppEventAction": "types/os",
        "id-2315": "HtmlAppEventAction",
        "HtmlAppMethodCallAction": "types/os",
        "id-2320": "HtmlAppMethodCallAction",
        "ImageClassifierOptions": "types/os",
        "id-2504": "ImageClassifierOptions",
        "InstUpdate": "types/os",
        "id-3292": "InstUpdate",
        "JoinRoomFailure": "types/os",
        "id-1919": "JoinRoomFailure",
        "JoinRoomSuccess": "types/os",
        "id-1916": "JoinRoomSuccess",
        "LeaveRoomFailure": "types/os",
        "id-1928": "LeaveRoomFailure",
        "LeaveRoomSuccess": "types/os",
        "id-1925": "LeaveRoomSuccess",
        "ListDataFailure": "types/records/data",
        "id-3484": "ListDataFailure",
        "ListDataSuccess": "types/records/data",
        "id-3479": "ListDataSuccess",
        "ListFormAnimationsAction": "types/os",
        "id-2755": "ListFormAnimationsAction",
        "ListStudiosFailure": "types/records/studios",
        "id-3557": "ListStudiosFailure",
        "ListStudiosSuccess": "types/records/studios",
        "id-3554": "ListStudiosSuccess",
        "ListedStudio": "types/records/studios",
        "id-3561": "ListedStudio",
        "LoadBotsAction": "types/os",
        "id-2800": "LoadBotsAction",
        "LoadSpaceAction": "types/os",
        "id-2696": "LoadSpaceAction",
        "LocalFormAnimationAction": "types/os",
        "id-2807": "LocalFormAnimationAction",
        "LocalPositionTweenAction": "types/os",
        "id-2821": "LocalPositionTweenAction",
        "LocalTweenAction": "types/os",
        "id-2811": "LocalTweenAction",
        "LookRotation": "types/math/rotations",
        "id-3802": "LookRotation",
        "MediaPermissionAction": "types/os",
        "id-2998": "MediaPermissionAction",
        "MediaPermissionOptions": "types/os",
        "id-2703": "MediaPermissionOptions",
        "MeetCommandAction": "types/os",
        "id-2940": "MeetCommandAction",
        "MeetFunctionAction": "types/os",
        "id-2947": "MeetFunctionAction",
        "Debugger": "types/debuggers/debugger",
        "id-1988": "Debugger",
        "NormalDebuggerOptions": "types/debuggers/common",
        "id-2195": "NormalDebuggerOptions",
        "OpenCircleWipeAction": "types/os",
        "id-2917": "OpenCircleWipeAction",
        "OpenCircleWipeOptions": "types/os",
        "id-2924": "OpenCircleWipeOptions",
        "PhotoCameraOptions": "types/camera",
        "id-2779": "PhotoCameraOptions",
        "OpenURLAction": "types/os",
        "id-2640": "OpenURLAction",
        "ParsedBotLink": "types/core",
        "id-3274": "ParsedBotLink",
        "PartialBotState": "types/core",
        "id-3271": "PartialBotState",
        "PausableDebugger": "types/debuggers/pausable-debugger",
        "id-2044": "PausableDebugger",
        "PausableDebuggerOptions": "types/debuggers/common",
        "id-2200": "PausableDebuggerOptions",
        "PauseTrigger": "types/debuggers/common",
        "id-2163": "PauseTrigger",
        "PauseTriggerOptions": "types/debuggers/common",
        "id-2171": "PauseTriggerOptions",
        "Photo": "types/camera",
        "id-2791": "Photo",
        "PlaySoundAction": "types/os",
        "id-2644": "PlaySoundAction",
        "PossiblePauseTriggerLocation": "types/debuggers/common",
        "id-2158": "PossiblePauseTriggerLocation",
        "PseudoRandomNumberGenerator": "types/core",
        "id-2232": "PseudoRandomNumberGenerator",
        "QuaternionRotation": "types/math/rotations",
        "id-3795": "QuaternionRotation",
        "RaycastFromCameraAction": "types/os",
        "id-3010": "RaycastFromCameraAction",
        "RaycastInPortalAction": "types/os",
        "id-3017": "RaycastInPortalAction",
        "RaycastRay": "types/os",
        "id-1912": "RaycastRay",
        "RaycastResult": "types/os",
        "id-1909": "RaycastResult",
        "RecordActionOptions": "types/records/extra",
        "id-3058": "RecordActionOptions",
        "RecordDataFailure": "types/records/data",
        "id-3450": "RecordDataFailure",
        "RecordDataSuccess": "types/records/data",
        "id-3446": "RecordDataSuccess",
        "RecordFileFailure": "types/records/files",
        "id-1879": "RecordFileFailure",
        "RecordFileSuccess": "types/records/files",
        "id-1875": "RecordFileSuccess",
        "RecordedFile": "types/experimental",
        "id-2766": "RecordedFile",
        "Recording": "types/experimental",
        "id-2764": "Recording",
        "RecordingOptions": "types/experimental",
        "id-2771": "RecordingOptions",
        "RegisterBuiltinPortalAction": "types/os",
        "id-2879": "RegisterBuiltinPortalAction",
        "RegisterCustomAppAction": "types/os",
        "id-2887": "RegisterCustomAppAction",
        "RegisterHtmlAppAction": "types/os",
        "id-2900": "RegisterHtmlAppAction",
        "RegisterPrefixOptions": "types/core",
        "id-2761": "RegisterPrefixOptions",
        "RejectAction": "types/os",
        "id-2669": "RejectAction",
        "RequestAuthDataAction": "types/os",
        "id-2978": "RequestAuthDataAction",
        "RequestFullscreenAction": "types/os",
        "id-2867": "RequestFullscreenAction",
        "RevokeMarkerPermissionFailure": "types/records/policies",
        "id-3549": "RevokeMarkerPermissionFailure",
        "RevokeMarkerPermissionSuccess": "types/records/policies",
        "id-3547": "RevokeMarkerPermissionSuccess",
        "RevokeRoleFailure": "types/records/roles",
        "id-3535": "RevokeRoleFailure",
        "RevokeRoleSuccess": "types/records/roles",
        "id-3533": "RevokeRoleSuccess",
        "RoomJoinOptions": "types/os",
        "id-3061": "RoomJoinOptions",
        "RoomOptions": "types/os",
        "id-3070": "RoomOptions",
        "RoomRemoteOptions": "types/os",
        "id-3086": "RoomRemoteOptions",
        "RoomTrackOptions": "types/os",
        "id-3074": "RoomTrackOptions",
        "RunScriptAction": "types/os",
        "id-2683": "RunScriptAction",
        "RuntimeBot": "types/core",
        "id-3122": "RuntimeBot",
        "RuntimeBotLinks": "types/core",
        "id-3261": "RuntimeBotLinks",
        "RuntimeBotVars": "types/core",
        "id-3258": "RuntimeBotVars",
        "SequenceRotation": "types/math/rotations",
        "id-3793": "SequenceRotation",
        "SerializableMutationRecord": "types/os",
        "id-2329": "SerializableMutationRecord",
        "SetAppOutputAction": "types/os",
        "id-2912": "SetAppOutputAction",
        "SetClipboardAction": "types/os",
        "id-2672": "SetClipboardAction",
        "SetRoomOptionsSuccess": "types/os",
        "id-1943": "SetRoomOptionsSuccess",
        "SetRoomTrackOptions": "types/os",
        "id-3092": "SetRoomTrackOptions",
        "SetRoomTrackOptionsFailure": "types/os",
        "id-1969": "SetRoomTrackOptionsFailure",
        "SetRoomTrackOptionsSuccess": "types/os",
        "id-1964": "SetRoomTrackOptionsSuccess",
        "ShareAction": "types/os",
        "id-2871": "ShareAction",
        "ShareOptions": "types/os",
        "id-2449": "ShareOptions",
        "ShowChatBarAction": "types/os",
        "id-2675": "ShowChatBarAction",
        "ShowChatOptions": "types/os",
        "id-2443": "ShowChatOptions",
        "ShowConfirmAction": "types/os",
        "id-2525": "ShowConfirmAction",
        "ShowConfirmOptions": "types/os",
        "id-2520": "ShowConfirmOptions",
        "ShowInputOptions": "types/os",
        "id-2509": "ShowInputOptions",
        "ShowJoinCodeAction": "types/os",
        "id-2863": "ShowJoinCodeAction",
        "ShowUploadAuxFileAction": "types/os",
        "id-2689": "ShowUploadAuxFileAction",
        "ShowUploadFilesAction": "types/os",
        "id-2691": "ShowUploadFilesAction",
        "SnapAxis": "types/os",
        "id-2423": "SnapAxis",
        "SnapGrid": "types/os",
        "id-2478": "SnapGrid",
        "SnapGridTarget": "types/os",
        "id-1884": "SnapGridTarget",
        "SnapPoint": "types/os",
        "id-2435": "SnapPoint",
        "SpeakTextAction": "types/os",
        "id-2954": "SpeakTextAction",
        "SpeakTextOptions": "types/experimental",
        "id-2228": "SpeakTextOptions",
        "StartFormAnimationAction": "types/os",
        "id-2732": "StartFormAnimationAction",
        "StartFormAnimationOptions": "types/os",
        "id-2708": "StartFormAnimationOptions",
        "StopFormAnimationAction": "types/os",
        "id-2721": "StopFormAnimationAction",
        "StopFormAnimationOptions": "types/os",
        "id-2729": "StopFormAnimationOptions",
        "SuccessfulGeolocation": "types/os",
        "id-2390": "SuccessfulGeolocation",
        "SyntheticVoice": "types/experimental",
        "id-2775": "SyntheticVoice",
        "TweenOptions": "types/experimental",
        "id-2225": "TweenOptions",
        "UnregisterCustomAppAction": "types/os",
        "id-2894": "UnregisterCustomAppAction",
        "UnregisterHtmlAppAction": "types/os",
        "id-2907": "UnregisterHtmlAppAction",
        "UnsuccessfulGeolocation": "types/os",
        "id-2400": "UnsuccessfulGeolocation",
        "UpdateEventRecordFailure": "types/records/events",
        "id-3521": "UpdateEventRecordFailure",
        "UpdateEventRecordSuccess": "types/records/events",
        "id-3519": "UpdateEventRecordSuccess",
        "UpdateHtmlAppAction": "types/os",
        "id-2309": "UpdateHtmlAppAction",
        "UploadedFile": "types/os",
        "id-1905": "UploadedFile",
        "VRSupportedAction": "types/os",
        "id-2845": "VRSupportedAction",
        "WakeLockConfiguration": "types/os",
        "id-3043": "WakeLockConfiguration",
        "WebhookOptions": "types/web",
        "id-1829": "WebhookOptions",
        "WebhookResult": "types/web",
        "id-1841": "WebhookResult",
        "AddCountResult": "types/records/events",
        "id-3497": "AddCountResult",
        "AvailablePermissions": "types/permissions",
        "id-3324": "AvailablePermissions",
        "BarcodeFormat": "types/os",
        "id-2503": "BarcodeFormat",
        "BotFilter": "types/core",
        "id-1863": "BotFilter",
        "BotSpace": "types/core",
        "id-3245": "BotSpace",
        "CameraType": "types/os",
        "id-2502": "CameraType",
        "CreatePublicRecordKeyResult": "types/records/key",
        "id-3435": "CreatePublicRecordKeyResult",
        "CustomAppOutputType": "types/os",
        "id-2882": "CustomAppOutputType",
        "CustomPortalOutputMode": "types/os",
        "id-2883": "CustomPortalOutputMode",
        "EaseMode": "types/animation",
        "id-2385": "EaseMode",
        "EaseType": "types/animation",
        "id-2384": "EaseType",
        "EraseDataResult": "types/records/data",
        "id-3469": "EraseDataResult",
        "EraseFileResult": "types/records/files",
        "id-3488": "EraseFileResult",
        "Geolocation": "types/os",
        "id-2389": "Geolocation",
        "GetCountResult": "types/records/events",
        "id-3507": "GetCountResult",
        "GetDataResult": "types/records/data",
        "id-3455": "GetDataResult",
        "GetRoomOptionsResult": "types/os",
        "id-1933": "GetRoomOptionsResult",
        "GetRoomRemoteOptionsResult": "types/os",
        "id-1975": "GetRoomRemoteOptionsResult",
        "GetRoomTrackOptionsResult": "types/os",
        "id-1951": "GetRoomTrackOptionsResult",
        "GrantMarkerPermissionResult": "types/records/policies",
        "id-3539": "GrantMarkerPermissionResult",
        "GrantRoleResult": "types/records/roles",
        "id-3525": "GrantRoleResult",
        "JoinRoomResult": "types/os",
        "id-1915": "JoinRoomResult",
        "LeaveRoomResult": "types/os",
        "id-1924": "LeaveRoomResult",
        "ListDataResult": "types/records/data",
        "id-3478": "ListDataResult",
        "ListStudiosResult": "types/records/studios",
        "id-3553": "ListStudiosResult",
        "Mod": "types/core",
        "id-1858": "Mod",
        "PortalType": "types/core",
        "id-3277": "PortalType",
        "PossiblePauseTriggerStates": "types/debuggers/common",
        "id-2162": "PossiblePauseTriggerStates",
        "RecordDataResult": "types/records/data",
        "id-3445": "RecordDataResult",
        "RecordFileResult": "types/records/files",
        "id-1874": "RecordFileResult",
        "RevokeMarkerPermissionResult": "types/records/policies",
        "id-3546": "RevokeMarkerPermissionResult",
        "RevokeRoleResult": "types/records/roles",
        "id-3532": "RevokeRoleResult",
        "SetRoomOptionsResult": "types/os",
        "id-1942": "SetRoomOptionsResult",
        "SetRoomTrackOptionsResult": "types/os",
        "id-1963": "SetRoomTrackOptionsResult",
        "ShowInputSuptype": "types/os",
        "id-2519": "ShowInputSuptype",
        "ShowInputType": "types/os",
        "id-2518": "ShowInputType",
        "SnapTarget": "types/os",
        "id-2442": "SnapTarget",
        "TagFilter": "types/core",
        "id-1859": "TagFilter",
        "UpdateEventRecordResult": "types/records/events",
        "id-3518": "UpdateEventRecordResult",
        "animateTag-byOptions": "actions/utility",
        "id-364": "animateTag-byOptions",
        "getbot-tag": "actions/data",
        "id-33": "getbot-tag",
        "getbots-tag": "actions/data",
        "id-17": "getbots-tag",
        "animateTag-byTag": "actions/utility",
        "id-358": "animateTag-byTag",
        "changeState": "actions/data",
        "id-177": "changeState",
        "create": "actions/data",
        "id-162": "create",
        "destroy": "actions/data",
        "id-166": "destroy",
        "getbot-filters": "actions/data",
        "id-26": "getbot-filters",
        "getbots-filters": "actions/data",
        "id-10": "getbots-filters",
        "priorityShout": "actions/event",
        "id-225": "priorityShout",
        "shout": "actions/event",
        "id-237": "shout",
        "updateBotLinks": "actions/data",
        "id-198": "updateBotLinks",
        "whisper": "actions/event",
        "id-263": "whisper",
        "action.perform": "actions/event",
        "id-1364": "action.perform",
        "action.reject": "actions/event",
        "id-1368": "action.reject",
        "ai.chat-string": "actions/ai",
        "id-423": "ai.chat-string",
        "ai.chat-message": "actions/ai",
        "id-426": "ai.chat-message",
        "ai.chat-messages": "actions/ai",
        "id-429": "ai.chat-messages",
        "ai.generateImage-string": "actions/ai",
        "id-442": "ai.generateImage-string",
        "ai.generateImage-request": "actions/ai",
        "id-446": "ai.generateImage-request",
        "ai.generateSkybox-string": "actions/ai",
        "id-434": "ai.generateSkybox-string",
        "ai.generateSkybox-request": "actions/ai",
        "id-438": "ai.generateSkybox-request",
        "applyDiffToSnapshot": "actions/data",
        "id-83": "applyDiffToSnapshot",
        "applyMod": "actions/mods",
        "id-152": "applyMod",
        "assert": "actions/debuggers",
        "id-407": "assert",
        "assertEqual": "actions/debuggers",
        "id-412": "assertEqual",
        "atPosition": "actions/bot-filters",
        "id-293": "atPosition",
        "byCreator": "actions/bot-filters",
        "id-314": "byCreator",
        "byID": "actions/bot-filters",
        "id-281": "byID",
        "byMod": "actions/bot-filters",
        "id-285": "byMod",
        "bySpace": "actions/bot-filters",
        "id-310": "bySpace",
        "byTag": "actions/bot-filters",
        "id-276": "byTag",
        "bytes.fromBase64String": "actions/bytes",
        "id-1577": "bytes.fromBase64String",
        "bytes.fromBase64Url": "actions/bytes",
        "id-1594": "bytes.fromBase64Url",
        "bytes.fromHexString": "actions/bytes",
        "id-1585": "bytes.fromHexString",
        "bytes.toBase64String": "actions/bytes",
        "id-1573": "bytes.toBase64String",
        "bytes.toBase64Url": "actions/bytes",
        "id-1589": "bytes.toBase64Url",
        "bytes.toHexString": "actions/bytes",
        "id-1581": "bytes.toHexString",
        "clearAnimations": "actions/utility",
        "id-378": "clearAnimations",
        "clearTagMasks": "actions/data",
        "id-106": "clearTagMasks",
        "crypto.hash-raw": "actions/crypto",
        "id-1600": "crypto.hash-raw",
        "crypto.hash-string": "actions/crypto",
        "id-1606": "crypto.hash-string",
        "crypto.hmac-raw": "actions/crypto",
        "id-1637": "crypto.hmac-raw",
        "crypto.hmac-string": "actions/crypto",
        "id-1630": "crypto.hmac-string",
        "crypto.asymmetric.decrypt": "actions/crypto",
        "id-1695": "crypto.asymmetric.decrypt",
        "crypto.asymmetric.encrypt": "actions/crypto",
        "id-1690": "crypto.asymmetric.encrypt",
        "crypto.asymmetric.isEncrypted": "actions/crypto",
        "id-1701": "crypto.asymmetric.isEncrypted",
        "crypto.asymmetric.isKeypair": "actions/crypto",
        "id-1686": "crypto.asymmetric.isKeypair",
        "crypto.asymmetric.keypair": "actions/crypto",
        "id-1682": "crypto.asymmetric.keypair",
        "crypto.encrypt": "actions/crypto",
        "id-1666": "crypto.encrypt",
        "crypto.hmacSha256": "actions/crypto",
        "id-1656": "crypto.hmacSha256",
        "crypto.hmacSha512": "actions/crypto",
        "id-1661": "crypto.hmacSha512",
        "crypto.isEncrypted": "actions/crypto",
        "id-1676": "crypto.isEncrypted",
        "crypto.keypair": "actions/crypto",
        "id-1705": "crypto.keypair",
        "crypto.sha256": "actions/crypto",
        "id-1622": "crypto.sha256",
        "crypto.sha512": "actions/crypto",
        "id-1626": "crypto.sha512",
        "crypto.sign": "actions/crypto",
        "id-1709": "crypto.sign",
        "deleteTagMaskText": "actions/data",
        "id-133": "deleteTagMaskText",
        "deleteTagText": "actions/data",
        "id-126": "deleteTagText",
        "diffSnapshots": "actions/data",
        "id-78": "diffSnapshots",
        "either": "actions/bot-filters",
        "id-318": "either",
        "os.beginAudioRecording": "actions/audio",
        "id-1411": "os.beginAudioRecording",
        "experiment.beginRecording": "actions/experimental",
        "id-1418": "experiment.beginRecording",
        "os.endAudioRecording": "actions/audio",
        "id-1415": "os.endAudioRecording",
        "experiment.endRecording": "actions/experimental",
        "id-1422": "experiment.endRecording",
        "experiment.getAnchorPointPosition": "actions/experimental",
        "id-1401": "experiment.getAnchorPointPosition",
        "experiment.getVoices": "actions/experimental",
        "id-1430": "experiment.getVoices",
        "experiment.localFormAnimation": "actions/experimental",
        "id-1374": "experiment.localFormAnimation",
        "experiment.localPositionTween": "actions/experimental",
        "id-1379": "experiment.localPositionTween",
        "experiment.localRotationTween": "actions/experimental",
        "id-1390": "experiment.localRotationTween",
        "experiment.speakText": "actions/experimental",
        "id-1425": "experiment.speakText",
        "getBotLinks": "actions/data",
        "id-194": "getBotLinks",
        "getBotPosition": "actions/data",
        "id-52": "getBotPosition",
        "getBotRotation": "actions/data",
        "id-57": "getBotRotation",
        "getBotTagValues": "actions/data",
        "id-42": "getBotTagValues",
        "getFormattedJSON": "actions/data",
        "id-70": "getFormattedJSON",
        "getID": "actions/data",
        "id-62": "getID",
        "getJSON": "actions/data",
        "id-66": "getJSON",
        "getLink": "actions/data",
        "id-190": "getLink",
        "getMod": "actions/mods",
        "id-47": "getMod",
        "getSnapshot": "actions/data",
        "id-74": "getSnapshot",
        "getTag": "actions/data",
        "id-88": "getTag",
        "inDimension": "actions/bot-filters",
        "id-289": "inDimension",
        "inStack": "actions/bot-filters",
        "id-299": "inStack",
        "insertTagMaskText": "actions/data",
        "id-118": "insertTagMaskText",
        "insertTagText": "actions/data",
        "id-111": "insertTagText",
        "math.abs": "actions/math",
        "id-1447": "math.abs",
        "math.addVectors": "actions/math",
        "id-1517": "math.addVectors",
        "math.areClose": "actions/math",
        "id-1548": "math.areClose",
        "math.avg": "actions/math",
        "id-1439": "math.avg",
        "math.degreesToRadians": "actions/math",
        "id-1473": "math.degreesToRadians",
        "math.getAnchorPointOffset": "actions/math",
        "id-1513": "math.getAnchorPointOffset",
        "math.getForwardDirection": "actions/math",
        "id-1481": "math.getForwardDirection",
        "math.getSeededRandomNumberGenerator": "actions/math",
        "id-1455": "math.getSeededRandomNumberGenerator",
        "math.intersectPlane": "actions/math",
        "id-1490": "math.intersectPlane",
        "math.negateVector": "actions/math",
        "id-1527": "math.negateVector",
        "math.normalizeVector": "actions/math",
        "id-1532": "math.normalizeVector",
        "math.radiansToDegrees": "actions/math",
        "id-1477": "math.radiansToDegrees",
        "math.random": "actions/math",
        "id-1468": "math.random",
        "math.randomInt": "actions/math",
        "id-1463": "math.randomInt",
        "math.scaleVector": "actions/math",
        "id-1542": "math.scaleVector",
        "math.setRandomSeed": "actions/math",
        "id-1459": "math.setRandomSeed",
        "math.sqrt": "actions/math",
        "id-1443": "math.sqrt",
        "math.stdDev": "actions/math",
        "id-1451": "math.stdDev",
        "math.subtractVectors": "actions/math",
        "id-1522": "math.subtractVectors",
        "math.sum": "actions/math",
        "id-1435": "math.sum",
        "math.vectorLength": "actions/math",
        "id-1537": "math.vectorLength",
        "neighboring": "actions/bot-filters",
        "id-304": "neighboring",
        "not": "actions/bot-filters",
        "id-325": "not",
        "os.attachDebugger": "actions/debuggers",
        "id-1320": "os.attachDebugger",
        "os.createDebugger-normal": "actions/debuggers",
        "id-1309": "os.createDebugger-normal",
        "os.createDebugger-pausable": "actions/debuggers",
        "id-1313": "os.createDebugger-pausable",
        "os.focusOn-bot": "actions/portals",
        "id-510": "os.focusOn-bot",
        "os.focusOn-position": "actions/portals",
        "id-515": "os.focusOn-position",
        "os.getExecutingDebugger": "actions/debuggers",
        "id-1317": "os.getExecutingDebugger",
        "showChat-options": "actions/os",
        "id-537": "showChat-options",
        "showChat-placeholder": "actions/os",
        "id-533": "showChat-placeholder",
        "os.showInput": "actions/portals",
        "id-756": "os.showInput",
        "os.addBotDropGrid": "actions/portals",
        "id-826": "os.addBotDropGrid",
        "os.addBotDropSnap": "actions/portals",
        "id-817": "os.addBotDropSnap",
        "os.addDropGrid": "actions/portals",
        "id-822": "os.addDropGrid",
        "os.addDropSnap": "actions/portals",
        "id-813": "os.addDropSnap",
        "os.applyUpdatesToInst": "actions/os",
        "id-1272": "os.applyUpdatesToInst",
        "os.arSupported": "actions/xr",
        "id-581": "os.arSupported",
        "os.bufferFormAddressGLTF": "actions/animations",
        "id-1230": "os.bufferFormAddressGLTF",
        "os.bufferSound": "actions/audio",
        "id-789": "os.bufferSound",
        "os.calculateRayFromCamera": "actions/portals",
        "id-1225": "os.calculateRayFromCamera",
        "os.cancelSound": "actions/audio",
        "id-793": "os.cancelSound",
        "os.capturePhoto": "actions/camera",
        "id-676": "os.capturePhoto",
        "os.closeBarcodeScanner": "actions/barcodes",
        "id-654": "os.closeBarcodeScanner",
        "os.closeCircleWipe": "actions/portals",
        "id-805": "os.closeCircleWipe",
        "os.closeImageClassifier": "actions/image-classification",
        "id-669": "os.closeImageClassifier",
        "os.closePhotoCamera": "actions/camera",
        "id-680": "os.closePhotoCamera",
        "os.closeQRCodeScanner": "actions/barcodes",
        "id-640": "os.closeQRCodeScanner",
        "os.compileApp": "actions/app",
        "id-940": "os.compileApp",
        "os.convertGeolocationToWhat3Words": "actions/os",
        "id-1210": "os.convertGeolocationToWhat3Words",
        "os.countEvents": "actions/records",
        "id-1200": "os.countEvents",
        "os.createInitializationUpdate": "actions/os",
        "id-1268": "os.createInitializationUpdate",
        "os.device": "actions/os",
        "id-555": "os.device",
        "os.disableAR": "actions/xr",
        "id-571": "os.disableAR",
        "os.disablePointOfView": "actions/portals",
        "id-596": "os.disablePointOfView",
        "os.disableVR": "actions/xr",
        "id-578": "os.disableVR",
        "os.disableWakeLock": "actions/os",
        "id-602": "os.disableWakeLock",
        "os.download": "actions/files",
        "id-608": "os.download",
        "os.downloadBots": "actions/files",
        "id-614": "os.downloadBots",
        "os.downloadBotsAsInitialzationUpdate": "actions/files",
        "id-619": "os.downloadBotsAsInitialzationUpdate",
        "os.downloadInst": "actions/files",
        "id-627": "os.downloadInst",
        "os.enableAR": "actions/xr",
        "id-567": "os.enableAR",
        "os.enableCollaboration": "actions/os",
        "id-561": "os.enableCollaboration",
        "os.enableCustomDragging": "actions/portals",
        "id-831": "os.enableCustomDragging",
        "os.enablePointOfView": "actions/portals",
        "id-587": "os.enablePointOfView",
        "os.enableVR": "actions/xr",
        "id-574": "os.enableVR",
        "os.eraseData": "actions/records",
        "id-1143": "os.eraseData",
        "os.eraseManualApprovalData": "actions/records",
        "id-1149": "os.eraseManualApprovalData",
        "os.exitFullscreenMode": "actions/portals",
        "id-481": "os.exitFullscreenMode",
        "os.getAverageFrameRate": "actions/os",
        "id-888": "os.getAverageFrameRate",
        "os.getCameraPosition": "actions/portals",
        "id-844": "os.getCameraPosition",
        "os.getCameraRotation": "actions/portals",
        "id-848": "os.getCameraRotation",
        "os.getCurrentDimension": "actions/portals",
        "id-727": "os.getCurrentDimension",
        "os.getCurrentInst": "actions/portals",
        "id-733": "os.getCurrentInst",
        "os.getCurrentInstUpdate": "actions/os",
        "id-1276": "os.getCurrentInstUpdate",
        "os.getData": "actions/records",
        "id-1125": "os.getData",
        "os.getDimensionalDepth": "actions/portals",
        "id-746": "os.getDimensionalDepth",
        "os.getFocusPoint": "actions/portals",
        "id-856": "os.getFocusPoint",
        "os.getGeolocation": "actions/os",
        "id-838": "os.getGeolocation",
        "os.getInputList": "actions/portals",
        "id-881": "os.getInputList",
        "os.getInputState": "actions/portals",
        "id-876": "os.getInputState",
        "os.getInstStateFromUpdates": "actions/os",
        "id-1264": "os.getInstStateFromUpdates",
        "os.getManualApprovalData": "actions/records",
        "id-1131": "os.getManualApprovalData",
        "os.getMediaPermission": "actions/os",
        "id-884": "os.getMediaPermission",
        "os.getMenuDimension": "actions/portals",
        "id-736": "os.getMenuDimension",
        "os.getMiniPortalDimension": "actions/portals",
        "id-739": "os.getMiniPortalDimension",
        "os.getPointerDirection": "actions/portals",
        "id-872": "os.getPointerDirection",
        "os.getPointerPosition": "actions/portals",
        "id-860": "os.getPointerPosition",
        "os.getPointerRotation": "actions/portals",
        "id-864": "os.getPointerRotation",
        "os.getPortalDimension": "actions/portals",
        "id-742": "os.getPortalDimension",
        "os.getPublicRecordKey": "actions/records",
        "id-1050": "os.getPublicRecordKey",
        "os.getRoomOptions": "actions/rooms",
        "id-906": "os.getRoomOptions",
        "os.getRoomRemoteOptions": "actions/rooms",
        "id-921": "os.getRoomRemoteOptions",
        "os.getRoomTrackOptions": "actions/rooms",
        "id-910": "os.getRoomTrackOptions",
        "os.getSubjectlessPublicRecordKey": "actions/records",
        "id-1054": "os.getSubjectlessPublicRecordKey",
        "os.getWakeLockConfiguration": "actions/os",
        "id-605": "os.getWakeLockConfiguration",
        "os.goToDimension": "actions/portals",
        "id-770": "os.goToDimension",
        "os.goToURL": "actions/portals",
        "id-774": "os.goToURL",
        "os.grantInstAdminPermission": "actions/records",
        "id-1072": "os.grantInstAdminPermission",
        "os.grantInstRole": "actions/records",
        "id-1092": "os.grantInstRole",
        "os.grantRecordMarkerPermission": "actions/records",
        "id-1058": "os.grantRecordMarkerPermission",
        "os.grantUserRole": "actions/records",
        "id-1077": "os.grantUserRole",
        "os.hasBotInMiniPortal": "actions/portals",
        "id-797": "os.hasBotInMiniPortal",
        "os.hideBarcode": "actions/barcodes",
        "id-662": "os.hideBarcode",
        "os.hideChat": "actions/os",
        "id-545": "os.hideChat",
        "os.hideHtml": "actions/os",
        "id-488": "os.hideHtml",
        "os.hideQRCode": "actions/barcodes",
        "id-647": "os.hideQRCode",
        "os.hideTips": "actions/portals",
        "id-469": "os.hideTips",
        "os.importAUX": "actions/files",
        "id-711": "os.importAUX",
        "os.inSheet": "actions/portals",
        "id-841": "os.inSheet",
        "os.isCollaborative": "actions/os",
        "id-558": "os.isCollaborative",
        "os.isInDimension": "actions/portals",
        "id-723": "os.isInDimension",
        "os.isRecordKey": "actions/records",
        "id-1107": "os.isRecordKey",
        "os.joinRoom": "actions/rooms",
        "id-891": "os.joinRoom",
        "os.leaveRoom": "actions/rooms",
        "id-896": "os.leaveRoom",
        "os.listBuiltinTags": "actions/app",
        "id-1041": "os.listBuiltinTags",
        "os.listData": "actions/records",
        "id-1137": "os.listData",
        "os.listFormAnimations": "actions/animations",
        "id-1245": "os.listFormAnimations",
        "os.listInstUpdates": "actions/os",
        "id-1261": "os.listInstUpdates",
        "os.listUserStudios": "actions/records",
        "id-1206": "os.listUserStudios",
        "os.loadInst": "actions/os",
        "id-703": "os.loadInst",
        "os.log": "actions/os",
        "id-834": "os.log",
        "os.meetCommand": "actions/os",
        "id-1297": "os.meetCommand",
        "os.meetFunction": "actions/os",
        "id-1302": "os.meetFunction",
        "os.openBarcodeScanner": "actions/barcodes",
        "id-650": "os.openBarcodeScanner",
        "os.openCircleWipe": "actions/portals",
        "id-809": "os.openCircleWipe",
        "os.openDevConsole": "actions/os",
        "id-782": "os.openDevConsole",
        "os.openImageClassifier": "actions/image-classification",
        "id-665": "os.openImageClassifier",
        "os.openPhotoCamera": "actions/camera",
        "id-672": "os.openPhotoCamera",
        "os.openQRCodeScanner": "actions/barcodes",
        "id-636": "os.openQRCodeScanner",
        "os.openURL": "actions/portals",
        "id-778": "os.openURL",
        "os.parseBotsFromData": "actions/files",
        "id-715": "os.parseBotsFromData",
        "os.playSound": "actions/audio",
        "id-785": "os.playSound",
        "os.raycast": "actions/portals",
        "id-1219": "os.raycast",
        "os.raycastFromCamera": "actions/portals",
        "id-1214": "os.raycastFromCamera",
        "os.recordData": "actions/records",
        "id-1111": "os.recordData",
        "os.recordEvent": "actions/records",
        "id-1194": "os.recordEvent",
        "os.recordFile": "actions/records",
        "id-1155": "os.recordFile",
        "os.recordManualApprovalData": "actions/records",
        "id-1118": "os.recordManualApprovalData",
        "os.registerApp": "actions/app",
        "id-931": "os.registerApp",
        "os.registerTagPrefix": "actions/app",
        "id-926": "os.registerTagPrefix",
        "os.remoteCount": "actions/os",
        "id-1283": "os.remoteCount",
        "os.remotes": "actions/os",
        "id-1258": "os.remotes",
        "os.replaceDragBot": "actions/portals",
        "id-719": "os.replaceDragBot",
        "os.requestAuthBot": "actions/records",
        "id-1044": "os.requestAuthBot",
        "os.requestAuthBotInBackground": "actions/records",
        "id-1047": "os.requestAuthBotInBackground",
        "os.requestFullscreenMode": "actions/portals",
        "id-478": "os.requestFullscreenMode",
        "os.requestWakeLock": "actions/os",
        "id-599": "os.requestWakeLock",
        "os.revokeInstRole": "actions/records",
        "id-1100": "os.revokeInstRole",
        "os.revokeRecordMarkerPermission": "actions/records",
        "id-1065": "os.revokeRecordMarkerPermission",
        "os.revokeUserRole": "actions/records",
        "id-1085": "os.revokeUserRole",
        "os.run": "actions/os",
        "id-548": "os.run",
        "os.setClipboard": "actions/os",
        "id-491": "os.setClipboard",
        "os.setRoomOptions": "actions/rooms",
        "id-901": "os.setRoomOptions",
        "os.setRoomTrackOptions": "actions/rooms",
        "id-915": "os.setRoomTrackOptions",
        "os.share": "actions/os",
        "id-801": "os.share",
        "os.showBarcode": "actions/barcodes",
        "id-657": "os.showBarcode",
        "os.showConfirm": "actions/portals",
        "id-766": "os.showConfirm",
        "os.showHtml": "actions/os",
        "id-484": "os.showHtml",
        "os.showInputForTag": "actions/portals",
        "id-750": "os.showInputForTag",
        "os.showJoinCode": "actions/barcodes",
        "id-473": "os.showJoinCode",
        "os.showQRCode": "actions/barcodes",
        "id-643": "os.showQRCode",
        "os.showUploadAuxFile": "actions/files",
        "id-630": "os.showUploadAuxFile",
        "os.showUploadFiles": "actions/files",
        "id-633": "os.showUploadFiles",
        "os.sleep": "actions/os",
        "id-453": "os.sleep",
        "os.startFormAnimation": "actions/animations",
        "id-1234": "os.startFormAnimation",
        "os.stopFormAnimation": "actions/animations",
        "id-1240": "os.stopFormAnimation",
        "os.tip": "actions/portals",
        "id-462": "os.tip",
        "os.toast": "actions/os",
        "id-457": "os.toast",
        "os.totalRemoteCount": "actions/os",
        "id-1287": "os.totalRemoteCount",
        "os.unloadInst": "actions/os",
        "id-707": "os.unloadInst",
        "os.unregisterApp": "actions/app",
        "id-936": "os.unregisterApp",
        "os.version": "actions/os",
        "id-552": "os.version",
        "os.vrSupported": "actions/xr",
        "id-584": "os.vrSupported",
        "os.agreedUponTime": "actions/time",
        "id-684": "os.agreedUponTime",
        "os.deadReckoningTime": "actions/time",
        "id-692": "os.deadReckoningTime",
        "os.instLatency": "actions/time",
        "id-686": "os.instLatency",
        "os.instTimeOffset": "actions/time",
        "id-688": "os.instTimeOffset",
        "os.instTimeOffsetSpread": "actions/time",
        "id-690": "os.instTimeOffsetSpread",
        "os.localTime": "actions/time",
        "id-682": "os.localTime",
        "removeTags": "actions/data",
        "id-141": "removeTags",
        "renameTag": "actions/data",
        "id-146": "renameTag",
        "setTag": "actions/data",
        "id-93": "setTag",
        "setTagMask": "actions/data",
        "id-99": "setTagMask",
        "subtractMods": "actions/mods",
        "id-157": "subtractMods",
        "superShout": "actions/event",
        "id-220": "superShout",
        "uuid": "actions/data",
        "id-355": "uuid",
        "web.get": "actions/web",
        "id-1728": "web.get",
        "web.hook": "actions/web",
        "id-1739": "web.hook",
        "web.post": "actions/web",
        "id-1733": "web.post",
        "configBot": "actions/os",
        "id-418": "configBot"
    }
}