{"version":2,"updates":[{"id":0,"timestamp":1702912695202,"update":"AaQBh6CIswIAJwEEYm90cyQwMjgzNjVhNC0wMzZmLTQxZDAtOWFmMS03MTVhZDRmMmFhN2EBJwCHoIizAgAGc3lzdGVtAgQAh6CIswIBEWFiLnNoZWxsLnJlZ3VsYXRlJwCHoIizAgAEZm9ybQIEAIegiLMCEwdub3RoaW5nJwCHoIizAgAMb25BbnlCb3REcmFnAgQAh6CIswIbuwFALy9jb250cm9scyBncmlkIHNuYXAKaWYgKGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJHcmlkU25hcFN0YXRlKQp7CiAgICBvcy5hZGREcm9wU25hcCgiZ3JpZCIpOwp9CgovL2NvbnRyb2xzIGJvdCBzbmFwCmlmIChsaW5rcy5yZW1lbWJlci50YWdzLmFiQm90U25hcFN0YXRlKQp7CiAgICBvcy5hZGREcm9wU25hcCgiZmFjZSIpOwp9JwCHoIizAgAIcmVtZW1iZXICBACHoIizAtcBKPCflJdlNTM4MGE2Yi04YjRkLTRhOGItOGIwNC01OGUxZWIwM2U1ZTcnAIegiLMCAAhhYklnbm9yZQIEAIegiLMC/gEEdHJ1ZSgAh6CIswIADGFiQm90VmVyc2lvbgF9hwInAIegiLMCAAdhYlNoZWxsAgQAh6CIswKEAgR0cnVlJwEEYm90cyQzNGMzYzIxMC01YmYxLTQ5Y2YtYjE1MS1lZTJkMDdmMGU2NzMBJwCHoIizAokCBnN5c3RlbQIEAIegiLMCigIPYWIuc2hlbGwuY3JlYXRlJwCHoIizAokCBGZvcm0CBACHoIizApoCB25vdGhpbmcnAIegiLMCiQILZGVzY3JpcHRpb24CBACHoIizAqICPUJvdCB1c2VkIHRvIGNyZWF0ZS9tYW5pZmVzdCBib3RzIGludG8gYW4gYWN0dWFsIHNjZW5lL3BvcnRhbC4nAIegiLMCiQIMYWJDcmVhdGVCb3RzAgQAh6CIswLgAoAaQC8vREVWIE5PVEU6IE5FRUQgVE8gVU5ERVJTVEFORCBXSEFUIFRPIERPIElGIEFOIEFSUkFZIElTIEdJVkVOCgovL2NoZWNrcyBmb3IgaW5pdGlhbCBib290IGJvb2xlYW4KbGV0IGluaXRpYWxCb290ID0gdGhhdC5pbml0aWFsQm9vdDsKLy9ib3RzIHRvIGJlIGdlbmVyYXRlZApsZXQgYm90RGF0YSA9IHRoYXQuYm90czsKLy93aGVyZSBkaWQgdGhlIGRhdGEgY29tZSBmcm9tIChvcHRpb25hbCkKbGV0IG9yaWdpbiA9IHRoYXQub3JpZ2luOwovL3ZlcnNpb24gb2YgdGhlIGRhdGEgKG9wdGlvbmFsKQpsZXQgdmVyc2lvbiA9IHRoYXQudmVyc2lvbjsKLy9pZE1hcCBhbmQgbmV3Qm90cyBhcmUgdXNlZCB0byBtYW5hZ2UgdGhlIGluY29taW5nIGJvdCBkYXRhCmxldCBpZE1hcCA9IG5ldyBNYXAoKTsKbGV0IG5ld0JvdHMgPSBbXTsKCi8vdGhpcyBsb29wIGNyZWF0ZXMgdGhlIG5ldyBib3RzIGFuZCB0aGVuIHBhY2thZ2VzIHRoZW0gZm9yIGFkZGl0aW9uYWwgcHJvY2Vzc2luZywgd2hpbGUgYWRkaW5nIGFueSBuZWVkZWQgYWRkaXRpb25hbCB0YWdzCmZvciAoY29uc3QgcHJvcGVydHkgaW4gYm90RGF0YSkKewogICAgY29uc3QgbmV3Qm90ID0gYm90RGF0YVtwcm9wZXJ0eV07CiAgICBjb25zdCBib3RUb3RhbCA9IE9iamVjdC5rZXlzKGJvdERhdGEpLmxlbmd0aDsKICAgIGNvbnN0IGFiSURPcmlnaW4gPSB7YWJJRE9yaWdpbjogb3JpZ2lufTsKICAgIGNvbnN0IGFiR3JpZEZvY3VzID0gbGlua3MucmVtZW1iZXIudGFncy5hYkdyaWRGb2N1czsKCiAgICBpZiAobmV3Qm90LnRhZ3MpIAogICAgewogICAgICAgIGlmIChuZXdCb3QudGFncy5jcmVhdG9yKSAKICAgICAgICB7CiAgICAgICAgICAgIGFiSURPcmlnaW4ub2xkQ3JlYXRvciA9IG5ld0JvdC50YWdzLmNyZWF0b3I7CiAgICAgICAgfQoKICAgICAgICBsZXQgdGFyZ2V0UG9zaXRpb247CgogICAgICAgIHRyeSAKICAgICAgICB7CiAgICAgICAgICAgIGlmIChib3RUb3RhbCA8IDIgJiYgYWJHcmlkRm9jdXMpIAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0RGltZW5zaW9uID0gYWJHcmlkRm9jdXMuZGltZW5zaW9uOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB0YXJnZXRQb3NpdGlvbiA9IHsgW3RhcmdldERpbWVuc2lvbl06IHRydWUsIFt0YXJnZXREaW1lbnNpb24gKyAiWCJdOiBhYkdyaWRGb2N1cy5wb3NpdGlvbi54LCBbdGFyZ2V0RGltZW5zaW9uICsgIlkiXTogYWJHcmlkRm9jdXMucG9zaXRpb24ueSB9OwogICAgICAgICAgICB9CgogICAgICAgICAgICBsZXQgYiA9IGNyZWF0ZShuZXdCb3QudGFncywgdGFyZ2V0UG9zaXRpb24sIGFiSURPcmlnaW4pOwoKICAgICAgICAgICAgaWRNYXAuc2V0KHByb3BlcnR5LCBiLmlkKTsKICAgICAgICAgICAgbmV3Qm90cy5wdXNoKGIpOwoKICAgICAgICAgICAgaWYgKGIudGFncy5jcmVhdG9yID09IHRoaXNCb3QuaWQpIAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBiLnRhZ3MuY3JlYXRvciA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgY2F0Y2ggKGVycm9yKSAKICAgICAgICB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJpbnZhbGlkIGJvdCIsIGVycm9yKTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIAogICAgewogICAgICAgIGNvbnNvbGUubG9nKCJza2lwcGVkIGJvdDogIiArIG5ld0JvdCk7CiAgICB9Cn0KCi8vYXJyYXkgb2YgdGFnIHJlbGF0aW9uc2hpcHMgdG8gYmUgcHJlc2VydmVkCmxldCBsaW5rVGFncyA9IFsibGluayIsICJjcmVhdG9yIiwgImNvbmZpZ0JvdCIsICJsaW5lVG8iLCAidHJhbnNmb3JtZXIiXTsKCi8vdGhpcyBsb29wIGNvbnRhaW5zIHRoZSBsb2dpYyBmb3IgcHJlc2VydmluZyB0aGUgbGlua1RhZ3MKZm9yIChsZXQgbmV3Qm90IG9mIG5ld0JvdHMpIAp7CiAgICBmb3IgKGxldCB0YWcgb2YgbGlua1RhZ3MpIAogICAgewogICAgICAgIGxldCB2YWx1ZSA9IG5ld0JvdC50YWdzW3RhZ107CgogICAgICAgIGlmICh0YWcgPT0gImNyZWF0b3IiKSAKICAgICAgICB7CiAgICAgICAgICAgIHZhbHVlID0gbmV3Qm90LnRhZ3Mub2xkQ3JlYXRvcjsKICAgICAgICAgICAgbmV3Qm90LnRhZ3Mub2xkQ3JlYXRvciA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICB1cGRhdGVCb3RMaW5rcyhuZXdCb3QsIGlkTWFwKTsKCiAgICAgICAgaWYgKHZhbHVlKSAKICAgICAgICB7CiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGxldCBuZXdWYWx1ZSA9IHZhbHVlLm1hcChpZCA9PiB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkTWFwLmdldChpZCkgfHwgaWQ7CiAgICAgICAgICAgICAgICB9KQoKICAgICAgICAgICAgICAgIG5ld0JvdC5yYXdbdGFnXSA9IG5ld1ZhbHVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbnN0IG5ld0lEID0gaWRNYXAuZ2V0KHZhbHVlKTsKCiAgICAgICAgICAgICAgICBpZiAobmV3SUQpIAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5ld0JvdC5yYXdbdGFnXSA9IG5ld0lEOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgovL3RvYXN0cyBmb3IgaGF0Y2hlcywgYnV0IG9ubHkgb24gYnVpbGRlcgppZiAoY29uZmlnQm90LnRhZ3MuYWJTaWxlbnRNb2RlID09IG51bGwgJiYgIWNvbmZpZ0JvdC50YWdzLnBoICYmIGJ1aWxkZXJWZXJzaW9uID09ICJidWlsZGVyIikgCnsKICAgIG9zLnRvYXN0KCJoYXRjaGVkICIgKyBvcmlnaW4gKyAiIHYiICsgdmVyc2lvbik7Cn0KCi8vYWRkaXRpb25hbCBoYXRjaCBkYXRhCmNvbmZpZ0JvdC50YWdzLmxhc3RFZ2dIYXRjaGVkID0gb3JpZ2luOwoKLy9pbml0aWFsIGJvb3QgbG9naWMKaWYgKGluaXRpYWxCb290KSAKewogICAgbGV0IHByZWhhdGNoID0gYXdhaXQgc2hvdXQoIm9uUHJlSGF0Y2giLCB7IGFiOiBvcmlnaW4gfSlbMF07CgogICAgaWYgKCFwcmVoYXRjaCkgCiAgICB7CiAgICAgICAgYWJJbnN0TWVtb3J5LnRhZ3MuYmFzZUFCID0gb3JpZ2luOwogICAgfQogICAgbGlua3MucmVtZW1iZXIudGFncy5iYXNlQUIgPSBvcmlnaW47Cn0KCi8vb25FZ2dIYXRjaCBmb3IgYWxsIGp1c3QgaGF0Y2hlZCBib3RzCndoaXNwZXIobmV3Qm90cywgIm9uRWdnSGF0Y2giLCB7YWI6IG9yaWdpbiwgdmVyc2lvbjogdmVyc2lvbn0pOwoKLy9vbkFiQWRkZWQgZm9yIGFsbCBib3RzIGluIHRoZSBleHBlcmllbmNlCnNob3V0KCJvbkFiQWRkZWQiLCB7YWI6IG9yaWdpbiwgdmVyc2lvbjogdmVyc2lvbn0pOycAh6CIswKJAghyZW1lbWJlcgIEAIegiLMC4Rwo8J+Ul2U1MzgwYTZiLThiNGQtNGE4Yi04YjA0LTU4ZTFlYjAzZTVlNycAh6CIswKJAglvbkFiQWRkZWQCBACHoIizAogdckAvL3Nob3V0KCJvbkFiQWRkZWQiLCB7YWI6IG9yaWdpbiwgdmVyc2lvbjogdmVyc2lvbn0pOwoKY29uc29sZS5sb2coImFiOiAiICsgdGhhdC5hYiwgInZlcnNpb246ICIgKyB0aGF0LnZlcnNpb24pOycAh6CIswKJAghhYklnbm9yZQIEAIegiLMC+x0EdHJ1ZSgAh6CIswKJAgxhYkJvdFZlcnNpb24BfYcCJwCHoIizAokCB2FiU2hlbGwCBACHoIizAoEeBHRydWUnAQRib3RzJDc2YWYwNDkxLTM5MTktNDk4NC1hYTgyLTIyYzc0MmY0MjYzZgEnAIegiLMChh4Gc3lzdGVtAgQAh6CIswKHHg5hYi5zaGVsbC5zdG9yZScAh6CIswKGHgRmb3JtAgQAh6CIswKWHgdub3RoaW5nJwCHoIizAoYeC2Rlc2NyaXB0aW9uAgQAh6CIswKeHj9UaGlzIHNraWxsIGlzIG1lYW50IHRvIGJlIGEgY29uZmlndXJhYmxlIG1lYW5zIHRvIHB1Ymxpc2ggZGF0YS4nAIegiLMChh4PYWJQdWJsaXNoUmVjb3JkAgQAh6CIswLeHsEGQGF3YWl0IG9zLnJlcXVlc3RBdXRoQm90KCk7CgpsZXQgcHVibGljID0gdGhhdC5wdWJsaWM7CmxldCByZWNvcmREYXRhID0gdGhhdC5kYXRhOwpsZXQgcmVjb3JkTmFtZSA9IHRoYXQucmVjb3JkTmFtZTsKbGV0IGVuZHBvaW50ID0gdGhhdC5lbmRwb2ludCA/IHRoYXQuZW5kcG9pbnQgOiBsaW5rcy5yZW1lbWJlci50YWdzLmFiRW5kcG9pbnQ7CmxldCB1c2VyUmVjb3JkID0gYXV0aEJvdC5pZDsKCmlmICghcmVjb3JkRGF0YSkKewogICAgcmV0dXJuICJubyBkYXRhIHN1cHBsaWVkIjsKfQoKaWYgKHB1YmxpYykKewogICAgcmVjb3JkRGF0YSA9IGF3YWl0IG9zLnJlY29yZERhdGEodXNlclJlY29yZCwgcmVjb3JkTmFtZSwgcmVjb3JkRGF0YSwge2VuZHBvaW50OiBlbmRwb2ludCwgbWFya2VyczogWyJwdWJsaWNSZWFkIl19KTsKfQplbHNlCnsKICAgIGxldCBwZXJtaXNzaW9uID0gewogICAgICAgIHR5cGU6ICdkYXRhLnJlYWQnLAogICAgICAgIHJvbGU6IHJlY29yZE5hbWUsCiAgICAgICAgYWRkcmVzc2VzOiB0cnVlCiAgICB9OwoKICAgIGF3YWl0IG9zLmdyYW50UmVjb3JkTWFya2VyUGVybWlzc2lvbih1c2VyUmVjb3JkLCByZWNvcmROYW1lLCBwZXJtaXNzaW9uKTsKCiAgICBhd2FpdCBvcy5ncmFudFJlY29yZE1hcmtlclBlcm1pc3Npb24odXNlclJlY29yZCwgcmVjb3JkTmFtZSwgcGVybWlzc2lvbik7CiAgICAKICAgIHJlY29yZERhdGEgPSBhd2FpdCBvcy5yZWNvcmREYXRhKHVzZXJSZWNvcmQsIHJlY29yZE5hbWUsIHJlY29yZERhdGEsIHtlbmRwb2ludDogZW5kcG9pbnQsIG1hcmtlcnM6IFtyZWNvcmROYW1lXX0pOwp9CgpyZXR1cm4gcmVjb3JkRGF0YTsnAIegiLMChh4NYWJQdWJsaXNoRmlsZQIEAIegiLMCoCWwBEBhd2FpdCBvcy5yZXF1ZXN0QXV0aEJvdCgpOwoKbGV0IGZpbGUgPSB0aGF0LmZpbGU7CmxldCBmaWxlTmFtZSA9IHRoYXQuZmlsZU5hbWU7CmxldCBtaW1lVHlwZSA9IHRoYXQubWltZVR5cGU7CmxldCB1c2VyUmVjb3JkID0gYXV0aEJvdC5pZDsKCmlmICghZmlsZSkKewogICAgcmV0dXJuICJubyBmaWxlIHN1cHBsaWVkIjsKfQoKbGV0IGZpbGVVcGxvYWQgPSBhd2FpdCBvcy5yZWNvcmRGaWxlKHVzZXJSZWNvcmQsIGZpbGUsIHtkZXNjcmlwdGlvbjogZmlsZU5hbWUsIG1pbWVUeXBlOiBtaW1lVHlwZX0sIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJFbmRwb2ludCk7CiAgICAKaWYgKCFmaWxlVXBsb2FkLnN1Y2Nlc3MpIAp7CiAgICBhd2FpdCBvcy5ncmFudEluc3RBZG1pblBlcm1pc3Npb24odXNlclJlY29yZCk7CgogICAgZmlsZVVwbG9hZCA9IGF3YWl0IG9zLnJlY29yZEZpbGUodXNlclJlY29yZCwgZmlsZSwge2Rlc2NyaXB0aW9uOiBmaWxlTmFtZSwgbWltZVR5cGU6IG1pbWVUeXBlfSwgbGlua3MucmVtZW1iZXIudGFncy5hYkVuZHBvaW50KTsKfQoKcmV0dXJuIGZpbGVVcGxvYWQ7JwCHoIizAoYeEGFiQ29yZU1lbnVBY3Rpb24CBACHoIizAtEpTUBhd2FpdCBvcy5yZXF1ZXN0QXV0aEJvdCgpOwoKLy9zZXQgdXAgdGhlIHB1Ymxpc2ggbWVudQp0aGlzQm90Lm9uU3RvcmVNZW51KCk7JwCHoIizAoYeC29uU3RvcmVNZW51AgQAh6CIswKfKrZDQGxldCBwb3NzaWJsZVB1Ymxpc2hCb3QgPSBsaW5rcy5yZW1lbWJlci5saW5rcy5hYkJvdEZvY3VzOwoKc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCmNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gImFiTWVudSI7CgpsaW5rcy5tZW51Lm1hc2tzLm9uR3JpZENsaWNrID0gIkAgc2hvdXQoJ2FiTWVudVJlZnJlc2gnKTsgbGlua3MubWFuaWZlc3RhdGlvbi5hYkNsaWNrKCk7IjsKCmNvbnN0IHV1YWIgPSBsaW5rcy5yZW1lbWJlci50YWdzLnV1YWIgPyB0cnVlIDogZmFsc2U7CgpsZXQgbWVudUJ1dHRvbiA9IHt9OwoKbWVudUJ1dHRvbi5hYk1lbnUgPSB0cnVlOwptZW51QnV0dG9uLmFiTWVudVNvcnRPcmRlciA9IDk7Cm1lbnVCdXR0b24uYWJNZW51UmVmcmVzaCA9ICJAIGRlc3Ryb3kodGhpc0JvdCk7IjsKbWVudUJ1dHRvbi5sYWJlbCA9ICJkb3dubG9hZCI7Cm1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSAiZ2V0X2FwcCI7Cm1lbnVCdXR0b24uY29sb3IgPSBsaW5rcy5yZW1lbWJlci50YWdzLmFiQmFzZUNvbG9yOwptZW51QnV0dG9uLm1hbmFnZXIgPSAi8J+UlyIgKyB0aGlzQm90LmlkOwptZW51QnV0dG9uLm1hbmlmZXN0YXRpb24gPSB0YWdzLm1hbmlmZXN0YXRpb247Cm1lbnVCdXR0b24ub25DbGljayA9IGBAIGxpbmtzLm1hbmFnZXIuYWJEb3dubG9hZCgpO2A7CgovL2NyZWF0ZSBkb3dubG9hZCBidXR0b24KbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24obWVudUJ1dHRvbik7CgppZiAoIWF1dGhCb3QpCnsKICAgIHJldHVybjsKfQplbHNlIGlmICghYXV0aEJvdC50YWdzLnByaXZhY3lGZWF0dXJlcy5wdWJsaXNoRGF0YSkKewogICAgcmV0dXJuOwp9CgppZiAoIXV1YWIpCnsKICAgIG1lbnVCdXR0b24ubGFiZWwgPSAicHVibGlzaCBwYXR0ZXJuIjsgCiAgICBtZW51QnV0dG9uLmFiTWVudVNvcnRPcmRlciA9IDE7CiAgICBtZW51QnV0dG9uLmxhYmVsQWxpZ25tZW50ID0gImNlbnRlciI7CiAgICBtZW51QnV0dG9uLmZvcm1BZGRyZXNzID0gbnVsbDsKICAgIG1lbnVCdXR0b24ubWVudUl0ZW1TdHlsZSA9IGDwn6esIHsiYm9yZGVyLXJhZGl1cyI6ICI5cHggOXB4IDBweCAwcHgiLCAibWFyZ2luLXRvcCI6ICI2cHgifWA7CiAgICBtZW51QnV0dG9uLmNvbG9yID0gbGlua3MucmVtZW1iZXIudGFncy5hYkJhc2VDb2xvcjsKICAgIG1lbnVCdXR0b24ucG9pbnRhYmxlID0gZmFsc2U7CiAgICBtZW51QnV0dG9uLm9uQ2xpY2sgPSBudWxsOwogICAgbWVudUJ1dHRvbi5zY2FsZVkgPSAwLjc1OwogICAgCiAgICAvL2NyZWF0ZSBwdWJsaXNoIGxhYmVsIGJ1dHRvbgogICAgbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24obWVudUJ1dHRvbik7CgogICAgbWVudUJ1dHRvbi5hYk1lbnVTb3J0T3JkZXIgPSAxOwogICAgbWVudUJ1dHRvbi5sYWJlbCA9ICJlbmNyeXB0IjsKICAgIG1lbnVCdXR0b24ubGFiZWxBbGlnbm1lbnQgPSAibGVmdCI7CiAgICBtZW51QnV0dG9uLm1lbnVJdGVtU3R5bGUgPSBg8J+nrCB7ImJvcmRlci1yYWRpdXMiOiAiMHB4IDBweCAwcHggMHB4IiwgIm1hcmdpbi10b3AiOiAiMHB4In1gOwogICAgbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJjaGVja19ib3hfb3V0bGluZV9ibGFuayI7CiAgICBtZW51QnV0dG9uLmVuY3J5cHRTdGF0ZSA9IGZhbHNlOwogICAgbWVudUJ1dHRvbi5jb2xvciA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJCYXNlQ29sb3I7CiAgICBtZW51QnV0dG9uLnNjYWxlWSA9IDE7CiAgICBtZW51QnV0dG9uLm9uQ2xpY2sgPSBgQCBpZih0YWdzLmVuY3J5cHRTdGF0ZSkKICAgIHsKICAgICAgICB0YWdzLmVuY3J5cHRTdGF0ZSA9IGZhbHNlOwogICAgICAgIHRhZ3MuZm9ybUFkZHJlc3MgPSAnY2hlY2tfYm94X291dGxpbmVfYmxhbmsnOwogICAgICAgIGNvbmZpZ0JvdC50YWdzLmVuY3J5cHRpb24gPSBudWxsOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIHRhZ3MuZW5jcnlwdFN0YXRlID0gdHJ1ZTsKICAgICAgICB0YWdzLmZvcm1BZGRyZXNzID0gJ2NoZWNrX2JveCc7CiAgICAgICAgY29uZmlnQm90LnRhZ3MuZW5jcnlwdGlvbiA9IHRydWU7CiAgICB9YDsKCiAgICAvL2NyZWF0ZSBlbmNyeXB0IGJ1dHRvbgogICAgbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24obWVudUJ1dHRvbik7CgogICAgaWYgKGF1dGhCb3QudGFncy5wcml2YWN5RmVhdHVyZXMuYWxsb3dQdWJsaWNEYXRhKQogICAgewogICAgICAgIG1lbnVCdXR0b24uYWJNZW51U29ydE9yZGVyID0gMjsKICAgICAgICBtZW51QnV0dG9uLmxhYmVsID0gImlzUHVibGljIjsKICAgICAgICBtZW51QnV0dG9uLmxhYmVsQWxpZ25tZW50ID0gImxlZnQiOwogICAgICAgIG1lbnVCdXR0b24ubWVudUl0ZW1TdHlsZSA9IGDwn6esIHsiYm9yZGVyLXJhZGl1cyI6ICIwcHggMHB4IDBweCAwcHgiLCAibWFyZ2luLXRvcCI6ICIwcHgifWA7CiAgICAgICAgbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJjaGVja19ib3hfb3V0bGluZV9ibGFuayI7CiAgICAgICAgbWVudUJ1dHRvbi5wdWJsaWNTdGF0ZSA9IGZhbHNlOwogICAgICAgIG1lbnVCdXR0b24uY29sb3IgPSBsaW5rcy5yZW1lbWJlci50YWdzLmFiQmFzZUNvbG9yOwogICAgICAgIG1lbnVCdXR0b24uc2NhbGVZID0gMTsKICAgICAgICBtZW51QnV0dG9uLm9uQ2xpY2sgPSBgQCBpZih0YWdzLnB1YmxpY1N0YXRlKQogICAgICAgIHsKICAgICAgICAgICAgdGFncy5wdWJsaWNTdGF0ZSA9IGZhbHNlOwogICAgICAgICAgICB0YWdzLmZvcm1BZGRyZXNzID0gJ2NoZWNrX2JveF9vdXRsaW5lX2JsYW5rJzsKICAgICAgICAgICAgY29uZmlnQm90LnRhZ3MucHVibGljID0gbnVsbDsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgdGFncy5wdWJsaWNTdGF0ZSA9IHRydWU7CiAgICAgICAgICAgIHRhZ3MuZm9ybUFkZHJlc3MgPSAnY2hlY2tfYm94JzsKICAgICAgICAgICAgY29uZmlnQm90LnRhZ3MucHVibGljID0gdHJ1ZTsKICAgICAgICB9YDsKCiAgICAgICAgLy9jcmVhdGUgcHVibGljIGJ1dHRvbgogICAgICAgIGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKG1lbnVCdXR0b24pOwogICAgfQoKICAgIG1lbnVCdXR0b24uYWJNZW51ID0gbnVsbDsKICAgIG1lbnVCdXR0b24ubWVudUl0ZW1TdHlsZSA9IGDwn6esIHsiYm9yZGVyLXJhZGl1cyI6ICI5cHggOXB4IDlweCA5cHgiLCAibWFyZ2luLXRvcCI6ICI2cHgifWA7CiAgICBtZW51QnV0dG9uLmRpbWVuc2lvbiA9ICJhYk1lbnUiOwogICAgbWVudUJ1dHRvbi5vbktleURvd24gPSBgQAogICAgICAgIGlmICh0aGF0LmtleXNbMF0gPT0gIlNoaWZ0IikKICAgICAgICB7CiAgICAgICAgICAgIHRhZ3NbdGFncy5kaW1lbnNpb25dID0gdHJ1ZTsKICAgICAgICB9YDsKICAgIG1lbnVCdXR0b24ub25LZXlVcCA9IGBACiAgICAgICAgaWYgKHRoYXQua2V5c1swXSA9PSAiU2hpZnQiKQogICAgICAgIHsKICAgICAgICAgICAgdGFnc1t0YWdzLmRpbWVuc2lvbl0gPSBmYWxzZTsKICAgICAgICB9YDsKICAgIG1lbnVCdXR0b24uYWJNZW51U29ydE9yZGVyID0gLTQ7CiAgICBtZW51QnV0dG9uLmJ1dHRvblN0YXRlID0gImF1dG9tYXRpYyI7CiAgICBtZW51QnV0dG9uLmNvbG9yID0gbGlua3MucmVtZW1iZXIudGFncy5hYkJhc2VDb2xvcjsKICAgIG1lbnVCdXR0b24uZm9ybUFkZHJlc3MgPSAiY2hlY2tfYm94IjsKICAgIG1lbnVCdXR0b24ubGFiZWwgPSAiYXV0b21hdGljIHZlcnNpb24iOwogICAgbWVudUJ1dHRvbi5vbkNsaWNrID0gYEAKICAgICAgICBpZih0YWdzLmJ1dHRvblN0YXRlID09ICdhdXRvbWF0aWMnKQogICAgICAgIHsKICAgICAgICAgICAgdGFncy5idXR0b25TdGF0ZSA9ICdtYW51YWwnOwogICAgICAgICAgICB0YWdzLmZvcm1BZGRyZXNzID0gJ2NoZWNrX2JveF9vdXRsaW5lX2JsYW5rJzsKICAgICAgICAgICAgY29uZmlnQm90LnRhZ3MudmVyc2lvbkRlZmluZWQgPSB0cnVlOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICB0YWdzLmJ1dHRvblN0YXRlID0gJ2F1dG9tYXRpYyc7CiAgICAgICAgICAgIHRhZ3MubGFiZWwgPSAnYXV0b21hdGljIHZlcnNpb24nOwogICAgICAgICAgICB0YWdzLmZvcm1BZGRyZXNzID0gJ2NoZWNrX2JveCc7CiAgICAgICAgICAgIGNvbmZpZ0JvdC50YWdzLnZlcnNpb25EZWZpbmVkID0gbnVsbDsKICAgICAgICB9YDsKCiAgICAvL2NyZWF0ZSB2ZXJzaW9uIGJ1dHRvbgogICAgbGlua3MubWVudS5hYkNyZWF0ZU1lbnVCdXR0b24obWVudUJ1dHRvbik7Cn0KCm1lbnVCdXR0b24uZGltZW5zaW9uID0gbnVsbDsKbWVudUJ1dHRvbi5hYk1lbnUgPSB0cnVlOwptZW51QnV0dG9uLm9uS2V5RG93biA9IG51bGw7Cm1lbnVCdXR0b24ub25LZXlVcCA9IG51bGw7Cm1lbnVCdXR0b24uYWJNZW51U29ydE9yZGVyID0gMjsKbWVudUJ1dHRvbi5idXR0b25TdGF0ZSA9IG51bGw7Cm1lbnVCdXR0b24uY29sb3IgPSBsaW5rcy5yZW1lbWJlci50YWdzLmFiQmFzZUNvbG9yOwptZW51QnV0dG9uLmZvcm1BZGRyZXNzID0gImVnZyI7CgppZiAodXVhYikKewogICAgbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJxcl9jb2RlX3NjYW5uZXIiOwogICAgbWVudUJ1dHRvbi5vbkNsaWNrID0gYEAKICAgICAgICB0cnkKICAgICAgICB7CiAgICAgICAgICAgIGNvbmZpZ0JvdC50YWdzLnV1YWJTY2FuID0gdHJ1ZTsKCiAgICAgICAgICAgIG9zLm9wZW5RUkNvZGVTY2FubmVyKCk7CgogICAgICAgICAgICBvcy50b2FzdCgicGxlYXNlIHNjYW4geW91ciBwcmFjdGljZSBwZXJtaXQiKTsKICAgICAgICB9CiAgICAgICAgY2F0Y2gKICAgICAgICB7CiAgICAgICAgICAgIG9zLnRvYXN0KCJxciBjb2RlIHNjYW4gbm90IHN1cHBvcnRlZCBvbiB0aGlzIGRldmljZSIpOwoKICAgICAgICAgICAgY29uZmlnQm90LnRhZ3MudXVhYlNjYW4gPSBudWxsOwogICAgICAgIH0KCiAgICAgICAgc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCiAgICAgICAgbGlua3MubWFuaWZlc3RhdGlvbi5hYkNsaWNrKCk7CiAgICBgOwogICAgbWVudUJ1dHRvbi5sYWJlbCA9ICJwdWJsaXNoIGFiIjsKfQplbHNlCnsKICAgIG1lbnVCdXR0b24ubWVudUl0ZW1TdHlsZSA9IGDwn6esIHsiYm9yZGVyLXJhZGl1cyI6ICIwcHggMHB4IDlweCA5cHgiLCAibWFyZ2luLXRvcCI6ICIwcHgifWA7CiAgICBtZW51QnV0dG9uLmZvcm0gPSAiaW5wdXQiOwogICAgbWVudUJ1dHRvbi5tZW51SXRlbVNob3dTdWJtaXRXaGVuRW1wdHkgPSB0cnVlOwogICAgbWVudUJ1dHRvbi5tZW51SXRlbVRleHQgPSAhbGlua3MucmVtZW1iZXIubGlua3MuYWJCb3RGb2N1cyA/IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCIDogbGlua3MucmVtZW1iZXIubGlua3MuYWJCb3RGb2N1cy5pZDsKICAgIG1lbnVCdXR0b24udGFyZ2V0Qm90ID0gZ2V0TGluayhwb3NzaWJsZVB1Ymxpc2hCb3QpOwogICAgbWVudUJ1dHRvbi5vblN1Ym1pdCA9IGBAIGNvbmZpZ0JvdC50YWdzLm1hbnVhbFB1Ymxpc2ggPSB0cnVlOyAgIAoKICAgICAgICBpZiAodGhhdC50ZXh0ID09IG51bGwgJiYgbGlua3MucmVtZW1iZXIudGFncy5iYXNlQUIgJiYgIWxpbmtzLnJlbWVtYmVyLmxpbmtzLmFiQm90Rm9jdXMpCiAgICAgICAgewogICAgICAgICAgICB0aGF0LnRleHQgPSBsaW5rcy5yZW1lbWJlci50YWdzLmJhc2VBQjsKICAgICAgICB9CgogICAgICAgIGlmICh0aGF0LnRleHQpCiAgICAgICAgewogICAgICAgICAgICBsaW5rcy5tYW5hZ2VyLmFiUHVibGlzaEFCKHthYjogdGhhdC50ZXh0LCBtYW51YWxQdWJsaXNoOiB0cnVlLCBib3Q6IGxpbmtzLnRhcmdldEJvdH0pOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBvcy50b2FzdCgiYWIgbm90IHNwZWNpZmllZCIpOwoKICAgICAgICAgICAgc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCiAgICAgICAgICAgIGxpbmtzLm1hbmlmZXN0YXRpb24uYWJDbGljaygpOwogICAgICAgIH0KICAgIGA7Cn0KCi8vY3JlYXRlIHB1Ymxpc2ggYnV0dG9uCmxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKG1lbnVCdXR0b24pOwoKaWYgKGxpbmtzLnJlbWVtYmVyLmxpbmtzLmFiQm90Rm9jdXMpCnsKICAgIG1lbnVCdXR0b24uYWJNZW51U29ydE9yZGVyID0gODsKICAgIG1lbnVCdXR0b24uZm9ybSA9IG51bGw7CiAgICBtZW51QnV0dG9uLm1lbnVJdGVtU3R5bGUgPSBg8J+nrCB7ImJvcmRlci1yYWRpdXMiOiAiOXB4IDlweCA5cHggOXB4IiwgIm1hcmdpbi10b3AiOiAiNnB4In1gOwogICAgbWVudUJ1dHRvbi5sYWJlbCA9ICJjb3B5IHRvIGNsaXBib2FyZCI7CiAgICBtZW51QnV0dG9uLmZvcm1BZGRyZXNzID0gImZpbGVfY29weSI7CiAgICBtZW51QnV0dG9uLmNvbG9yID0gbGlua3MucmVtZW1iZXIudGFncy5hYkJhc2VDb2xvcjsKICAgIG1lbnVCdXR0b24udGFyZ2V0Qm90ID0gbGlua3MucmVtZW1iZXIudGFncy5hYkJvdEZvY3VzOwogICAgbWVudUJ1dHRvbi5vbkNsaWNrID0gYEAgbGV0IHNlbGVjdGVkQm90ID0gbGlua3MudGFyZ2V0Qm90OwogICAgbGV0IHByZXBwZWRCb3QgPSBKU09OLnN0cmluZ2lmeShzZWxlY3RlZEJvdCk7CiAgICBsZXQgc3RhdGUgPSB7fQoKICAgIHN0YXRlW2FiSW5zdE1lbW9yeS50YWdzLmFiRm9jdXNEYXRhXSA9IHNlbGVjdGVkQm90OwoKICAgIGxldCBuZXdGaWxlID0ge30KICAgIG5ld0ZpbGUudmVyc2lvbiA9IDE7CiAgICBuZXdGaWxlLnN0YXRlID0gc3RhdGU7CgogICAgdmFyIGZvcm1hdHRlZEZpbGUgPSBKU09OLnN0cmluZ2lmeShuZXdGaWxlKTsKCiAgICBvcy5zZXRDbGlwYm9hcmQoZm9ybWF0dGVkRmlsZSk7CgogICAgb3MudG9hc3QoImJvdCBjb3BpZWQgdG8gY2xpcGJvYXJkIik7CgogICAgc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCiAgICBsaW5rcy5tYW5pZmVzdGF0aW9uLmFiQ2xpY2soKTsKICAgIGA7CiAgICAKICAgIC8vY3JlYXRlICBjb3B5IHRvIGNsaXBib2FyZCBidXR0b24KICAgIGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKG1lbnVCdXR0b24pOwp9CmVsc2UgaWYgKCF1dWFiKQp7CiAgICBtZW51QnV0dG9uLmFiTWVudVNvcnRPcmRlciA9IDEwOwogICAgbWVudUJ1dHRvbi5mb3JtID0gbnVsbDsKICAgIG1lbnVCdXR0b24ubWVudUl0ZW1TdHlsZSA9IGDwn6esIHsiYm9yZGVyLXJhZGl1cyI6ICI5cHggOXB4IDlweCA5cHgiLCAibWFyZ2luLXRvcCI6ICIzcHgifWA7CiAgICBtZW51QnV0dG9uLmxhYmVsID0gInNjYW4iOwogICAgbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJxcl9jb2RlX3NjYW5uZXIiOwogICAgbWVudUJ1dHRvbi5jb2xvciA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJCYXNlQ29sb3I7CiAgICBtZW51QnV0dG9uLm9uQ2xpY2sgPSBgQCBjb25maWdCb3QudGFncy5wdWJsaXNoU2NhbiA9IHRydWU7IG9zLm9wZW5RUkNvZGVTY2FubmVyKCk7YDsKCiAgICAvL2NyZWF0ZSAgc2NhbiBidXR0b24KICAgIGxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKG1lbnVCdXR0b24pOwoKICAgIC8vTkVFRCBUTyBVUERBVEUKICAgIGlmIChjb25maWdCb3QudGFncy5naWcpCiAgICB7CiAgICAgICAgbWVudUJ1dHRvbi5hYk1lbnVTb3J0T3JkZXIgPSAtNTsKICAgICAgICBtZW51QnV0dG9uLm1lbnVJdGVtU3R5bGUgPSBg8J+nrCB7ImJvcmRlci1yYWRpdXMiOiAiOXB4IDlweCA5cHggOXB4IiwgIm1hcmdpbi10b3AiOiAiM3B4In1gOwogICAgICAgIG1lbnVCdXR0b24ubGFiZWwgPSAic3VibWl0IGdpZyI7CiAgICAgICAgbWVudUJ1dHRvbi5mb3JtQWRkcmVzcyA9ICJzZW5kIjsKICAgICAgICBtZW51QnV0dG9uLmNvbG9yID0gbGlua3MucmVtZW1iZXIudGFncy5hYkJhc2VDb2xvcjsKICAgICAgICBtZW51QnV0dG9uLm9uQ2xpY2sgPSBgQCBzaG91dCgiYWJDb2xsYWJTdWJtaXQiKTtgOwoKICAgICAgICBsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbihtZW51QnV0dG9uKTsKICAgIH0KfQoKbGV0IGhvc3RCdXR0b24gPSB7fTsKCmlmIChsaW5rcy5yZW1lbWJlci50YWdzLmhvc3RJRCkKewogICAgaG9zdEJ1dHRvbi5sYWJlbCA9ICJqb2luIGNvZGU6ICIgKyBsaW5rcy5yZW1lbWJlci50YWdzLmhvc3RJRC5zdWJzdHJpbmcoMCwzKSArICItIiArIGxpbmtzLnJlbWVtYmVyLnRhZ3MuaG9zdElELnN1YnN0cmluZygzKTsKfQplbHNlCnsKICAgIGhvc3RCdXR0b24ubGFiZWwgPSAiZ2VuZXJhdGUgam9pbiBjb2RlIjsKfQoKaG9zdEJ1dHRvbi5hYk1lbnUgPSB0cnVlOwpob3N0QnV0dG9uLmFiTWVudVNvcnRPcmRlciA9IDUwOwpob3N0QnV0dG9uLmFiTWVudVJlZnJlc2ggPSAiQCBkZXN0cm95KHRoaXNCb3QpOyI7Cmhvc3RCdXR0b24uZm9ybUFkZHJlc3MgPSAiZ3JvdXBfYWRkIjsKaG9zdEJ1dHRvbi5jb2xvciA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJCYXNlQ29sb3I7Cmhvc3RCdXR0b24ubGVhcm4gPSB0YWdzLmxlYXJuOwpob3N0QnV0dG9uLnJlbWVtYmVyID0gdGFncy5yZW1lbWJlcjsKaG9zdEJ1dHRvbi5vbkNsaWNrID0gYEAgbGlua3MubGVhcm4uYWJDcmVhdGVIb3N0KHRoaXNCb3QpOwoKaWYgKCFsaW5rcy5yZW1lbWJlci50YWdzLmhvc3RJRCkKewogICAgdGFncy5sYWJlbCA9ICdnZW5lcmF0aW5nIGNvZGUgbm93JzsKfWA7CgpsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbihob3N0QnV0dG9uKTsvL2dlbmVyYXRlIGEgaG9zdCBidXR0b24nAIegiLMChh4OYWJDb3JlTWVudUljb24CBACHoIizAsRtCWlvc19zaGFyZScAh6CIswKGHg9hYkNvcmVNZW51TGFiZWwCBACHoIizAs5tBXNoYXJlJwCHoIizAoYeE2FiQ29yZU1lbnVTb3J0T3JkZXICBACHoIizAtRtATMnAIegiLMChh4IcmVtZW1iZXICBACHoIizAtZtKPCflJdlNTM4MGE2Yi04YjRkLTRhOGItOGIwNC01OGUxZWIwM2U1ZTcnAIegiLMChh4LYWJQdWJsaXNoQUICBACHoIizAv1t6iBALy9zaG91dCgiYWJQdWJsaXNoQUIiLCB7YWI6ICIiLCBrZXk6ICIiLCB0YXJnZXQ6ICIifSk7CmFiLmxvZygiYWIgcHVibGlzaCIpOwoKbGV0IHByb2dyZXNzQnV0dG9uOwoKc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCi8vY2xlYXIgYWIgYnVpbGRlcgppZiAobGlua3MubWFuaWZlc3RhdGlvbikKewogICAgaWYgKGxpbmtzLm1hbmlmZXN0YXRpb24ubGlua3MuYWJCb3QpCiAgICB7CiAgICAgICAgZGVzdHJveShsaW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90KTsKICAgIH0KfQoKLy9wcm9ncmVzcyBiYXIgZm9yIG1hbnVhbCBwdWJsaXNoaW5nIGNvbmZpcm1hdGlvbgppZiAoY29uZmlnQm90LnRhZ3MubWFudWFsUHVibGlzaCkKewogICAgcHJvZ3Jlc3NCdXR0b24gPSBhd2FpdCBsaW5rcy5pbnB1dC5hYlByb2dyZXNzQmFyKGB1cGxvYWRpbmcgJHt0aGF0LmFifWApOwp9CgovL2FiIHZhcmlhYmxlcwpsZXQgYWJJRCA9IHRoYXQuYWI7CmxldCBrZXkgPSB0aGF0LmtleTsKbGV0IHRhcmdldCA9IHRoYXQudGFyZ2V0ID8gdGhhdC50YXJnZXQgOiB0aGF0LmJvdDsKbGV0IHJldHVyblR5cGUgPSB0aGF0LnJldHVyblR5cGU7CmxldCBwdWJsaWMgPSBjb25maWdCb3QudGFncy5wdWJsaWM7CmxldCBzdGF0ZSA9IHt9OwpsZXQgZm9ybWF0dGVkRmlsZSA9IHt9OwoKY29uZmlnQm90LnRhZ3MucHVibGljID0gbnVsbDsKCi8vdGhpcyBsb2dpYyBmb3JtYXRzIHRoZSBzcGVjaWZpZWQgYm90cyBhbmQgcGFja2FnZXMgdGhlbSBmb3IgcHVibGlzaGluZwppZiAoIUFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiB0YXJnZXQgIT0gbnVsbCAmJiB0YXJnZXQgIT0gdW5kZWZpbmVkKQp7Cgp9CmVsc2UgaWYgKCF0YXJnZXQgfHwgdGFyZ2V0Lmxlbmd0aCA8IDEpCnsKICAgIHRhcmdldCA9IGdldEJvdHMoYnlNb2Qoe3NwYWNlOiAic2hhcmVkIiwgYWJJZ25vcmU6IG51bGx9KSk7CgogICAgaWYgKHRhcmdldC5sZW5ndGggPCAxKQogICAgewogICAgICAgIG9zLnRvYXN0KCJObyBib3RzIGZvdW5kIHRvIHB1Ymxpc2giKTsKCiAgICAgICAgc2hvdXQoImFiTWVudVJlZnJlc2giKTsKCiAgICAgICAgbGlua3MubWFuaWZlc3RhdGlvbi5hYkNsaWNrKCk7CgogICAgICAgIHJldHVybjsKICAgIH0KfQoKLy90aGlzIGxvZ2ljIGhhbmRsZXMgZ2VuZXJhdGluZyBhIGtleSBmb3IgZW5jcnlwdGlvbiAob3B0aW9uYWwpCmlmIChjb25maWdCb3QudGFncy5lbmNyeXB0aW9uKQp7CiAgICBsZXQga2V5Q2hlY2s7CgogICAgY29uZmlnQm90LnRhZ3MuZW5jcnlwdGlvbiA9IG51bGw7CgogICAga2V5ID0gYXdhaXQgb3Muc2hvd0lucHV0KCIiLCB7CiAgICAgICAgdHlwZTogJ3NlY3JldCcsCiAgICAgICAgdGl0bGU6ICdlbnRlciBhIHNlY3JldCBrZXknCiAgICB9KTsKCiAgICBpZiAoa2V5KQogICAgewogICAgICAgIGtleUNoZWNrID0gYXdhaXQgb3Muc2hvd0lucHV0KCIiLCB7CiAgICAgICAgICAgIHR5cGU6ICdzZWNyZXQnLAogICAgICAgICAgICB0aXRsZTogJ2NvbmZpcm0gc2VjcmV0IGtleScKICAgICAgICB9KTsKICAgIH0KCiAgICBpZiAoa2V5ICE9IGtleUNoZWNrKSB7CiAgICAgICAgaWYgKCFrZXlDaGVjaykKICAgICAgICB7CiAgICAgICAgICAgIG9zLnRvYXN0KCJubyBrZXkgZW50ZXJlZCIpOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICBvcy50b2FzdCgia2V5cyBkbyBub3QgbWF0Y2giKTsKICAgICAgICB9CgogICAgICAgIHNob3V0KCJhYk1lbnVSZWZyZXNoIik7CgogICAgICAgIGxpbmtzLm1hbmlmZXN0YXRpb24uYWJDbGljaygpOwoKICAgICAgICByZXR1cm47CiAgICB9Cn0KCi8vZm9ybWF0dGluZyBib3RzIGZvciBmaWxlIHN0b3JhZ2UKaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkgCnsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFyZ2V0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGV0IGN1cnJlbnRCb3RJRCA9IHRhcmdldFtpXS5pZDsKICAgICAgICBsZXQgY3VycmVudEJvdCA9IHRhcmdldFtpXTsKICAgICAgICAKICAgICAgICBzdGF0ZVtjdXJyZW50Qm90SURdID0gY3VycmVudEJvdDsKICAgIH0KfQplbHNlIAp7CiAgICBzdGF0ZVt0YXJnZXQuaWRdID0gdGFyZ2V0Owp9CgovL2NoZWNrcyBmb3IgcHJldmlvdXMgZWdncyBhbmQgcmV0dXJucyBkYXRhIGZvciBwcmV2aW91c2x5IHB1Ymxpc2hlZCBhYidzCmxldCBlZ2dDaGVjayA9IGF3YWl0IHRoaXNCb3QuYWJQcmV2aW91c0VnZ0NoZWNrKHthYklEOiBhYklEfSk7CgovL2FkZGl0aW9uYWwgZmlsZSBkYXRhCmZvcm1hdHRlZEZpbGUudmVyc2lvbiA9IDE7CmZvcm1hdHRlZEZpbGUuc2lnbmF0dXJlID0gZWdnQ2hlY2suc2lnbmF0dXJlOwpmb3JtYXR0ZWRGaWxlLnN0YXRlID0gc3RhdGU7CgovL2FjdHVhbCBlbmNyeXB0aW9uIGlmIGNob3NlbgppZiAoa2V5KSAKewogICAgZm9ybWF0dGVkRmlsZSA9IEpTT04uc3RyaW5naWZ5KGZvcm1hdHRlZEZpbGUpOwoKICAgIGZvcm1hdHRlZEZpbGUgPSBjcnlwdG8uZW5jcnlwdChrZXksIGZvcm1hdHRlZEZpbGUpOwp9CgovL3B1Ymxpc2ggdGhlIGZpbGUKbGV0IHB1Ymxpc2hGaWxlID0gYXdhaXQgdGhpc0JvdC5hYlB1Ymxpc2hGaWxlKHtmaWxlOiBmb3JtYXR0ZWRGaWxlLCBmaWxlTmFtZTogYWJJRH0pOwoKLy9nYXRoZXIgYWRkaW9uYWwgZWdnIGRhdGEKZWdnQ2hlY2suZWdnRGF0YS5lZ2dWZXJzaW9uSGlzdG9yeS5wdXNoKHB1Ymxpc2hGaWxlLnVybCk7CmVnZ0NoZWNrLmVnZ0RhdGEubWF4VmVyc2lvbiA9IGVnZ0NoZWNrLmVnZ0RhdGEuZWdnVmVyc2lvbkhpc3RvcnkubGVuZ3RoOwplZ2dDaGVjay5lZ2dEYXRhLnRhcmdldFZlcnNpb24gPSBlZ2dDaGVjay5lZ2dEYXRhLmVnZ1ZlcnNpb25IaXN0b3J5Lmxlbmd0aDsKCi8vcHVibGlzaCBlZ2cvYWIgcmVjb3JkCmxldCBwdWJsaXNoUmVjb3JkID0gYXdhaXQgdGhpc0JvdC5hYlB1Ymxpc2hSZWNvcmQoe2RhdGE6IGVnZ0NoZWNrLmVnZ0RhdGEsIHJlY29yZE5hbWU6IGFiSUQsIHB1YmxpYzogcHVibGljfSk7CmxldCBzaXRlT3JpZ2luID0gbmV3IFVSTChjb25maWdCb3QudGFncy51cmwpLm9yaWdpbjsKCi8vcHVibGlzaGluZyBzaG91dApzaG91dCgib25BQlB1Ymxpc2hlZCIsIHtzdWNjZXNzOiBwdWJsaXNoRmlsZS5zdWNjZXNzLCBhYjogYWJJRCwgZmlsZUFkZHJlc3M6IHB1Ymxpc2hGaWxlLnVybH0pOwoKY29uc3Qgc3R1ZGlvTGluayA9IGF1dGhCb3QuaWQ7CgovL3NlbmQgZGF0YSBhbmQgZm9ybWF0IHVybCBpZiBkYXRhIHN1Y2Nlc3NmdWxseSBzZW50CmlmIChwdWJsaXNoUmVjb3JkLnN1Y2Nlc3MpCnsKICAgIGNvbnN0IGJpb3MgPSBwdWJsaWMgPyAicHVibGljIGluc3QiIDogInByaXZhdGUgaW5zdCI7CgogICAgaWYgKGtleSAmJiBjb25maWdCb3QudGFncy5tYW51YWxQdWJsaXNoKSAKICAgIHsKICAgICAgICBpZiAocHVibGljID09PSB0cnVlKQogICAgICAgIHsKICAgICAgICAgICAgb3Muc2V0Q2xpcGJvYXJkKHNpdGVPcmlnaW4gKyAiLz9wYXR0ZXJuPSIgKyBhYklEICsgIiZrZXk9IiArIGtleSArICImc3R1ZGlvPSIgKyBzdHVkaW9MaW5rICsgIiZiaW9zPSIgKyBiaW9zKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgb3MudG9hc3QoInVybCBjb3BpZWQgdG8gY2xpcGJvYXJkIik7CiAgICB9CiAgICBlbHNlIGlmIChjb25maWdCb3QudGFncy5tYW51YWxQdWJsaXNoKQogICAgewogICAgICAgIG9zLnNldENsaXBib2FyZChzaXRlT3JpZ2luICsgIi8/cGF0dGVybj0iICsgYWJJRCArICImc3R1ZGlvPSIgKyBzdHVkaW9MaW5rICsgIiZiaW9zPSIgKyBiaW9zKTsKCiAgICAgICAgb3MudG9hc3QoInVybCBjb3BpZWQgdG8gY2xpcGJvYXJkIik7CiAgICB9CgogICAgdHJ5IAogICAgewogICAgICAgIGF3YWl0IGFuYWx5dGljcy5yZWNvcmRFdmVudCgnYWJfZWdnX3B1Ymxpc2gnLCB7IGFiOiBhYklELCB2ZXJzaW9uOiBlZ2dDaGVjay5lZ2dEYXRhLmVnZ1ZlcnNpb25IaXN0b3J5Lmxlbmd0aCB9KTsKICAgIH0KICAgIGNhdGNoIChlKSAKICAgIHsKICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgIH0KfQplbHNlCnsKICAgIGNvbnNvbGUubG9nKHB1Ymxpc2hSZWNvcmQpOwp9CgovL2NsZWFyIHByb2dyZXNzIGJhcgppZiAocHJvZ3Jlc3NCdXR0b24pCnsKICAgIGRlc3Ryb3kocHJvZ3Jlc3NCdXR0b24pOwp9Cgpjb25maWdCb3QudGFncy5tYW51YWxQdWJsaXNoID0gbnVsbDsKCnJldHVybiBwdWJsaXNoUmVjb3JkOycAh6CIswKGHghhYklnbm9yZQIEAIegiLMC6I4BBHRydWUnAIegiLMChh4KYWJEb3dubG9hZAIEAIegiLMC7Y4ByANALy9kb3dubG9hZCBib3RzIChlaXRoZXIgc2VsZWN0ZWQgb3IgYWxsIGV4cGVyaWVuY2UpCmxldCBkb3dubG9hZEJvdHM7CgppZiAobGlua3MucmVtZW1iZXIubGlua3MuYWJCb3RGb2N1cykKewogICAgZG93bmxvYWRCb3RzID0gW2xpbmtzLnJlbWVtYmVyLmxpbmtzLmFiQm90Rm9jdXNdOwoKICAgIGFiLmxvZygiZG93bmxvYWRpbmcgYm90Iik7Cn0KZWxzZQp7CiAgICBkb3dubG9hZEJvdHMgPSBnZXRCb3RzKGJ5TW9kKHsiYWJJZ25vcmUiOiBudWxsLCAic3BhY2UiOiAic2hhcmVkIn0pKTsKCiAgICBhYi5sb2coImRvd25sb2FkaW5nIGluc3QiKTsKfQoKbGV0IGN1cnJlbnRJbnN0ID0gb3MuZ2V0Q3VycmVudEluc3QoKTsKCm9zLmRvd25sb2FkQm90cyhkb3dubG9hZEJvdHMsIGN1cnJlbnRJbnN0KTsKCnNob3V0KCJhYk1lbnVSZWZyZXNoIik7CgpsaW5rcy5tYW5pZmVzdGF0aW9uLmFiQ2xpY2soKTsnAIegiLMChh4NbWFuaWZlc3RhdGlvbgIEAIegiLMCtpIBKPCflJdkY2E1ZDk4Ny1jNGQ4LTQ2ZTQtYjYwYy1kYWE3YjJmNGRkYWQnAIegiLMChh4EbWVudQIEAIegiLMC3ZIBKPCflJdiMzBjNmM1ZC1hNGY3LTQyNjYtYmEzOC0zOTNkYzk1ZTFlY2InAIegiLMChh4SYWJQcmV2aW91c0VnZ0NoZWNrAgQAh6CIswKEkwGLDkAvL3RoaXMgZnVuY3Rpb24gY2hlY2tzIGZvciBwcmV2aW91cyBlZ2dzIGF0IGEgc3BlY2lmaWVkIGFiLCByZXR1cm5pbmcgYW55IGRhdGEgdGhhdCBpdCBmaW5kcwpjb25zdCBhYklEID0gdGhhdC5hYklEOwoKYXdhaXQgb3MucmVxdWVzdEF1dGhCb3QoKTsKCmxldCBlZ2dIaXN0b3J5OwpsZXQgZWdnSUQ7CmxldCB0YXJnZXRWZXJzaW9uTnVtOwpsZXQgbGFzdEhhc2g7CmxldCBtYXhWZXJzaW9uTnVtOwpsZXQgdXNlclJlY29yZCA9IGF1dGhCb3QuaWQ7CmxldCByZWNvcmRMb29rdXAgPSBhd2FpdCBvcy5nZXREYXRhKHVzZXJSZWNvcmQsIGFiSUQsIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJFbmRwb2ludCkuY2F0Y2goZSA9PiB7fSk7CgppZiAocmVjb3JkTG9va3VwLnN1Y2Nlc3MpIAp7CiAgICBlZ2dIaXN0b3J5ID0gcmVjb3JkTG9va3VwLmRhdGEuZWdnVmVyc2lvbkhpc3Rvcnk7CiAgICBlZ2dJRCA9IHJlY29yZExvb2t1cC5kYXRhLmVnZ0lEOwogICAgdGFyZ2V0VmVyc2lvbk51bSA9IGVnZ0hpc3RvcnkubGVuZ3RoICsgMTsKICAgIGxhc3RIYXNoID0gZWdnSGlzdG9yeVt0YXJnZXRWZXJzaW9uTnVtIC0gMV07CiAgICBtYXhWZXJzaW9uTnVtID0gZWdnSGlzdG9yeS5sZW5ndGggKyAxOwp9IAplbHNlIAp7CiAgICBlZ2dIaXN0b3J5ID0gW107CiAgICBlZ2dJRCA9IHV1aWQoKTsKICAgIHRhcmdldFZlcnNpb25OdW0gPSAxOwogICAgbGFzdEhhc2ggPSAibm9uZSI7CiAgICBtYXhWZXJzaW9uTnVtID0gMTsKfQoKaWYgKGNvbmZpZ0JvdC50YWdzLnZlcnNpb25EZWZpbmVkKSAKewogICAgY29uc3QgZGVmaW5lZFZlcnNpb24gPSBhd2FpdCBvcy5zaG93SW5wdXQobWF4VmVyc2lvbk51bSwgewogICAgICAgIHRpdGxlOiAnc2V0IGRlZmF1bHQgdmVyc2lvbicsCiAgICAgICAgcGxhY2Vob2xkZXI6IGAxIHRvICR7bWF4VmVyc2lvbk51bX0gKGxlYXZlIGFzICR7bWF4VmVyc2lvbk51bX0gZm9yIGxhdGVzdClgCiAgICB9KTsKCiAgICB0YXJnZXRWZXJzaW9uTnVtID0gZGVmaW5lZFZlcnNpb247CiAgICBjb25maWdCb3QudGFncy52ZXJzaW9uRGVmaW5lZCA9IG51bGw7Cn0KZWxzZSBpZiAoY29uZmlnQm90LnRhZ3MudGFyZ2V0VmVyc2lvbikgCnsKICAgIHRhcmdldFZlcnNpb25OdW0gPSBjb25maWdCb3QudGFncy50YXJnZXRWZXJzaW9uOwogICAgY29uZmlnQm90LnRhZ3MudGFyZ2V0VmVyc2lvbiA9IG51bGw7Cn0KCmxldCBlZ2cgPSB7fTsKCmVnZy5lZ2dWZXJzaW9uSGlzdG9yeSA9IGVnZ0hpc3Rvcnk7CmVnZy5lZ2dGb3JtYXRWZXJzaW9uID0gZWdnSUQ7CmVnZy50YXJnZXRWZXJzaW9uID0gdGFyZ2V0VmVyc2lvbk51bTsKZWdnLm1heFZlcnNpb24gPSBtYXhWZXJzaW9uTnVtOwplZ2cubGFiZWwgPSAidiIrdGFyZ2V0VmVyc2lvbk51bTsKZWdnLmFiSUQgPSBhYklEOwoKbGV0IHNpZ25hdHVyZSA9IHt9OwpsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7CmxldCB0aW1lID0gZGF0ZS5nZXRUaW1lKCk7CgpzaWduYXR1cmUucHJldmlvdXNIYXNoID0gbGFzdEhhc2g7CnNpZ25hdHVyZS5hYlZlcnNpb24gPSBsaW5rcy5yZW1lbWJlci50YWdzLmFiQ29yZVZlcnNpb24rIi4iK2xpbmtzLnJlbWVtYmVyLnRhZ3MuYWJDb3JlSXRlcmF0aW9uOwpzaWduYXR1cmUuZWdnVmVyc2lvbiA9IHRhZ3MuZWdnVVVJRDsKc2lnbmF0dXJlLmVnZ1ZlcnNpb25OdW0gPSB0YWdzLm92b1ZlcnNpb247CnNpZ25hdHVyZS50aW1lU3RhbXAgPSB0aW1lOwpzaWduYXR1cmUuY2FzdWFsT1NWZXJzaW9uID0gW29zLnZlcnNpb24oKV07CgpyZXR1cm4ge3NpZ25hdHVyZTogc2lnbmF0dXJlLCBlZ2dEYXRhOiBlZ2d9OygAh6CIswKGHgxhYkJvdFZlcnNpb24BfYcCJwCHoIizAoYeD2FiQm90TWVudUFjdGlvbgIEAIegiLMCkaEB0gFAaWYgKCFhdXRoQm90KQp7CiAgICB0aGlzQm90LmFiRG93bmxvYWQoKTsKICAgIAogICAgcmV0dXJuOwp9CmVsc2UgaWYgKCFhdXRoQm90LnRhZ3MucHJpdmFjeUZlYXR1cmVzLnB1Ymxpc2hEYXRhKQp7CiAgICB0aGlzQm90LmFiRG93bmxvYWQoKTsKICAgIAogICAgcmV0dXJuOwp9CgovL3NldCB1cCB0aGUgcHVibGlzaCBtZW51CnRoaXNCb3Qub25TdG9yZU1lbnUoKTsnAIegiLMChh4OYWJCb3RNZW51TGFiZWwCBACHoIizAuSiAQVzaGFyZScAh6CIswKGHg1hYkJvdE1lbnVJY29uAgQAh6CIswLqogEJaW9zX3NoYXJlJwCHoIizAoYeEmFiQm90TWVudVNvcnRPcmRlcgIEAIegiLMC9KIBATMnAIegiLMChh4FbGVhcm4CBACHoIizAvaiASjwn5SXNjY1N2I4NjUtZTk4My00NDAxLTlmYzktZjU0MThkMThhN2Y3JwCHoIizAoYeDWFiUHVibGlzaFVVQUICBACHoIizAp2jAecPQGNvbmZpZ0JvdC50YWdzLnV1YWJTY2FuID0gbnVsbDsKCmxldCB1dWFiQ29uZmlnID0gYXdhaXQgbGlua3Muc2VhcmNoLm9uTG9va3VwQUJFZ2dzKHthYklEOiBjb25maWdCb3QudGFncy51dWFiLCByZXR1cm5UeXBlOiAiZGF0YSJ9KTsKCmxldCBwaW4gPSBhd2FpdCBvcy5zaG93SW5wdXQobnVsbCx7CiAgICB0aXRsZTogImVudGVyIHBpbiIsCiAgICB0eXBlOiAic2VjcmV0Igp9KTsKCmlmIChwaW4pCnsKICAgIGxldCBwaCA9IGNyeXB0by5zaGEyNTYocGluKS5zdWJzdHJpbmcoMCw0KTsKCiAgICBpZiAocGggPT0gY29uZmlnQm90LnRhZ3MucGgpCiAgICB7CiAgICAgICAgbGV0IHJlY29yZEtleTsKICAgICAgICBsZXQgZWdnRGF0YUNoZWNrOwogICAgICAgIGxldCBlZ2dEYXRhOwoKICAgICAgICBmb3IgKHRhZyBpbiB1dWFiQ29uZmlnLnN0YXRlKQogICAgICAgIHsKICAgICAgICAgICAgaWYgKHRhZykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcmVjb3JkS2V5ID0gdXVhYkNvbmZpZy5zdGF0ZVt0YWddLnRhZ3MucmVjb3JkS2V5OwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAodGhhdCkKICAgICAgICB7CiAgICAgICAgICAgIGVnZ0RhdGFDaGVjayA9IGF3YWl0IG9zLmdldERhdGEocmVjb3JkS2V5LCB0aGF0LnRhcmdldFJlY29yZCwgbGlua3MucmVtZW1iZXIudGFncy5hYkVuZHBvaW50KTsKCiAgICAgICAgICAgIGlmIChlZ2dEYXRhQ2hlY2suc3VjY2VzcykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYgKGVnZ0RhdGFDaGVjay5kYXRhLmVnZ3MpCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgdHJ5CiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBlZ2dEYXRhID0gSlNPTi5wYXJzZShlZ2dEYXRhQ2hlY2suZGF0YS5lZ2dzKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlZ2dEYXRhLmxlbmd0aCA+PSAxMikKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3MudG9hc3QoInByYWN0aWNlIHBlcm1pdCBmdWxsIik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdXQoImFiUmVmcmVzaCIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYXRjaAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coImVnZyBkYXRhIG5vdCByZWFkYWJsZSIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgZWdnRGF0YSA9IFtdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIH0gCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGxpbmtzLnJlbWVtYmVyLm1hc2tzLmFiUmVjb3JkS2V5ID0gcmVjb3JkS2V5OwoKICAgICAgICBjb25maWdCb3QudGFncy5tYW51YWxQdWJsaXNoID0gdHJ1ZTsKCiAgICAgICAgdGhpc0JvdC5hYlB1Ymxpc2hBQih7YWI6IGNvbmZpZ0JvdC50YWdzLmFiLCBrZXk6IGNvbmZpZ0JvdC50YWdzLmtleX0pOwoKICAgICAgICBlZ2dEYXRhLnB1c2goY29uZmlnQm90LnRhZ3MuYWIpOwoKICAgICAgICBlZ2dEYXRhVG9QdWJsaXNoID0ge2VnZ3M6IEpTT04uc3RyaW5naWZ5KGVnZ0RhdGEpfTsKCiAgICAgICAgYXdhaXQgb3MucmVjb3JkRGF0YShyZWNvcmRLZXksIHRoYXQudGFyZ2V0UmVjb3JkLCBlZ2dEYXRhVG9QdWJsaXNoLCBsaW5rcy5yZW1lbWJlci50YWdzLmFiRW5kcG9pbnQpOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGF3YWl0IG9zLnRvYXN0KCJwaW4gZG9lcyBub3QgbWF0Y2giLCAyKTsKCiAgICAgICAgc2hvdXQoImFiUmVmcmVzaCIpOwogICAgfQp9CmVsc2UKewogICAgYXdhaXQgb3MudG9hc3QoIm5vIHBpbiBnaXZlbiIsIDIpOwoKICAgIHNob3V0KCJhYlJlZnJlc2giKTsKCiAgICByZXR1cm4KfScAh6CIswKGHgthYlFSUHVibGlzaAIEAIegiLMChbMB7wRAY29uZmlnQm90LnRhZ3MucHVibGlzaFNjYW4gPSBudWxsOwoKbGV0IHNjYW5uZWRVUkw7Cgp0cnkgCnsKICAgIHNjYW5uZWRVUkwgPSBuZXcgVVJMKHRoYXQpOwp9CmNhdGNoIChlKSB7CiAgICBzaG91dCgiYWJQdWJsaXNoQUIiLCB7YWI6IHRoYXR9KTsKCiAgICB0aGlzQm90LmFiUHVibGlzaEFCKHthYjogdGhhdH0pOwoKICAgIHJldHVybjsKfQoKaWYgKHNjYW5uZWRVUkwuc2VhcmNoUGFyYW1zLmdldCgicGgiKSkgCnsKICAgIGxldCB0YXJnZXRSZWNvcmQgPSBzY2FubmVkVVJMLnNlYXJjaFBhcmFtcy5nZXQoImluc3QiKTsKCiAgICBjb25maWdCb3QudGFncy51dWFiID0gc2Nhbm5lZFVSTC5zZWFyY2hQYXJhbXMuZ2V0KCJhYiIpOwogICAgY29uZmlnQm90LnRhZ3MucGggPSBzY2FubmVkVVJMLnNlYXJjaFBhcmFtcy5nZXQoInBoIik7CiAgICBjb25maWdCb3QudGFncy5hYiA9IHV1aWQoKTsKICAgIGNvbmZpZ0JvdC50YWdzLmtleSA9IHNjYW5uZWRVUkwuc2VhcmNoUGFyYW1zLmdldCgicGgiKTsKCiAgICB0aGlzQm90LmFiUHVibGlzaFVVQUIoe3RhcmdldFJlY29yZDogdGFyZ2V0UmVjb3JkfSk7Cn0KZWxzZSAKewogICAgb3MudG9hc3QoInVuc3VwcG9ydGVkIHVybCBmb3JtYXQiKTsKfScAh6CIswKGHgZzZWFyY2gCBACHoIizAvW3ASjwn5SXZDgzNzE0NDQtOTE1OC00NDM2LThmYzctODRjYzkxYjdmNTI1JwCHoIizAoYeB2FiU2hlbGwCBACHoIizApy4AQR0cnVlJwCHoIizAoYeDmFiUHVibGlzaEFza0lEAgQAh6CIswKhuAG/BUBhd2FpdCBvcy5yZXF1ZXN0QXV0aEJvdEluQmFja2dyb3VuZCgpOwoKaWYgKCFhdXRoQm90LnRhZ3MucHJpdmFjeUZlYXR1cmVzLmFsbG93UHVibGljRGF0YSB8fCAhYXV0aEJvdC50YWdzLnByaXZhY3lGZWF0dXJlcy5wdWJsaXNoRGF0YSkKewogICAgb3MudG9hc3QoIm5vdCBhdXRob3JpemVkIik7CgogICAgcmV0dXJuOwp9CgpsZXQgcHJvZ3Jlc3NCdXR0b24gPSBhd2FpdCBsaW5rcy5pbnB1dC5hYlByb2dyZXNzQmFyKGBwdWJsaXNoaW5nICR7dGhhdC5hc2tJRH1gKTsKCmF3YWl0IG9zLnJlcXVlc3RBdXRoQm90KCk7Cgpjb25zdCBwYXR0ZXJuSUQgPSB0aGF0LnBhdHRlcm5JRDsKY29uc3Qgc3R1ZGlvSUQgPSBhdXRoQm90LmlkOwpjb25zdCBhc2tJRCA9IHRoYXQuYXNrSUQucmVwbGFjZUFsbCgiLSIsICIiKTsKY29uc3QgZW5kcG9pbnQgPSBsaW5rcy5yZW1lbWJlci50YWdzLmFiRW5kcG9pbnQ7CmNvbnN0IHB1Ymxpc2hBc2sgPSBhd2FpdCBvcy5yZWNvcmREYXRhKGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJSZWNvcmRLZXksIGFza0lELCB7cGF0dGVybklEOiBwYXR0ZXJuSUQsIHN0dWRpb0lEOiBzdHVkaW9JRH0sIHtlbmRwb2ludDogZW5kcG9pbnQsIHVwZGF0ZVBvbGljeTogW2F1dGhCb3QuaWRdfSk7CgppZiAocHJvZ3Jlc3NCdXR0b24pCnsKICAgIGRlc3Ryb3kocHJvZ3Jlc3NCdXR0b24pOwp9CgpyZXR1cm4gcHVibGlzaEFzazsnAIegiLMChh4FaW5wdXQCBACHoIizAuG9ASjwn5SXZjg2MDI4NzgtYzJlZi00OGJkLTg1YTAtOGQ2MzUxZWI0MTIwJwCHoIizAoYeC2FiRW1iZWRMaW5rAgQAh6CIswKIvgGkA0Bjb25zdCBhYiA9IHRoYXQgPyB0cnVlIDogZmFsc2U7CmNvbnN0IGVtYmVkTGluayA9IGFiID8gImFiPSIgKyB0aGF0IDogImluc3Q9IiArIGNvbmZpZ0JvdC50YWdzLmluc3Q7CmNvbnN0IHNpdGVPcmlnaW4gPSBuZXcgVVJMKGNvbmZpZ0JvdC50YWdzLnVybCkub3JpZ2luOwpjb25zdCBlbWJlZFRleHQgPSBgPCFET0NUWVBFIGh0bWw+CsKgwqDCoMKgPGh0bWw+CsKgwqDCoMKgwqDCoMKgwqA8aGVhZD48L2hlYWQ+CsKgwqDCoMKgwqDCoMKgwqA8Ym9keT4KwqDCoMKgwqDCoMKgwqDCoMKgwqDCoMKgPGlmcmFtZSBzcmM9IiR7c2l0ZU9yaWdpbiArICIvPyIgKyBlbWJlZExpbmt9IiB3aWR0aD0iMTAwJSIgaGVpZ2h0PSI0MDAiIC8+CsKgwqDCoMKgwqDCoMKgwqA8L2JvZHk+CsKgwqDCoMKgPC9odG1sPmA7CgpyZXR1cm4gZW1iZWRUZXh0OycBBGJvdHMkZDgzNzE0NDQtOTE1OC00NDM2LThmYzctODRjYzkxYjdmNTI1AScAh6CIswKBwQEGc3lzdGVtAgQAh6CIswKCwQEPYWIuc2hlbGwuc2VhcmNoJwCHoIizAoHBAQRmb3JtAgQAh6CIswKSwQEHbm90aGluZycAh6CIswKBwQEOYWJSZXRyaWV2ZUZpbGUCBACHoIizAprBAYIBQC8vcHVsbCBkb3duIGZpbGUgZGF0YQppZiAoIXRoYXQudXJsKQp7CiAgICByZXR1cm4gIm5vIGZpbGUgdXJsIHN1cHBsaWVkIjsKfQoKbGV0IGRhdGEgPSBhd2FpdCBvcy5nZXRGaWxlKHRoYXQudXJsKTsKCnJldHVybiBkYXRhOycAh6CIswKBwQEQYWJSZXRyaWV2ZVJlY29yZAIEAIegiLMCncIBygRALy9yZXRyaWV2ZSBzcGVjaWZpZWQgcmVjb3JkCmxldCByZWNvcmROYW1lID0gdGhhdC5yZWNvcmROYW1lOwoKbGV0IHJlY29yZEtleTsKCmlmICh0aGF0LnJlY29yZEtleSkKewogICAgcmVjb3JkS2V5ID0gdGhhdC5yZWNvcmRLZXk7Cn0KZWxzZSBpZiAoYXV0aEJvdCkKewogICAgaWYgKGF1dGhCb3QuaWQgPT0gY29uZmlnQm90LnRhZ3Muc3R1ZGlvKQogICAgewogICAgICAgIHJlY29yZEtleSA9IGF1dGhCb3QuaWQ7CgogICAgICAgIGF3YWl0IG9zLmdyYW50SW5zdEFkbWluUGVybWlzc2lvbihyZWNvcmRLZXkpOwogICAgfQp9CgpsZXQgcmVjb3JkRW5kcG9pbnQgPSB0aGF0LnJlY29yZEVuZHBvaW50ID8gdGhhdC5yZWNvcmRFbmRwb2ludCA6IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJFbmRwb2ludDsKCmlmICghcmVjb3JkTmFtZSkKewogICAgcmV0dXJuICJubyByZWNvcmQgbmFtZSBzdXBwbGllZCI7Cn0KCmxldCBnZXRSZWNvcmQgPSBhd2FpdCBvcy5nZXREYXRhKHJlY29yZEtleSwgcmVjb3JkTmFtZSwgcmVjb3JkRW5kcG9pbnQpOwoKLy9BREQgYWRkaXRpb25hbCBlcnJvciBoYW5kbGluZz8KCnJldHVybiBnZXRSZWNvcmQ7JwCHoIizAoHBAQhyZW1lbWJlcgIEAIegiLMC6MYBKPCflJdlNTM4MGE2Yi04YjRkLTRhOGItOGIwNC01OGUxZWIwM2U1ZTcnAIegiLMCgcEBDW1hbmlmZXN0YXRpb24CBACHoIizAo/HASjwn5SXZGNhNWQ5ODctYzRkOC00NmU0LWI2MGMtZGFhN2IyZjRkZGFkJwCHoIizAoHBAQ5vbkxvb2t1cEFCRWdncwIEAIegiLMCtscBsB9ALy9zaG91dCgib25Mb29rdXBBQkVnZ3MiLCB7YWJJRDogYWJJRCwga2V5OiBrZXksIGF1dG9IYXRjaDogYm9vbGVhbiwgcmV0dXJuVHlwZTogZGF0YS9udWxsfSk7CmFiLmxvZygiYWIgYWIgbG9hZCAiICsgdGhhdCk7CgovL2NsZWFyIGFiLTEKaWYgKGxpbmtzLm1hbmlmZXN0YXRpb24pCnsKICAgIGxpbmtzLm1hbmlmZXN0YXRpb24uYWJDbGljaygpOwp9CgpsZXQgcHJvZ3Jlc3NCdXR0b24gPSBhd2FpdCBsaW5rcy5pbnB1dC5hYlByb2dyZXNzQmFyKGBsb2FkaW5nICR7dGhhdC5hYklEfWApOwoKLy9jb25zdGFudHMgaW4gcmVnYXJkcyB0byB0aGUgYWIgdG8gYmUgbG9va2VkIHVwCmNvbnN0IGFiSUQgPSB0aGF0LmFiSUQ7CmNvbnN0IGluaXRpYWxCb290ID0gdGhhdC5pbml0aWFsQm9vdDsKY29uc3QgYXV0b0hhdGNoID0gdGhhdC5hdXRvSGF0Y2g7CgovL3JlY29yZEtleSBpcyB2YXJpYWJsZSBkZXBlbmRpbmcgb24gaWYgcHVibGljCmxldCByZWNvcmRLZXkgPSB0aGF0LnJlY29yZEtleSA/PyBjb25maWdCb3QudGFncy5zdHVkaW87CmxldCBwb3NzaWJsZUF1dGggPSBhdXRoQm90ID8gYXV0aEJvdCA6IHRydWU7CmxldCBnZXRSZWNvcmQgPSBhd2FpdCBvcy5nZXREYXRhKHJlY29yZEtleSwgYWJJRCwgbGlua3MucmVtZW1iZXIudGFncy5hYkVuZHBvaW50KTsKCi8vdmFyaWFibGVzIGZvciBlZ2cvYWIgaGF0Y2hpbmcKbGV0IHJldHVyblR5cGUgPSB0aGF0LnJldHVyblR5cGU7CmxldCBrZXkgPSB0aGF0LmtleTsKbGV0IG5ld0VnZzsKCi8vdGhpcyBsb2dpYyBoYW5kbGVzIHRoZSByZXRyaWV2ZWQgZGF0YSwgc2VhcmNoZXMgYWdhaW4gaWYgbm9uZSBjYW1lIHRocm91Z2gKaWYgKCFnZXRSZWNvcmQuc3VjY2VzcyAmJiAoIXJlY29yZEtleSB8fCBwb3NzaWJsZUF1dGggIT0gcmVjb3JkS2V5KSkKewogICAgaWYgKCFyZWNvcmRLZXkpCiAgICB7CiAgICAgICAgYXdhaXQgb3MucmVxdWVzdEF1dGhCb3QoKTsKCiAgICAgICAgcmVjb3JkS2V5ID0gYXV0aEJvdC5pZDsKICAgIH0KCiAgICBhd2FpdCBvcy5ncmFudEluc3RBZG1pblBlcm1pc3Npb24ocmVjb3JkS2V5KTsKCiAgICBnZXRSZWNvcmQgPSBhd2FpdCBvcy5nZXREYXRhKHJlY29yZEtleSwgYWJJRCwgbGlua3MucmVtZW1iZXIudGFncy5hYkVuZHBvaW50KTsKfQoKaWYgKCFnZXRSZWNvcmQuc3VjY2VzcykKewogICAgb3MudG9hc3QoYG5vIGRhdGEgZm91bmQgaW4gJHthYklEfWApOwoKICAgIHNob3V0KCJhYk1lbnVSZWZyZXNoIik7CgogICAgaWYgKHByb2dyZXNzQnV0dG9uKQogICAgewogICAgICAgIGRlc3Ryb3kocHJvZ3Jlc3NCdXR0b24pOwogICAgfQoKICAgIHJldHVybiB7c3VjY2VzczogZmFsc2V9Owp9CmVsc2UKewogICAgLy9wYWNrYWdlIHRoZSByZWNvcmQgZGF0YQogICAgbmV3RWdnID0gZ2V0UmVjb3JkLmRhdGE7Cn0KCi8vdGhpcyBsb2dpYyBwYXJzZXMgdGhlIGRhdGEgZGVwZW5kYW50IG9uIGhvdyBpdCB3YXMgYWNjZXNzZWQvZ2FpbmVkCmlmIChyZXR1cm5UeXBlID09ICJkYXRhIiAmJiBnZXRSZWNvcmQuc3VjY2VzcykKewogICAgbGV0IHZlcnNpb24gPSBnZXRSZWNvcmQuZGF0YS50YXJnZXRWZXJzaW9uIC0gMTsKCiAgICBpZiAodGhhdC5hYlZlcnNpb24pCiAgICB7CiAgICAgICAgaWYgKCFpc05hTih0aGF0LmFiVmVyc2lvbikpCiAgICAgICAgewogICAgICAgICAgICB2ZXJzaW9uID0gdGhhdC5hYlZlcnNpb24gLSAxOwogICAgICAgIH0KICAgIH0KCiAgICBsZXQgZWdnRGF0YVVSTCA9IGdldFJlY29yZC5kYXRhLmVnZ1ZlcnNpb25IaXN0b3J5W3ZlcnNpb25dOwogICAgbGV0IHJldHVybkRhdGEgPSBhd2FpdCBvcy5nZXRGaWxlKGVnZ0RhdGFVUkwpOwoKICAgIGlmIChwcm9ncmVzc0J1dHRvbikKICAgIHsKICAgICAgICBkZXN0cm95KHByb2dyZXNzQnV0dG9uKTsKICAgIH0KCiAgICByZXR1cm4gcmV0dXJuRGF0YTsKfQplbHNlIGlmIChyZXR1cm5UeXBlID09ICJkYXRhIikKewogICAgbGV0IHZlcnNpb25BcnJheSA9IEpTT04ucGFyc2UobmV3RWdnLmVnZ1ZlcnNpb25IaXN0b3J5KTsKICAgIGxldCBmaWxlVVVJRCA9IHZlcnNpb25BcnJheVtuZXdFZ2cubWF4VmVyc2lvbiAtIDFdOwogICAgbGV0IGZpbGVuYW1laGFzaExUTSA9IGNyeXB0by5zaGEyNTYoZmlsZVVVSUQpOwogICAgbGV0IGZpbGV1cmxoYXNoTFRNID0gImF1eF8iICsgZmlsZW5hbWVoYXNoTFRNICsgJy5hdXgnOwogICAgbGV0IHRhcmdldExUTVVSTCA9ICJodHRwczovL2J1aWxkZXItbHRtLWZpbGVzLnMzLmFtYXpvbmF3cy5jb20vIiArIGZpbGV1cmxoYXNoTFRNOwogICAgbGV0IG8gPSB7fTsKICAgIG8ubWV0aG9kID0gIkdFVCI7CiAgICBvLnVybCA9IHRhcmdldExUTVVSTDsKCiAgICBmaWxlR2V0ID0gYXdhaXQgd2ViaG9vayhvKTsKCiAgICBpZiAocHJvZ3Jlc3NCdXR0b24pCiAgICB7CiAgICAgICAgZGVzdHJveShwcm9ncmVzc0J1dHRvbik7CiAgICB9CgogICAgaWYgKGZpbGVHZXQuc3RhdHVzICE9IDIwMCkKICAgIHsKICAgICAgICBvcy50b2FzdCgibm8gZmlsZSBmb3VuZCIpOwoKICAgICAgICBzaG91dCgiYWJSZWZyZXNoIik7CgogICAgICAgIHJldHVybiB7c3VjY2VzczogZmFsc2V9OwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIGZpbGVHZXQgPSBmaWxlR2V0LmRhdGE7CiAgICB9CgogICAgcmV0dXJuIGZpbGVHZXQ7Cn0KCi8vYWIgc3BlY2lmaWMgdmFyaWFibGVzIGZvciB1bmRlcnN0YW5kaW5nIGlmIGEgcG9zaXRpb24gaXMgc3BlY2lmaWVkCmxldCBjdXJyZW50RGltOwpsZXQgc3BhY2VNb2Q7CmxldCBkaW1lbnNpb25YOwpsZXQgZGltZW5zaW9uWTsKbGV0IGRpbU1vZDsKCi8vaGFuZGxlIGRpbWVuc2lvbiBpZGVudGlmaWNhdGlvbgppZiAobGlua3MubWFuaWZlc3RhdGlvbikKewogICAgaWYgKGxpbmtzLm1hbmlmZXN0YXRpb24ubGlua3MuYWJCb3QpCiAgICB7CiAgICAgICAgY29uc3QgYWJCb3QgPSBsaW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90OwoKICAgICAgICBjdXJyZW50RGltID0gYWJCb3QudGFncy5kaW1lbnNpb247CiAgICB9Cn0KZWxzZQp7CiAgICBjdXJyZW50RGltID0gb3MuZ2V0Q3VycmVudERpbWVuc2lvbigpOwp9CgovL2NoZWNrcyBmb3IgZ3JpZCBmb2N1cwppZiAoIWxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJHcmlkRm9jdXMpIAp7CiAgICBkaW1lbnNpb25YID0gbnVsbDsKICAgIGRpbWVuc2lvblkgPSBudWxsOwp9CmVsc2UKewogICAgbGV0IGhhdGNoUG9pbnQgPSBsaW5rcy5yZW1lbWJlci50YWdzLmFiR3JpZEZvY3VzOwoKICAgIGN1cnJlbnREaW0gPSBoYXRjaFBvaW50LmRpbWVuc2lvbjsKICAgIGRpbWVuc2lvblggPSBoYXRjaFBvaW50LnBvc2l0aW9uLng7CiAgICBkaW1lbnNpb25ZID0gaGF0Y2hQb2ludC5wb3NpdGlvbi55OwogICAgc3BhY2VNb2QgPSB7c3BhY2U6ICJzaGFyZWQifTsKfQoKLy90aGlzIGxvZ2ljIGhhbmRsZXMgbG9naWMgYXJvdW5kIGF1dG9IYXRjaCB2cyBtYW51YWwgaGF0Y2hpbmcKaWYgKCFhdXRvSGF0Y2ggJiYgY29uZmlnQm90LnRhZ3MucGF0dGVybiA9PSBudWxsKQp7CiAgICBkaW1Nb2QgPSB7W2N1cnJlbnREaW1dOiB0cnVlLCBbY3VycmVudERpbSsiWCJdOiBkaW1lbnNpb25YLCBbY3VycmVudERpbSsiWSJdOiBkaW1lbnNpb25ZLCBkaW1lbnNpb246IGN1cnJlbnREaW19Owp9CmVsc2UKewogICAgaWYgKGNvbmZpZ0JvdC50YWdzLmtleSAmJiAhdGhhdC5rZXkpCiAgICB7CiAgICAgICAga2V5ID0gY29uZmlnQm90LnRhZ3Mua2V5CiAgICB9CgogICAgZGltTW9kID0ge2F1dG9IYXRjaDogdHJ1ZSwga2V5OiBrZXl9Owp9CgovL2NhbGwgZm9yIG92byB3aXRoIGluZm9ybWF0aW9uIHByb3ZpZGVkCnRoaXNCb3QubWFuaWZlc3RPdm8oe2FiSUQ6IGFiSUQsIGRpbU1vZDogZGltTW9kLCBzcGFjZU1vZDogc3BhY2VNb2QsIGVnZ0RhdGE6IG5ld0VnZywgaW5pdGlhbEJvb3Q6IGluaXRpYWxCb290fSk7CgppZiAocHJvZ3Jlc3NCdXR0b24pCnsKICAgIGRlc3Ryb3kocHJvZ3Jlc3NCdXR0b24pOwp9CgpyZXR1cm4ge3N1Y2Nlc3M6IHRydWV9OycAh6CIswKBwQELbWFuaWZlc3RPdm8CBACHoIizAufmAecKQC8vZWdnIHZpc3VhbGl6YXRpb24Kc2hvdXQoImFiTWVudVJlc2V0Iik7CgppZiAobGlua3MubWFuaWZlc3RhdGlvbikKewogICAgaWYgKGxpbmtzLm1hbmlmZXN0YXRpb24ubGlua3MuYWJCb3QpCiAgICB7CiAgICAgICAgZGVzdHJveShsaW5rcy5tYW5pZmVzdGF0aW9uLmxpbmtzLmFiQm90KTsKICAgIH0KfQoKaWYgKGxpbmtzLm92b0JvdCkKewogICAgZGVzdHJveShsaW5rcy5vdm9Cb3QpOwp9CgpsZXQgc3BhY2VNb2QgPSB0aGF0LnNwYWNlTW9kOwpsZXQgZGltTW9kID0gdGhhdC5kaW1Nb2Q7CmxldCBlZ2dEYXRhID0gdGhhdC5lZ2dEYXRhOwpsZXQgZWdnTW9kID0ge307CgplZ2dNb2Quc3BhY2UgPSAidGVtcExvY2FsIjsKZWdnTW9kLmluaXRpYWxUaW1lciA9IHRydWU7CmVnZ01vZC5hYklEID0gdGhhdC5hYklEOwplZ2dNb2QuaW5pdGlhbEJvb3QgPSB0aGF0LmluaXRpYWxCb290OwplZ2dNb2QubWFuYWdlciA9ICLwn5SXIiArIHRoaXNCb3QuaWQ7CmVnZ01vZC5vbkNsaWNrID0gYEAgbGlua3MubWFuYWdlci5pbnRlcmFjdE92bygpO2A7CmVnZ01vZC5vbkNyZWF0ZSA9IGBAIGlmICh0YWdzLmF1dG9IYXRjaCkKewogICAgbGlua3MubWFuYWdlci5oYXRjaE92byh0aGlzQm90KTsKfQplbHNlCnsKICAgIHRhZ3MucHJvZ3Jlc3NCYXIgPSAwOyAKCiAgICBzZXRUaW1lb3V0KCgpID0+IHt3aGlzcGVyKHRoaXNCb3QsICJlZ2dUaW1lciIpO30sIDc1KTsKfWA7CmVnZ01vZC5mb3JtID0gImVnZyI7CmVnZ01vZC5wcm9ncmVzc0JhckNvbG9yID0gIiNCRjVFNjYiOwplZ2dNb2QucHJvZ3Jlc3NCYXJCYWNrZ3JvdW5kQ29sb3IgPSAiIzU5Mjk4OSI7CmVnZ01vZC5sYWJlbFNpemUgPSAwLjU7CmVnZ01vZC5sYWJlbENvbG9yID0gIiM0MDQwNDAiOwplZ2dNb2Qub25Qb2ludGVyRW50ZXIgPSAiQCBvcy50b2FzdCh0YWdzLmFiSUQgKyAnIHYnK3RhZ3MudGFyZ2V0VmVyc2lvbik7IjsKZWdnTW9kLmxhYmVsUG9zaXRpb24gPSAiZnJvbnQiOwplZ2dNb2Qub3JpZW50YXRpb25Nb2RlID0gImJpbGxib2FyZEZyb250IjsKZWdnTW9kLm9uRGVzdHJveSA9IGBAIGxpbmtzLm1hbmFnZXIubWFza3Mub3ZvQm90ID0gbnVsbDtgOwplZ2dNb2QuZWdnVGltZXIgPSBgQCBpZiAodGFncy5wcm9ncmVzc0JhciA8IDEpIAp7CiAgICB0YWdzLnByb2dyZXNzQmFyICs9IDAuMTsKCiAgICBzZXRUaW1lb3V0KCgpID0+IHt3aGlzcGVyKHRoaXNCb3QsICJlZ2dUaW1lciIpO30sIDc1KTsKfQplbHNlCnsKICAgIHRoaXNCb3Qub25DbGljaygpOwogICAgCiAgICB0YWdzLnByb2dyZXNzQmFyID0gbnVsbDsKfWA7CgpsZXQgb3ZvID0gY3JlYXRlKGVnZ0RhdGEsIGVnZ01vZCwgZGltTW9kLCBzcGFjZU1vZCk7CgptYXNrcy5vdm9Cb3QgPSAi8J+UlyIgKyBvdm8uaWQ7JwCHoIizAoHBAQlvbktleURvd24CBACHoIizAsvxAdoFQC8vaGlkZGVuIHZlcnNpb24gYnV0dG9uIGZvciBoYXRjaCBtZW51CmlmICghbGlua3Mub3ZvQm90IHx8IGNvbmZpZ0JvdC50YWdzLm1lbnVQb3J0YWwgIT0gIm92byIpCnsKICAgIHJldHVybjsKfQoKaWYgKHRoYXQua2V5cyA9PSAiU2hpZnQiKQp7CiAgICBsZXQgdmVyc2lvbkJ1dHRvbiA9IHt9OwoKICAgIHZlcnNpb25CdXR0b24ub3ZvID0gdHJ1ZTsKICAgIHZlcnNpb25CdXR0b24ub3ZvU29ydE9yZGVyID0gLTE7CiAgICB2ZXJzaW9uQnV0dG9uLm1heFZlcnNpb24gPSBsaW5rcy5vdm9Cb3QudGFncy5tYXhWZXJzaW9uOwogICAgdmVyc2lvbkJ1dHRvbi5tYW5hZ2VyID0gIvCflJciICsgdGhpc0JvdC5pZDsKICAgIHZlcnNpb25CdXR0b24ubGFiZWwgPSAiY2hhbmdlIGVnZyB2ZXJzaW9uIjsKICAgIHZlcnNpb25CdXR0b24ubGFiZWxBbGlnbm1lbnQgPSAiY2VudGVyIjsKICAgIHZlcnNpb25CdXR0b24ub3ZvTWVudVJlc2V0ID0gIkAgZGVzdHJveSh0aGlzQm90KTsiOwogICAgdmVyc2lvbkJ1dHRvbi5jb2xvciA9ICIjRkZGRkZGIjsKICAgIHZlcnNpb25CdXR0b24ub25LZXlVcCA9ICJAIGlmKHRoYXQua2V5cyA9PSAnU2hpZnQnKXtkZXN0cm95KHRoaXNCb3QpfTsiOwogICAgdmVyc2lvbkJ1dHRvbi5vbkNsaWNrID0gIkAgbGlua3MubWFuYWdlci5jaGFuZ2VPdm9WZXJzaW9uKCk7IjsKCiAgICBsaW5rcy5tZW51LmFiQ3JlYXRlTWVudUJ1dHRvbih2ZXJzaW9uQnV0dG9uKTsKfScAh6CIswKBwQEIaGF0Y2hPdm8CBACHoIizAqT3AbwLQC8vbG9naWMgZm9yIGhhdGNoaW5nIG9mIGFuIGFiCnNob3V0KCdvdm9NZW51UmVzZXQnKTsKCi8vZGF0YSBpbiByZWdhcmRzIHRvIHdoYXQgYWIgaXMgZ29pbmcgdG8gYmUgaGF0Y2hlZApjb25zdCBvdm8gPSB0aGF0OwoKLy9oYXRjaCBzcGVjaWZpYyB2YXJpYWJsZXMKbGV0IGluaXRpYWxCb290ID0gb3ZvLnRhZ3MuaW5pdGlhbEJvb3Q7CmxldCB0YXJnZXRWZXJzaW9uID0gb3ZvLnRhZ3MudGFyZ2V0VmVyc2lvbjsKCmlmIChjb25maWdCb3QudGFncy5hYlZlcnNpb24gfHwgY29uZmlnQm90LnRhZ3MucGF0dGVyblZlcnNpb24pCnsKICAgIGlmIChjb25maWdCb3QudGFncy5wYXR0ZXJuID09IG92by50YWdzLmFiSUQpCiAgICB7CiAgICAgICAgdGFyZ2V0VmVyc2lvbiA9IGNvbmZpZ0JvdC50YWdzLmFiVmVyc2lvbiA/PyBjb25maWdCb3QudGFncy5wYXR0ZXJuVmVyc2lvbjsKICAgIH0KfQoKbGV0IHZlcnNpb25BcnJheSA9IG92by50YWdzLmVnZ1ZlcnNpb25IaXN0b3J5OwpsZXQgZmlsZVVSTCA9IHZlcnNpb25BcnJheVt0YXJnZXRWZXJzaW9uIC0gMV07CmxldCBrZXkgPSBvdm8udGFncy5rZXkgPyBvdm8udGFncy5rZXkgOiBjb25maWdCb3QudGFncy5rZXk7CmxldCBmaWxlR2V0OwoKLy9hY3R1YWwgZmlsZSByZXRyaWV2YWwKdHJ5CnsKICAgIGZpbGVHZXQgPSBhd2FpdCBvcy5nZXRGaWxlKGZpbGVVUkwpOwp9CmNhdGNoIChlcnJvcikKewogICAgY29uc29sZS5sb2coZXJyb3IpOwoKICAgIG9zLnRvYXN0KCJubyBmaWxlIGZvdW5kIik7CgogICAgcmV0dXJuOwp9CgovL2hhbmRsaW5nIGZvciBlbmNyeXB0ZWQgYWIgZmlsZQppZiAoY3J5cHRvLmlzRW5jcnlwdGVkKGZpbGVHZXQpKQp7CiAgICBpZiAoIWtleSkKICAgIHsKICAgICAgICBrZXkgPSBhd2FpdCBvcy5zaG93SW5wdXQoJycsIHsKICAgICAgICAgICAgdHlwZTogJ3NlY3JldCcsCiAgICAgICAgICAgIHRpdGxlOiAnRW50ZXIga2V5JwogICAgICAgIH0pOwogICAgfQoKICAgIHRyeQogICAgewogICAgICAgIGZpbGVHZXQgPSBjcnlwdG8uZGVjcnlwdChrZXksIGZpbGVHZXQpOwogICAgfQogICAgY2F0Y2ggKGVycm9yKQogICAgewogICAgICAgIGNvbnNvbGUubG9nKGVycm9yKQoKICAgICAgICBvcy50b2FzdCgia2V5IGRvZXMgbm90IG1hdGNoIGZpbGUiKTsKCiAgICAgICAgcmV0dXJuOwogICAgfQogICAKICAgIGZpbGVHZXQgPSBKU09OLnBhcnNlKGZpbGVHZXQpOwoKICAgIGZpbGVHZXQgPSBmaWxlR2V0LnN0YXRlOwp9CmVsc2UKewogICAgZmlsZUdldCA9IGZpbGVHZXQuc3RhdGU7Cn0KCi8vY2xlYW4gdXAKZGVzdHJveShvdm8pOwoKLy9nZW5lcmF0ZSBib3RzIGJhc2VkIG9uIHRoZSBmaWxlIHJldHJpZXZlZApsaW5rcy5jcmVhdGUuYWJDcmVhdGVCb3RzKHtib3RzOiBmaWxlR2V0LCBvcmlnaW46IG92by50YWdzLmFiSUQsIHZlcnNpb246IHRhcmdldFZlcnNpb24sIGluaXRpYWxCb290OiBpbml0aWFsQm9vdH0pOycAh6CIswKBwQELaW50ZXJhY3RPdm8CBACHoIizAuGCAo4HQC8vbWFudWFsIGhhdGNoIG1lbnUKY29uc3Qgb3ZvQm90ID0gdGhhdCA/IHRoYXQgOiBsaW5rcy5vdm9Cb3Q7CgppZiAoIW92b0JvdCkKewogICAgcmV0dXJuOwp9CgpzaG91dCgib3ZvTWVudVJlc2V0Iik7Cgpjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9ICJvdm8iOwoKbWFza3Mub25HcmlkQ2xpY2sgPSBgQCBzaG91dCgib3ZvTWVudVJlc2V0Iik7YDsKbWFza3Mub3ZvTWVudVJlc2V0ID0gYEAgbWFza3Mub25HcmlkQ2xpY2sgPSBudWxsOwptYXNrcy5vdm9NZW51UmVzZXQgPSBudWxsOwoKY29uZmlnQm90Lm1hc2tzLm1lbnVQb3J0YWwgPSBudWxsOwpgOwoKbGV0IGVnZ01lbnVCdXR0b24gPSB7fTsKCm9zLnR3ZWVuVG8ob3ZvQm90LCAxNSw0NSw0NSwgNSk7CgplZ2dNZW51QnV0dG9uLm92byA9IHRydWU7CmVnZ01lbnVCdXR0b24ubWFuYWdlciA9ICLwn5SXIiArIHRoaXNCb3QuaWQ7CmVnZ01lbnVCdXR0b24ub3ZvQm90ID0gIvCflJciICsgb3ZvQm90LmlkOwplZ2dNZW51QnV0dG9uLnRhcmdldFZlcnNpb24gPSBvdm9Cb3QudGFncy50YXJnZXRWZXJzaW9uOwplZ2dNZW51QnV0dG9uLmxhYmVsID0gImhhdGNoICIgKyBvdm9Cb3QudGFncy5hYklEICsgIiB2IiArIG92b0JvdC50YWdzLnRhcmdldFZlcnNpb24gKyAiIG9mICIgKyBvdm9Cb3QudGFncy5tYXhWZXJzaW9uOwplZ2dNZW51QnV0dG9uLmxhYmVsQWxpZ25tZW50ID0gImNlbnRlciI7CmVnZ01lbnVCdXR0b24ub3ZvTWVudVJlc2V0ID0gIkAgZGVzdHJveSh0aGlzQm90KTsiOwplZ2dNZW51QnV0dG9uLmNvbG9yID0gIiNGRkZGRkYiOwplZ2dNZW51QnV0dG9uLm9uQ2xpY2sgPSAiQCBsaW5rcy5tYW5hZ2VyLmhhdGNoT3ZvKGxpbmtzLm92b0JvdCk7IjsKCmxpbmtzLm1lbnUuYWJDcmVhdGVNZW51QnV0dG9uKGVnZ01lbnVCdXR0b24pOycAh6CIswKBwQEGY3JlYXRlAgQAh6CIswLsiQIo8J+UlzM0YzNjMjEwLTViZjEtNDljZi1iMTUxLWVlMmQwN2YwZTY3MycAh6CIswKBwQEQY2hhbmdlT3ZvVmVyc2lvbgIEAIegiLMCk4oCygJALy9sb2dpYyBmb3IgdmVyc2lvbiBjaGFuZ2luZyB3aGVuIG1hbnVhbGx5IGhhdGNoaW5nIGFuIGFiCmNvbnN0IG92b0JvdCA9IGxpbmtzLm92b0JvdDsKCmxldCBuZXdWZXJzaW9uID0gYXdhaXQgb3Muc2hvd0lucHV0KG92b0JvdC50YWdzLnRhcmdldFZlcnNpb24sIHsKICAgIHBsYWNlaG9sZGVyOiAiZW50ZXIgYSB2ZXJzaW9uIGZyb20gMSB0byAiICsgb3ZvQm90LnRhZ3MubWF4VmVyc2lvbgp9KTsKCm92b0JvdC50YWdzLnRhcmdldFZlcnNpb24gPSBuZXdWZXJzaW9uOwpvdm9Cb3QudGFncy5sYWJlbCA9ICd2JysgbmV3VmVyc2lvbjsKCnNob3V0KCJvdm9NZW51UmVzZXQiKTsnAIegiLMCgcEBBG1lbnUCBACHoIizAt6MAijwn5SXYjMwYzZjNWQtYTRmNy00MjY2LWJhMzgtMzkzZGM5NWUxZWNiJwCHoIizAoHBAQhhYklnbm9yZQIEAIegiLMChY0CBHRydWUoAIegiLMCgcEBDGFiQm90VmVyc2lvbgF9hwInAIegiLMCgcEBB2FiU2hlbGwCBACHoIizAouNAgR0cnVlJwCHoIizAoHBAQxhYjFMVE1TZWFyY2gCBACHoIizApCNAjNALy9zdXBwb3J0IG9sZCBzeW50YXgKdGhpc0JvdC5vbkxvb2t1cEFCRWdncyh0aGF0KTsnAIegiLMCgcEBDW9uTG9va3VwQXNrSUQCBACHoIizAsSNAvcEQGF3YWl0IG9zLnJlcXVlc3RBdXRoQm90SW5CYWNrZ3JvdW5kKCk7CgppZiAoIWF1dGhCb3QudGFncy5wcml2YWN5RmVhdHVyZXMuYWxsb3dQdWJsaWNEYXRhKQp7CiAgICBvcy50b2FzdCgibm90IGF1dGhvcml6ZWQiKTsKCiAgICByZXR1cm47Cn0KCmxldCBwcm9ncmVzc0J1dHRvbiA9IGF3YWl0IGxpbmtzLmlucHV0LmFiUHJvZ3Jlc3NCYXIoYGxvb2tpbmcgdXAgJHt0aGF0LmFza0lEfWApOwoKY29uc3QgYXNrSUQgPSB0aGF0LmFza0lEOwpjb25zdCBlbmRwb2ludCA9IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJFbmRwb2ludDsKY29uc3QgbG9va3VwQXNrID0gYXdhaXQgb3MuZ2V0RGF0YShsaW5rcy5yZW1lbWJlci50YWdzLmFiUmVjb3JkS2V5LCBhc2tJRCwgZW5kcG9pbnQpOwoKaWYgKGxvb2t1cEFzay5zdWNjZXNzICYmIGxvb2t1cEFzay5kYXRhLnBhdHRlcm5JRCkKewogICAgdGhpc0JvdC5vbkxvb2t1cEFCRWdncyh7YWJJRDogbG9va3VwQXNrLmRhdGEucGF0dGVybklELCByZWNvcmRLZXk6IGxvb2t1cEFzay5kYXRhLnN0dWRpb0lELCBhdXRvSGF0Y2g6IHRydWV9KTsgIAp9CgppZiAocHJvZ3Jlc3NCdXR0b24pCnsKICAgIGRlc3Ryb3kocHJvZ3Jlc3NCdXR0b24pOwp9CgpyZXR1cm4gbG9va3VwQXNrOycAh6CIswKBwQEFaW5wdXQCBACHoIizArySAijwn5SXZjg2MDI4NzgtYzJlZi00OGJkLTg1YTAtOGQ2MzUxZWI0MTIwJwEEYm90cyRmODYwMjg3OC1jMmVmLTQ4YmQtODVhMC04ZDYzNTFlYjQxMjABJwCHoIizAuOSAgZzeXN0ZW0CBACHoIizAuSSAg5hYi5zaGVsbC5pbnB1dCcAh6CIswLjkgIEZm9ybQIEAIegiLMC85ICB25vdGhpbmcnAIegiLMC45ICCW9uS2V5RG93bgIEAIegiLMC+5ICbUAvL2FsbG93IHB1bGxpbmcgdXAgY2hhdCBpbiBidWlsZGVyIHZlcnNpb24KaWYgKHRoYXQua2V5cyA9PSAiYCIgJiYgYnVpbGRlclZlcnNpb24pCnsKICAgIG9zLnNob3dDaGF0KCI+Iik7Cn0nAIegiLMC45ICBm9uQ2hhdAIEAIegiLMC6ZMClRxALy9ub3Qgc3VwcG9ydGVkIG91dHNpZGUgb2YgYnVpbGRlciB2ZXJzaW9uCmlmICghYnVpbGRlclZlcnNpb24pCnsKICAgIHJldHVybjsKfQoKLy90aGlzIGxvb3AgaWRlbnRpZmllcyBwb3NzaWJsZSBhYiBzcGVjaWZpYyBtZXNzYWdlcywgYW5kIGNhbGxzIGEgc2V0IGxpc3Qgb2YgY29tbWFuZHMKaWYgKHRoYXQubWVzc2FnZVswXSA9PSAiLiIpIAp7CiAgICBvcy5oaWRlQ2hhdCgpOwoKICAgIHN3aXRjaCAodGhhdC5tZXNzYWdlKQogICAgewogICAgICAgIGNhc2UgJy5kb3dubG9hZEFCJzoKICAgICAgICAgICAgY2hhbmdlU3RhdGUobGlua3MubWFuaWZlc3RhdGlvbiwgIkFzbGVlcCIsICJhYk1hbmlmZXN0U3RhdGUiKTsKCiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgb3Muc2hvd0lucHV0KCJncm91cCIpOwoKICAgICAgICAgICAgaWYgKGdyb3VwID09ICJhYkNvbmZpZyIpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJDb3JlSXRlcmF0aW9uKys7CiAgICAgICAgICAgICAgICBsaW5rcy5yZW1lbWJlci50YWdzLmluaXRpYWxCb290ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGxpbmtzLnJlbWVtYmVyLnRhZ3MuY29yZUFCID0gbnVsbDsKICAgICAgICAgICAgICAgIGxpbmtzLnJlbWVtYmVyLnRhZ3MuaG9zdElEID0gbnVsbDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc3QgYWJHcm91cCA9IGdldEJvdHMoZ3JvdXApOwoKICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhYkdyb3VwLmxlbmd0aDsgaSsrKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBhYkdyb3VwW2ldLnRhZ3MuYWJCb3RWZXJzaW9uKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIG9zLmRvd25sb2FkQm90c0FzSW5pdGlhbHphdGlvblVwZGF0ZShhYkdyb3VwLCBncm91cCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgYC5sb2FkU2tpbGxgOgogICAgICAgICAgICBsZXQgc2tpbGwgPSBhd2FpdCBvcy5zaG93SW5wdXQoInNraWxsIik7CgogICAgICAgICAgICBsaW5rcy5sZWFybi5hYkFkYXB0KHNraWxsKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSBgLnN5c3RlbWA6CiAgICAgICAgICAgIGNvbmZpZ0JvdC50YWdzLnN5c3RlbVBvcnRhbCA9IHRydWU7CgogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIGAuc2hlZXRgOgogICAgICAgICAgICBjb25maWdCb3QudGFncy5zaGVldFBvcnRhbCA9ICFjb25maWdCb3QudGFncy5tYXBQb3J0YWwgPyBjb25maWdCb3QudGFncy5ncmlkUG9ydGFsIDogY29uZmlnQm90LnRhZ3MubWFwUG9ydGFsOwoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSBgLm1lbnVTaGVldGA6CiAgICAgICAgICAgIGNvbmZpZ0JvdC50YWdzLnNoZWV0UG9ydGFsID0gY29uZmlnQm90LnRhZ3MubWVudVBvcnRhbDsKCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgYC5kb3dubG9hZGA6CiAgICAgICAgICAgIG9zLmRvd25sb2FkQm90cyhnZXRCb3RzKGJ5TW9kKHtzcGFjZTogInNoYXJlZCIsIGFiSWdub3JlOiBudWxsfSkpLCBjb25maWdCb3QudGFncy5pbnN0KTsKCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgYC51cGxvYWRgOgogICAgICAgICAgICBvcy5zaG93VXBsb2FkQXV4RmlsZSgpOwoKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSBgLnNsZWVwYDoKICAgICAgICAgICAgY2hhbmdlU3RhdGUobGlua3MubWFuaWZlc3RhdGlvbiwgIkFzbGVlcCIsICJhYk1hbmlmZXN0U3RhdGUiKTsKCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgYC4uYDoKCiAgICAgICAgICAgIGxldCBza2lsbEFycmF5ID0gWyJhYkludGVyZmFjZSIsICJhYkFjdGlvbiIsICJhYlRlc3RzIl07CgogICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNraWxsQXJyYXkubGVuZ3RoOyBpKyspCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGF3YWl0IGxpbmtzLmxlYXJuLmFiQWRhcHQoc2tpbGxBcnJheVtpXSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGF3YWl0IG9zLnNsZWVwKDMwMCk7CgogICAgICAgICAgICAvL2tlZXAgYWIgYXdha2UKICAgICAgICAgICAgbGlua3MucmVtZW1iZXIudGFncy5hYkF3YWtlU3RhdGUgPSB0cnVlOwoKICAgICAgICAgICAgaWYgKGNvbmZpZ0JvdC50YWdzLnBhdHRlcm4pCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCID0gY29uZmlnQm90LnRhZ3MucGF0dGVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGxpbmtzLnJlbWVtYmVyLnRhZ3MuYmFzZUFCID0gdXVpZCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjaGFuZ2VTdGF0ZShsaW5rcy5tYW5pZmVzdGF0aW9uLCAiQXdha2UiLCAiYWJNYW5pZmVzdFN0YXRlIik7CgogICAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICcubG9nJzoKICAgICAgICAgICAgaWYgKGNvbmZpZ0JvdC50YWdzLnRhZ1BvcnRhbCA9PSBhYi5pZCArICIuYWJMb2ciKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb25maWdCb3QubWFza3MudGFnUG9ydGFsID0gbnVsbDsKICAgICAgICAgICAgICAgIGNvbmZpZ0JvdC5tYXNrcy50YWdQb3J0YWxTcGFjZSA9IG51bGw7CgogICAgICAgICAgICAgICAgdGFnUG9ydGFsQm90Lm1hc2tzLnRhZ1BvcnRhbEFuY2hvclBvaW50ID0gbnVsbDsKCiAgICAgICAgICAgICAgICBvcy5oaWRlQ2hhdCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29uZmlnQm90Lm1hc2tzLnRhZ1BvcnRhbCA9IGFiLmlkICsgIi5hYkxvZyI7CiAgICAgICAgICAgICAgICBjb25maWdCb3QubWFza3MudGFnUG9ydGFsU3BhY2UgPSAidGVtcExvY2FsIjsKCiAgICAgICAgICAgICAgICB0YWdQb3J0YWxCb3QubWFza3MudGFnUG9ydGFsQW5jaG9yUG9pbnQgPSAidG9wIjsKCiAgICAgICAgICAgICAgICBvcy5zaG93Q2hhdCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJy5oaWRlTG9nJzoKICAgICAgICAgICAgY29uZmlnQm90Lm1hc2tzLnRhZ1BvcnRhbCA9IG51bGw7CiAgICAgICAgICAgIGNvbmZpZ0JvdC5tYXNrcy50YWdQb3J0YWxTcGFjZSA9IG51bGw7CgogICAgICAgICAgICB0YWdQb3J0YWxCb3QubWFza3MudGFnUG9ydGFsQW5jaG9yUG9pbnQgPSBudWxsOwoKICAgICAgICAgICAgb3MuaGlkZUNoYXQoKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSB0aGF0Lm1lc3NhZ2U7CiAgICAgICAgICAgIGxldCBleGVjdXRhYmxlID0gbWVzc2FnZS5zbGljZSgxKTsKCiAgICAgICAgICAgIHRyeQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBvcy5ydW4oZXhlY3V0YWJsZSk7ICAKICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCAoZSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgIH0KICAgIH0KfScAh6CIswLjkgILZGVzY3JpcHRpb24CBACHoIizAv+vAkJUaGlzIGlzIG1lYW50IHRvIGhhbmRsZSBhbnkgbm9uZSBtZW51IHJlbGF0ZWQgaW5wdXRzL2ludGVyYWN0aW9ucy4nAIegiLMC45ICDG9uRmlsZVVwbG9hZAIEAIegiLMCwrAC1hNAYXdhaXQgb3MucmVxdWVzdEF1dGhCb3RJbkJhY2tncm91bmQoKTsKCi8vZmlsdGVyIG91dCB0aW1lcyB3aGVuIGZpbGUgbG9hZGluZyBpcyBub3QgYWxsb3dlZAppZiAoIWJ1aWxkZXJWZXJzaW9uIHx8IGxpbmtzLnJlbWVtYmVyLnRhZ3MuYWJMaXN0ZW5pbmdGb3JGaWxlVXBsb2FkcyAhPT0gdHJ1ZSB8fCBhdXRoQm90LnRhZ3MucHJpdmFjeUZlYXR1cmVzLnB1Ymxpc2hEYXRhKQp7CiAgb3MudG9hc3QoIm5vdCBhdXRob3JpemVkIik7CgogIHJldHVybjsKfQoKLy92YXJpb3VzIGZpbGUgc3BlY2lmaWMgdmFyaWFibGVzCmxldCBmaWxlRXh0ZW5zaW9uID0gdGhhdC5maWxlLm5hbWUuc3BsaXQoJy4nKS5wb3AoKTsKbGV0IGZpbGVOYW1lID0gdGhhdC5maWxlLm5hbWUuc3BsaXQoJy4nKS5zaGlmdCgpOwpsZXQgc2l6ZSA9IHRoYXQuZmlsZS5zaXplOwpsZXQgbWltZVR5cGU7CmxldCBib3RJbmZvID0ge307CgovL2hhcmQgbGltaXQgYmFzZWQgb24gZmlsZSBzaXplCmlmIChzaXplID4gMjAwMDAwMDAwKQp7CiAgb3MudG9hc3QoIm1heGltdW0gZmlsZSBzaXplIGV4Y2VlZGVkICgyMDAgbWIpIik7CgogIHJldHVybjsKfQoKLy90aGlzIHN3aXRjaCBoYW5kbGVzIHBvc3NpYmxlIGZpbGVzIGV4dGVuc2lvbnMsIHdoaWxlIHJlamVjdGluZyBhbnkgaXQgZG9lcyBub3QgcmVjb2duaXplCnN3aXRjaChmaWxlRXh0ZW5zaW9uKQp7CiAgY2FzZSAnanBnJzoKICBjYXNlICdqcGVnJzoKICBjYXNlICd3ZWJwJzoKICBjYXNlICdnaWYnOgogIGNhc2UgJ3BuZyc6CiAgICBtaW1lVHlwZSA9ICJpbWFnZS8iICsgZmlsZUV4dGVuc2lvbjsKICAgIGJvdEluZm8uZm9ybSA9ICJzcHJpdGUiOwogICAgYnJlYWs7CiAgY2FzZSAnc3ZnJzoKICAgIG1pbWVUeXBlID0gImltYWdlL3N2Zyt4bWwiOwogICAgYm90SW5mby5mb3JtID0gInNwcml0ZSI7CiAgICBicmVhazsKICBjYXNlICdnbGInOgogIGNhc2UgJ2dsdGYnOgogICAgbWltZVR5cGUgPSAidGV4dC94bWwiOwogICAgYm90SW5mby5mb3JtID0gIm1lc2giOwogICAgYm90SW5mby5mb3JtU3VidHlwZSA9ICJnbHRmIjsKICAgIGJyZWFrOwogIGNhc2UgJ2F1eCc6CiAgY2FzZSAncGRmJzoKICAgIGxldCBib3REYXRhID0gZmlsZUV4dGVuc2lvbiA9PSAiLmF1eCIgPyBKU09OLnBhcnNlKHRoYXQuZmlsZS5kYXRhKS5zdGF0ZSA6IG9zLnBhcnNlQm90c0Zyb21EYXRhKHRoYXQuZmlsZS5kYXRhKTsKCiAgICBsaW5rcy5jcmVhdGUuYWJDcmVhdGVCb3RzKHtib3RzOiBib3REYXRhLCBvcmlnaW46IGZpbGVOYW1lfSk7CgogICAgcmV0dXJuOwovLyAgIGNhc2UgJ3BkZic6Ci8vICAgICBicmVhazsKICBjYXNlICdtcDMnOgogICAgbWltZVR5cGUgPSAnYXVkaW8vbXBlZyc7CiAgICBib3RJbmZvLm9uQ2xpY2sgPSAiQCBvcy5wbGF5U291bmQodGFncy5mb3JtQWRkcmVzcyk7IjsKICAgIGJvdEluZm8ubGFiZWwgPSAiQ2xpY2sgdG8gUGxheSI7CiAgICBicmVhazsKICBjYXNlICdtcDQnOgogICAgbWltZVR5cGUgPSAndmlkZW8vbXA0JzsKICAgIGJvdEluZm8uZm9ybSA9ICJpZnJhbWUiOwogICAgYm90SW5mby5mb3JtU3VidHlwZSA9ICJzcmMiOwogICAgYnJlYWs7CiAgZGVmYXVsdDoKICAgIGxldCByZXN1bHQgPSBuZXcgRXJyb3IoInVuaGFuZGxlZCBmaWxlIHR5cGU6ICIgKyBmaWxlRXh0ZW5zaW9uKTsKICAgIG9zLnRvYXN0KCJmaWxlIHR5cGUgbm90IHN1cHBvcnRlZCIpOwogICAgY29uc29sZS53YXJuKHJlc3VsdCkKICAgIHJldHVybiByZXN1bHQ7Cn0KCi8vdGhlIGZvbGxvd2luZyB2YXJpYWJsZXMgYW5kIG9iamVjdHMgc2V0IHVwIGEgbG9hZGluZyBiYXIgYnV0dG9uCmNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gImFiTWVudSI7CgpsZXQgdXBsb2FkUmVzdWx0OwpsZXQgcHJvZ3Jlc3NCdXR0b24gPSBhd2FpdCB0aGlzQm90LmFiUHJvZ3Jlc3NCYXIoYHVwbG9hZGluZ2ApOwoKLy90aGlzIGlzIHRoZSBhY3R1YWwgdXBsb2FkIGZ1bmN0aW9uYWxpdHkKdXBsb2FkUmVzdWx0ID0gYXdhaXQgbGlua3Muc3RvcmUuYWJQdWJsaXNoRmlsZSh7ZmlsZTogdGhhdC5maWxlLmRhdGEsIGZpbGVOYW1lOiBmaWxlTmFtZSwgbWltZVR5cGU6IG1pbWVUeXBlfSk7CgovL2lmIHRoZSBmaWxlIHNob3VsZCBiZSBpbmNsdWRlZCBhcyBhIGJvdCB3aXRoIGEgbGluaywgdGhpcyBsb2dpYyBoYW5kbGVzIHRoYXQKaWYgKE9iamVjdC5rZXlzKGJvdEluZm8pLmxlbmd0aCA+IDApCnsKICAgIGJvdEluZm9bY29uZmlnQm90LnRhZ3MuZ3JpZFBvcnRhbF0gPSB0cnVlOwogICAgYm90SW5mby5mb3JtQWRkcmVzcyA9IHVwbG9hZFJlc3VsdC51cmwgPyB1cGxvYWRSZXN1bHQudXJsIDogdXBsb2FkUmVzdWx0LmV4aXN0aW5nRmlsZVVybDsKCiAgICBjcmVhdGUoYm90SW5mbyk7Cn0KCi8vY2xlYXIgdGhlIHByb2dyZXNzIGJhciBidXR0b24KY29uZmlnQm90Lm1hc2tzLm1lbnVQb3J0YWwgPSBudWxsOwoKaWYgKHByb2dyZXNzQnV0dG9uKQp7CiAgZGVzdHJveShwcm9ncmVzc0J1dHRvbik7Cn0KCnJldHVybiB1cGxvYWRSZXN1bHQ7JwCHoIizAuOSAgVsZWFybgIEAIegiLMCmcQCKPCflJc2NjU3Yjg2NS1lOTgzLTQ0MDEtOWZjOS1mNTQxOGQxOGE3ZjcnAIegiLMC45ICCHJlbWVtYmVyAgQAh6CIswLAxAIo8J+Ul2U1MzgwYTZiLThiNGQtNGE4Yi04YjA0LTU4ZTFlYjAzZTVlNycAh6CIswLjkgINbWFuaWZlc3RhdGlvbgIEAIegiLMC58QCKPCflJdkY2E1ZDk4Ny1jNGQ4LTQ2ZTQtYjYwYy1kYWE3YjJmNGRkYWQnAIegiLMC45ICCGFiSWdub3JlAgQAh6CIswKOxQIEdHJ1ZSgAh6CIswLjkgIMYWJCb3RWZXJzaW9uAX2HAicAh6CIswLjkgIGY3JlYXRlAgQAh6CIswKUxQIo8J+UlzM0YzNjMjEwLTViZjEtNDljZi1iMTUxLWVlMmQwN2YwZTY3MycAh6CIswLjkgIFc3RvcmUCBACHoIizArvFAijwn5SXNzZhZjA0OTEtMzkxOS00OTg0LWFhODItMjJjNzQyZjQyNjNmJwCHoIizAuOSAgRtZW51AgQAh6CIswLixQIo8J+Ul2IzMGM2YzVkLWE0ZjctNDI2Ni1iYTM4LTM5M2RjOTVlMWVjYicAh6CIswLjkgIHYWJTaGVsbAIEAIegiLMCicYCBHRydWUnAIegiLMC45ICDWFiUHJvZ3Jlc3NCYXICBACHoIizAo7GAtUIQGlmICghY29uZmlnQm90LnRhZ3MuYWJTaWxlbnQpCnsKICAgIGNvbmZpZ0JvdC5tYXNrcy5tZW51UG9ydGFsID0gImFiTWVudSI7Cn0KCmxldCBsb2FkTGFiZWwgPSB0aGF0ID8/ICJ1cGRhdGluZyI7CmxldCBtZW51QnV0dG9uID0ge307CgptZW51QnV0dG9uLnNwYWNlID0gInRlbXBMb2NhbCI7Cm1lbnVCdXR0b24uYWJNZW51ID0gdHJ1ZTsKbWVudUJ1dHRvbi5tZW51SXRlbVN0eWxlID0geyAiYm9yZGVyLXJhZGl1cyI6IjhweCIsICJtYXJnaW4tdG9wIjoiM3B4In07Cm1lbnVCdXR0b24udHJhY2tOdW0gPSAtMTsKbWVudUJ1dHRvbi5vbkNyZWF0ZSA9IGBACiAgICBpZiAodGFncy50cmFja051bSA9PSAyKQogICAgewogICAgICAgIHRhZ3MudHJhY2tOdW0gPSAwOwogICAgfQogICAgZWxzZQogICAgewogICAgICAgIHRhZ3MudHJhY2tOdW0rKzsKICAgIH0KCiAgICB0YWdzLmxhYmVsID0gdGFnc1sibGFiZWwiK3RhZ3MudHJhY2tOdW1dOwogICAgdGFncy5mb3JtQWRkcmVzcyA9IHRhZ3NbImZvcm0iK3RhZ3MudHJhY2tOdW1dOwoKICAgIHNldFRpbWVvdXQoKCkgPT4gd2hpc3Blcih0aGlzQm90LCAib25DcmVhdGUiKSwgNTAwKTtgOwptZW51QnV0dG9uLmxhYmVsMCA9IGxvYWRMYWJlbCArICIuIjsKbWVudUJ1dHRvbi5sYWJlbDEgPSBsb2FkTGFiZWwgKyAiLi4iOwptZW51QnV0dG9uLmxhYmVsMiA9IGxvYWRMYWJlbCArICIuLi4iOwptZW51QnV0dG9uLmZvcm0wID0gImhvdXJnbGFzc19ib3R0b20iOwptZW51QnV0dG9uLmZvcm0xID0gImhvdXJnbGFzc190b3AiOwptZW51QnV0dG9uLmZvcm0yID0gImhvdXJnbGFzc19ib3R0b20iOwptZW51QnV0dG9uLmNvbG9yID0gbGlua3MucmVtZW1iZXIudGFncy5hYkJhc2VDb2xvcjsKbWVudUJ1dHRvbi5sYWJlbENvbG9yID0gImJsYWNrIjsKbWVudUJ1dHRvbi5sYWJlbEFsaWdubWVudCA9ICJjZW50ZXIiOwptZW51QnV0dG9uLmFiUHJvZ3Jlc3NSZXNldCA9ICJAIGRlc3Ryb3kodGhpc0JvdCk7IjsKbWVudUJ1dHRvbi5vbkRlc3Ryb3kgPSAiQCBjb25maWdCb3QubWFza3MubWVudVBvcnRhbCA9IG51bGw7IjsKCm1lbnVCdXR0b24gPSBjcmVhdGUobWVudUJ1dHRvbik7CgpyZXR1cm4gbWVudUJ1dHRvbjsA"}]}