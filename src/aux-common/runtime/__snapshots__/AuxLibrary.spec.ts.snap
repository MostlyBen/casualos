// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AuxLibrary assertEqual() should pretty print objects 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mtoEqual[2m([22m[32mexpected[39m[2m) // deep equality[22m

[32m- Expected  - 1[39m
[31m+ Received  + 1[39m

[2m  Object {[22m
[32m-   \\"def\\": 456,[39m
[31m+   \\"abc\\": 123,[39m
[2m  }[22m"
`;

exports[`AuxLibrary assertEqual() should throw an error if the given values are not equal 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mtoEqual[2m([22m[32mexpected[39m[2m) // deep equality[22m

Expected: [32mfalse[39m
Received: [31mtrue[39m"
`;

exports[`AuxLibrary expect() toBe() should throw an error if the bots are not the same 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mtoBe[2m([22m[32mexpected[39m[2m) // Object.is equality[22m

[2mIf it should pass with deep equality, replace \\"toBe\\" with \\"toStrictEqual\\"[22m

Expected: [32m{\\"id\\": \\"test1\\", \\"tags\\": {}}[39m
Received: serializes to the same string"
`;

exports[`AuxLibrary expect() toEqual() should throw when bots have different IDs 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mtoEqual[2m([22m[32mexpected[39m[2m) // deep equality[22m

[32m- Expected  - 1[39m
[31m+ Received  + 1[39m

[2m  Object {[22m
[32m-   \\"id\\": \\"test2\\",[39m
[31m+   \\"id\\": \\"test1\\",[39m
[2m    \\"space\\": undefined,[22m
[2m    \\"tags\\": Object {},[22m
[2m  }[22m"
`;

exports[`AuxLibrary expect() toEqual() should throw when bots have different tags 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mtoEqual[2m([22m[32mexpected[39m[2m) // deep equality[22m

[32m- Expected  - 1[39m
[31m+ Received  + 3[39m

[2m  Object {[22m
[2m    \\"id\\": \\"test1\\",[22m
[2m    \\"space\\": undefined,[22m
[32m-   \\"tags\\": Object {},[39m
[31m+   \\"tags\\": Object {[39m
[31m+     \\"abc\\": \\"def\\",[39m
[31m+   },[39m
[2m  }[22m"
`;

exports[`AuxLibrary expect() toEqual() should throw when bots have the same tag mask but in a different space 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).[22mtoEqual[2m([22m[32mexpected[39m[2m) // deep equality[22m

[32m- Expected  - 1[39m
[31m+ Received  + 1[39m

[33m@@ -1,9 +1,9 @@[39m
[2m  Object {[22m
[2m    \\"id\\": \\"test1\\",[22m
[2m    \\"masks\\": Object {[22m
[32m-     \\"local\\": Object {[39m
[31m+     \\"tempLocal\\": Object {[39m
[2m        \\"abc\\": \\"def\\",[22m
[2m      },[22m
[2m    },[22m
[2m    \\"space\\": undefined,[22m
[2m    \\"tags\\": Object {},[22m"
`;

exports[`AuxLibrary html h() should return a HTML VDOM element 1`] = `
Object {
  "__": null,
  "__b": 0,
  "__c": null,
  "__d": undefined,
  "__e": null,
  "__h": null,
  "__k": null,
  "__v": 2,
  "constructor": undefined,
  "key": undefined,
  "props": Object {
    "children": "Hello, World!",
  },
  "ref": undefined,
  "type": "h1",
}
`;

exports[`AuxLibrary html should return a HTML VDOM element 1`] = `
Object {
  "__": null,
  "__b": 0,
  "__c": null,
  "__d": undefined,
  "__e": null,
  "__h": null,
  "__k": null,
  "__v": 1,
  "constructor": undefined,
  "key": undefined,
  "props": Object {
    "children": "Hello, World!",
  },
  "ref": undefined,
  "type": "h1",
}
`;
